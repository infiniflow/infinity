name: tests

on:
  push:
    branches:
      - 'main'
      - '*.*.*'
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    types: [ opened, synchronize, reopened, labeled ]
    paths-ignore:
      - 'docs/**'
      - '*.md'

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  code_static_check:
    name: code_static_check
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    steps:
      - name: Ensure workspace ownership
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "Workflow triggered by ${{ github.event_name }}"
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo "PR labels: ${{ join(github.event.pull_request.labels.*.name, ', ') }}"
          fi
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE

      - name: Check out code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: false

      - name: Backup code
        if: ${{ !cancelled() && !failure() && (github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci')) }}
        run: |
          tar --create --gzip --file=infinity.tgz .git $(git ls-files)
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          mkdir -p ${ARTIFACTS_DIR} && cp infinity.tgz ${ARTIFACTS_DIR}/

      - name: Start builder container
        if: ${{ !cancelled() && !failure() }}
        run: |
          CHECK_CONTAINER=infinity_build_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "CHECK_CONTAINER=${CHECK_CONTAINER}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged --cap-add=NET_ADMIN -d --name ${CHECK_CONTAINER} -e TZ=$TZ \
            -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Check format of changed C/C++ files
        if: ${{ !cancelled() && !failure() }}
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} \
              | grep -E '\.(cpp|h|hpp|cppm)$' \
              | grep -v 'third_party/' \
              | grep -v 'network/' \
              | grep -v 'parser/' || true)

            if [ -n "$CHANGED_FILES" ]; then
              echo "Check format of changed C/C++ files with clang-format-20"

              readarray -t files <<< "$CHANGED_FILES"
              HAS_ERROR=0

              for file in "${files[@]}"; do
                if [ -f "$file" ]; then
                  echo "Checking formatting: $file"
                  sudo docker exec ${CHECK_CONTAINER} bash -c "cd /infinity; clang-format-20 $file > ${file}.formatted; diff $file ${file}.formatted 2>/dev/null"
                  if [ $? -ne 0 ]; then
                    echo "❌ $file needs formatting"
                    HAS_ERROR=1
                  else
                    echo "✅ $file is properly formatted"
                  fi
                  rm -f "${file}.formatted"
                fi
              done

              if [ $HAS_ERROR -ne 0 ]; then
                exit 1
              fi
            else
              echo "No C++ files changed"
            fi
          fi

      - name: Remove container
        if: always()
        run: sudo docker rm -f -v ${CHECK_CONTAINER}

  debug_build:
    name: debug_build
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-build" ]
    needs: code_static_check
    steps:
      - name: Prepare code
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar --extract --gzip --file=${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx

      - name: Start builder container
        if: ${{ !cancelled() && !failure() }}
        run: |
          BUILDER_CONTAINER=infinity_build_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "BUILDER_CONTAINER=${BUILDER_CONTAINER}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${BUILDER_CONTAINER} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Build debug version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${BUILDER_CONTAINER} bash -c "git config --global safe.directory \"*\" && cd /infinity && rm -rf cmake-build-debug && mkdir -p cmake-build-debug && cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCODE_COVERAGE=ON -S /infinity -B /infinity/cmake-build-debug && cmake --build /infinity/cmake-build-debug -j --target infinity test_main"

      - name: Upload artifacts
        if: ${{ !cancelled() && !failure() }}
        run: tar --create --file=- cmake-build-debug/src/{infinity,test_main} | tar --extract --directory=${ARTIFACTS_DIR} --file=-

      - name: Remove build container
        if: always()
        run: sudo docker rm -f -v ${BUILDER_CONTAINER}

  debug_unit_test:
    name: debug_unit_test
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    needs: debug_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar --directory=${ARTIFACTS_DIR} --create --file=- cmake-build-debug/src/test_main | tar --extract --file=-

      - name: Start test container
        if: ${{ !cancelled() && !failure() }}
        run: |
          TEST_CONTAINER_NAME=infinity_test_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "TEST_CONTAINER_NAME=${TEST_CONTAINER_NAME}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${TEST_CONTAINER_NAME} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Start minio container
        if: ${{ !cancelled() && !failure() }}
        run: |
          MINIO_CONTAINER_NAME=minio_${TEST_CONTAINER_NAME}
          echo "MINIO_CONTAINER_NAME=${MINIO_CONTAINER_NAME}" >> $GITHUB_ENV
          rm -rf ${MINIO_CONTAINER_NAME} && mkdir -p ${MINIO_CONTAINER_NAME}
          sudo docker run -d --net=container:${TEST_CONTAINER_NAME} --name ${MINIO_CONTAINER_NAME} -e "MINIO_ROOT_PASSWORD=minioadmin" -e "MINIO_ROOT_USER=minioadmin"  -v ${MINIO_CONTAINER_NAME}:/data quay.io/minio/minio server /data --console-address ":9006" --address ":9005"
          sleep 5s
          if ! sudo docker ps --filter "name=${MINIO_CONTAINER_NAME}" --filter "status=running" | grep -q ${MINIO_CONTAINER_NAME}; then
              echo "Minio container is not running"
              exit 1
          fi

      - name: Unit test debug version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${TEST_CONTAINER_NAME} bash -c "mkdir -p /var/infinity && cd /infinity/ && export LLVM_PROFILE_FILE="infinity-%p.profraw" && ASAN_OPTIONS=detect_leaks=0 cmake-build-debug/src/test_main --gtest_also_run_disabled_tests --gtest_filter=-*SLOW_* > debug_unit_test_stdout.log 2> debug_unit_test_stderr.log"

      - name: Generate LCOV report
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && llvm-profdata-20 merge -sparse infinity-*.profraw -o coverage.profdata && llvm-cov-20 export cmake-build-debug/src/test_main -instr-profile=coverage.profdata -format=lcov -ignore-filename-regex='.*unit_test.*|.*third_party.*' > coverage.lcov"
          mkdir -p ${ARTIFACTS_DIR}/debug_unit_test && cp coverage.lcov ${ARTIFACTS_DIR}/debug_unit_test/
          head -10 coverage.lcov
          echo "LCOV file lines: $(wc -l < coverage.lcov)"
>>>>>>> 50d541284 (more)

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: coverage.lcov
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Collect infinity log
        if: ${{ !cancelled() }}
        run: |
          echo 'debug unit test stdout' && tail -n 1000 debug_unit_test*.log
          mkdir -p ${ARTIFACTS_DIR}/debug_unit_test/ && cp debug_unit_test*.log ${ARTIFACTS_DIR}/debug_unit_test/

      - name: Remove test container
        if: always()
        run: |
          sudo docker rm -f -v ${MINIO_CONTAINER_NAME} ${TEST_CONTAINER_NAME}
          rm -rf ${MINIO_CONTAINER_NAME}

  debug_sqllogical_test:
    name: debug_sqllogical_test
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    needs: debug_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar --extract --gzip --file=${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar --directory=${ARTIFACTS_DIR} --create --file=- cmake-build-debug/src/infinity | tar --extract --file=-

      - name: Start test container
        if: ${{ !cancelled() && !failure() }}
        run: |
          TEST_CONTAINER_NAME=infinity_test_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "TEST_CONTAINER_NAME=${TEST_CONTAINER_NAME}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${TEST_CONTAINER_NAME} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Install pysdk
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${TEST_CONTAINER_NAME} bash -c "rm -rf /root/.config/pip/pip.conf && cd /infinity/ && pip3 uninstall -y infinity-sdk && pip3 install python/infinity_sdk -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host tuna.tsinghua.edu.cn"

      - name: Start infinity debug version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec -d ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && cmake-build-debug/src/infinity --config=conf/pytest_parallel_infinity_conf.toml > debug_sqllogictest_stdout.log 2> debug_sqllogictest_stderr.log"

      - name: Run sqllogictest debug version
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && python3 tools/sqllogictest.py"
          sleep 1s

      - name: Collect infinity log
        if: ${{ !cancelled() }}
        run: |
          mkdir -p ${ARTIFACTS_DIR}/debug_sqllogic_test/ && cp debug_sqllogictest*.log ${ARTIFACTS_DIR}/debug_sqllogic_test/
          sudo docker cp ${TEST_CONTAINER_NAME}:/var/infinity/log/infinity.log ${ARTIFACTS_DIR}/debug_sqllogic_test/infinity.log
          echo 'debug sqllogictest log' && tail -n 1000 debug_sqllogictest*.log

      - name: Remove test container
        if: always()
        run: sudo docker rm -f -v ${TEST_CONTAINER_NAME}

  debug_restart_test:
    name: debug_restart_test
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    needs: debug_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar -C ${ARTIFACTS_DIR} -cf - cmake-build-debug/src/infinity | tar -xf -

      - name: Start test container
        if: ${{ !cancelled() && !failure() }}
        run: |
          TEST_CONTAINER_NAME=infinity_test_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "TEST_CONTAINER_NAME=${TEST_CONTAINER_NAME}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${TEST_CONTAINER_NAME} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Install pysdk
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${TEST_CONTAINER_NAME} bash -c "rm -rf /root/.config/pip/pip.conf && cd /infinity/ && pip3 uninstall -y infinity-sdk && pip3 install python/infinity_sdk -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host tuna.tsinghua.edu.cn"

      - name: Run restart test
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && python3 tools/run_restart_test.py --infinity_path=cmake-build-debug/src/infinity"

      - name: Collect infinity log
        if: ${{ !cancelled() }}
        run: |
          mkdir -p ${ARTIFACTS_DIR}/debug_restart_test && cp restart_test*.log* ${ARTIFACTS_DIR}/debug_restart_test/
          echo 'debug_restart_test log(last 1000 lines):' && tail -n 1000 restart_test*.log*

      - name: Remove test container
        if: always()
        run: sudo docker rm -f -v ${TEST_CONTAINER_NAME}

  debug_pysdk_test:
    name: debug_pysdk_test
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    needs: debug_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar -C ${ARTIFACTS_DIR} -cf - cmake-build-debug/src/infinity | tar -xf -

      - name: Start test container
        if: ${{ !cancelled() && !failure() }}
        run: |
          TEST_CONTAINER_NAME=infinity_test_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "TEST_CONTAINER_NAME=${TEST_CONTAINER_NAME}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${TEST_CONTAINER_NAME} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Install pysdk
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${TEST_CONTAINER_NAME} bash -c "rm -rf /root/.config/pip/pip.conf && cd /infinity/ && pip3 uninstall -y infinity-sdk && pip3 install python/infinity_sdk -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host tuna.tsinghua.edu.cn"

      - name: Start infinity debug version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec -d ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && cmake-build-debug/src/infinity --config=conf/pytest_parallel_infinity_conf.toml > debug_pysdk_stdout.log 2> debug_pysdk_stderr.log"

      - name: Run pysdk remote infinity test debug version
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && python3 tools/run_pysdk_remote_infinity_test.py"
          sleep 1s

      - name: Collect infinity log
        if: ${{ !cancelled() }}
        run: |
          mkdir -p ${ARTIFACTS_DIR}/debug_pysdk_test && cp debug_pysdk*.log ${ARTIFACTS_DIR}/debug_pysdk_test/
          sudo docker cp ${TEST_CONTAINER_NAME}:/var/infinity/log/infinity.log ${ARTIFACTS_DIR}/debug_pysdk_test/
          echo 'debug pysdk log' && tail -n 1000 debug_pysdk*.log

      - name: Remove test container
        if: always()
        run: |
          sudo docker rm -f -v ${TEST_CONTAINER_NAME}

  debug_http_test:
    name: debug_http_test
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    needs: debug_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar -C ${ARTIFACTS_DIR} -cf - cmake-build-debug/src/infinity | tar -xf -

      - name: Start test container
        if: ${{ !cancelled() && !failure() }}
        run: |
          TEST_CONTAINER_NAME=infinity_test_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "TEST_CONTAINER_NAME=${TEST_CONTAINER_NAME}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${TEST_CONTAINER_NAME} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Install pysdk
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${TEST_CONTAINER_NAME} bash -c "rm -rf /root/.config/pip/pip.conf && cd /infinity/ && pip3 uninstall -y infinity-sdk && pip3 install python/infinity_sdk -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host tuna.tsinghua.edu.cn"

      - name: Start infinity debug version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec -d ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && cmake-build-debug/src/infinity --config=conf/pytest_parallel_infinity_conf.toml > debug_http_stdout.log 2> debug_http_stderr.log"

      - name: Run HTTP infinity test debug version
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && python3 tools/run_http_api.py"
          sleep 1s

      - name: Collect infinity log
        if: ${{ !cancelled() }}
        run: |
          mkdir -p ${ARTIFACTS_DIR}/debug_http_test && cp debug_http*.log ${ARTIFACTS_DIR}/debug_http_test/
          sudo docker cp ${TEST_CONTAINER_NAME}:/var/infinity/log/infinity.log ${ARTIFACTS_DIR}/debug_http_test/
          echo 'debug http log' && tail -n 1000 debug_http*.log

      - name: Remove test container
        if: always()
        run: |
          sudo docker rm -f -v ${TEST_CONTAINER_NAME}

  debug_pysdk_parallel_test:
    name: debug_pysdk_parallel_test
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    needs:
      - debug_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar -C ${ARTIFACTS_DIR} -cf - cmake-build-debug/src/infinity | tar -xf -

      - name: Start test container
        if: ${{ !cancelled() && !failure() }}
        run: |
          TEST_CONTAINER_NAME=infinity_test_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "TEST_CONTAINER_NAME=${TEST_CONTAINER_NAME}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${TEST_CONTAINER_NAME} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Install pysdk
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${TEST_CONTAINER_NAME} bash -c "rm -rf /root/.config/pip/pip.conf && cd /infinity/ && pip3 uninstall -y infinity-sdk && pip3 install python/infinity_sdk -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host tuna.tsinghua.edu.cn"

      - name: Start infinity debug version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec -d ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && cmake-build-debug/src/infinity --config=conf/pytest_parallel_infinity_conf.toml > debug_parallel_stdout.log 2> debug_parallel_stderr.log"

      - name: Run HTTP infinity test debug version
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && python3 tools/run_parallel_test.py"
          sleep 1s

      - name: Collect infinity log
        if: ${{ !cancelled() }}
        run: |
          mkdir -p ${ARTIFACTS_DIR}/debug_parallel_test && cp debug_parallel_stdout.log debug_parallel_stderr.log ${ARTIFACTS_DIR}/debug_parallel_test/
          sudo docker cp ${TEST_CONTAINER_NAME}:/var/infinity/log/infinity.log ${ARTIFACTS_DIR}/debug_parallel_test/
          echo 'debug parallel log' && tail -n 1000 debug_parallel*.log

      - name: Remove test container
        if: always()
        run: sudo docker rm -f -v ${TEST_CONTAINER_NAME}


  reldeb_build:
    name: reldeb_build
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-build" ]
    needs: code_static_check
    steps:
      - name: Prepare code
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx

      - name: Start builder container
        if: ${{ !cancelled() && !failure() }}
        run: |
          BUILDER_CONTAINER=infinity_build_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "BUILDER_CONTAINER=${BUILDER_CONTAINER}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${BUILDER_CONTAINER} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Build reldeb version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${BUILDER_CONTAINER} bash -c "git config --global safe.directory \"*\" && cd /infinity && rm -rf cmake-build-reldeb && mkdir -p cmake-build-reldeb && cmake -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -S /infinity -B /infinity/cmake-build-reldeb && cmake --build /infinity/cmake-build-reldeb -j --target infinity test_main knn_import_benchmark knn_query_benchmark"

      - name: Upload artifacts
        if: ${{ !cancelled() && !failure() }}
        run: tar -cf - cmake-build-reldeb/src/{infinity,test_main} cmake-build-reldeb/benchmark/local_infinity/{knn_import_benchmark,knn_query_benchmark} | tar -C ${ARTIFACTS_DIR} -xf -

      - name: Remove build container
        if: always()
        run: sudo docker rm -f -v ${BUILDER_CONTAINER}

  reldeb_unit_test:
    name: reldeb_unit_test
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    needs: reldeb_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar -C ${ARTIFACTS_DIR} -cf - cmake-build-reldeb/src/test_main | tar -xf -

      - name: Start test container
        if: ${{ !cancelled() && !failure() }}
        run: |
          TEST_CONTAINER_NAME=infinity_test_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "TEST_CONTAINER_NAME=${TEST_CONTAINER_NAME}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${TEST_CONTAINER_NAME} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Start minio container
        if: ${{ !cancelled() && !failure() }}
        run: |
          MINIO_CONTAINER_NAME=minio_${TEST_CONTAINER_NAME}
          echo "MINIO_CONTAINER_NAME=${MINIO_CONTAINER_NAME}" >> $GITHUB_ENV
          rm -rf {MINIO_CONTAINER_NAME && mkdir -p ${MINIO_CONTAINER_NAME}
          sudo docker run -d --net=container:${TEST_CONTAINER_NAME} --name ${MINIO_CONTAINER_NAME} -e "MINIO_ROOT_PASSWORD=minioadmin" -e "MINIO_ROOT_USER=minioadmin"  -v ${MINIO_CONTAINER_NAME}:/data quay.io/minio/minio server /data --console-address ":9006" --address ":9005"
          sleep 5s
          if ! sudo docker ps --filter "name=${MINIO_CONTAINER_NAME}" --filter "status=running" | grep -q ${MINIO_CONTAINER_NAME}; then
              echo "Minio container is not running"
              exit 1
          fi

      - name: Unit test reldeb version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${TEST_CONTAINER_NAME} bash -c "mkdir -p /var/infinity && cd /infinity/ && cmake-build-reldeb/src/test_main --gtest_also_run_disabled_tests --gtest_filter=-*SLOW_* > reldeb_unit_test_stdout.log 2> reldeb_unit_test_stderr.log"

      - name: Collect infinity log
        if: ${{ !cancelled() }}
        run: |
          mkdir -p ${ARTIFACTS_DIR}/reldeb_unit_test && cp reldeb_unit_test*.log ${ARTIFACTS_DIR}/reldeb_unit_test/
          echo 'reldeb unit test log' && tail -n 1000 reldeb_unit_test*.log

      - name: Remove test container
        if: always()
        run: |
          sudo docker rm -f -v ${MINIO_CONTAINER_NAME} ${TEST_CONTAINER_NAME}
          rm -rf ${MINIO_CONTAINER_NAME}

  reldeb_sqllogical_test:
    name: reldeb_sqllogical_test
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    needs: reldeb_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar -C ${ARTIFACTS_DIR} -cf - cmake-build-reldeb/src/infinity | tar -xf -

      - name: Start test container
        if: ${{ !cancelled() && !failure() }}
        run: |
          TEST_CONTAINER_NAME=infinity_test_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "TEST_CONTAINER_NAME=${TEST_CONTAINER_NAME}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${TEST_CONTAINER_NAME} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Install pysdk
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${TEST_CONTAINER_NAME} bash -c "rm -rf /root/.config/pip/pip.conf && cd /infinity/ && pip3 uninstall -y infinity-sdk && pip3 install python/infinity_sdk -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host tuna.tsinghua.edu.cn"

      - name: Start infinity reldeb version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec -d ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && cmake-build-reldeb/src/infinity --config=conf/pytest_parallel_infinity_conf.toml > reldeb_sqllogic_test_stdout.log 2> reldeb_sqllogic_test_stderr.log"

      - name: Run sqllogictest reldeb version
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && python3 tools/sqllogictest.py"
          sleep 1s

      - name: Collect infinity log
        if: ${{ !cancelled() }}
        run: |
          mkdir -p ${ARTIFACTS_DIR}/reldeb_sqllogic_test && cp reldeb_sqllogic_test*.log ${ARTIFACTS_DIR}/reldeb_sqllogic_test/
          cp reldeb_sqllogic_test* ${ARTIFACTS_DIR}/reldeb_sqllogic_test/
          sudo docker cp ${TEST_CONTAINER_NAME}:/var/infinity/log/infinity.log ${ARTIFACTS_DIR}/reldeb_sqllogic_test/
          echo 'reldeb sqllogic test log' && tail -n 1000 reldeb_sqllogic_test*.log

      - name: Remove test container
        if: always()
        run: sudo docker rm -f -v ${TEST_CONTAINER_NAME}

  reldeb_pysdk_test:
    name: reldeb_pysdk_test
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    needs: reldeb_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar -C ${ARTIFACTS_DIR} -cf - cmake-build-reldeb/src/infinity | tar -xf -

      - name: Start test container
        if: ${{ !cancelled() && !failure() }}
        run: |
          TEST_CONTAINER_NAME=infinity_test_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "TEST_CONTAINER_NAME=${TEST_CONTAINER_NAME}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${TEST_CONTAINER_NAME} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Install pysdk
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${TEST_CONTAINER_NAME} bash -c "rm -rf /root/.config/pip/pip.conf && cd /infinity/ && pip3 uninstall -y infinity-sdk && pip3 install python/infinity_sdk -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host tuna.tsinghua.edu.cn"

      - name: Start infinity reldeb version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec -d ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && cmake-build-reldeb/src/infinity --config=conf/pytest_parallel_infinity_conf.toml > reldeb_pysdk_stdout.log 2> reldeb_pysdk_stderr.log"

      - name: Run pysdk remote infinity test reldeb version
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && python3 tools/run_pysdk_remote_infinity_test.py"
          sleep 1s

      - name: Collect infinity log
        if: ${{ !cancelled() }}
        run: |
          mkdir -p ${ARTIFACTS_DIR}/reldeb_pysdk_test && cp reldeb_pysdk*.log ${ARTIFACTS_DIR}/reldeb_pysdk_test/
          sudo docker cp ${TEST_CONTAINER_NAME}:/var/infinity/log/infinity.log ${ARTIFACTS_DIR}/reldeb_pysdk_test/
          echo 'reldeb pysdk log' && tail -n 1000 reldeb_pysdk*.log

      - name: Remove test container
        if: always()
        run: sudo docker rm -f -v ${TEST_CONTAINER_NAME}

  reldeb_http_test:
    name: reldeb_http_test
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    needs: reldeb_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar -C ${ARTIFACTS_DIR} -cf - cmake-build-reldeb/src/infinity | tar -xf -

      - name: Start test container
        if: ${{ !cancelled() && !failure() }}
        run: |
          TEST_CONTAINER_NAME=infinity_test_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "TEST_CONTAINER_NAME=${TEST_CONTAINER_NAME}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${TEST_CONTAINER_NAME} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Install pysdk
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${TEST_CONTAINER_NAME} bash -c "rm -rf /root/.config/pip/pip.conf && cd /infinity/ && pip3 uninstall -y infinity-sdk && pip3 install python/infinity_sdk -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host tuna.tsinghua.edu.cn"

      - name: Start infinity reldeb version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec -d ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && cmake-build-reldeb/src/infinity --config=conf/pytest_parallel_infinity_conf.toml > reldeb_http_stdout.log 2> reldeb_http_stderr.log"

      - name: Run http api test reldeb version
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && python3 tools/run_http_api.py"
          sleep 1s

      - name: Collect infinity log
        if: ${{ !cancelled() }}
        run: |
          mkdir -p ${ARTIFACTS_DIR}/reldeb_http_test && cp reldeb_http*.log ${ARTIFACTS_DIR}/reldeb_http_test/
          sudo docker cp ${TEST_CONTAINER_NAME}:/var/infinity/log/infinity.log ${ARTIFACTS_DIR}/reldeb_http_test/
          echo 'reldeb http log' && tail -n 1000 reldeb_http*.log

      - name: Remove test container
        if: always()
        run: sudo docker rm -f -v ${TEST_CONTAINER_NAME}

  reldeb_pysdk_parallel_test:
    name: reldeb_pysdk_parallel_test
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    needs: reldeb_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar -C ${ARTIFACTS_DIR} -cf - cmake-build-reldeb/src/infinity | tar -xf -

      - name: Start test container
        if: ${{ !cancelled() && !failure() }}
        run: |
          TEST_CONTAINER_NAME=infinity_test_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "TEST_CONTAINER_NAME=${TEST_CONTAINER_NAME}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${TEST_CONTAINER_NAME} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Install pysdk
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${TEST_CONTAINER_NAME} bash -c "rm -rf /root/.config/pip/pip.conf && cd /infinity/ && pip3 uninstall -y infinity-sdk && pip3 install python/infinity_sdk -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host tuna.tsinghua.edu.cn"

      - name: Start infinity reldeb version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec -d ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && cmake-build-reldeb/src/infinity --config=conf/pytest_parallel_infinity_conf.toml > reldeb_pysdk_parallel_stdout.log 2> reldeb_pysdk_parallel_stderr.log"

      - name: Run parallel test reldeb version
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && python3 tools/run_parallel_test.py"
          sleep 1s

      - name: Collect infinity log
        if: ${{ !cancelled() }}
        run: |
          mkdir -p ${ARTIFACTS_DIR}/reldeb_pysdk_parallel_test && cp reldeb_pysdk_parallel*.log ${ARTIFACTS_DIR}/reldeb_pysdk_parallel_test/
          sudo docker cp ${TEST_CONTAINER_NAME}:/var/infinity/log/infinity.log ${ARTIFACTS_DIR}/reldeb_pysdk_parallel_test/
          echo 'reldeb parallel log' && tail -n 1000 reldeb_pysdk_parallel*.log

      - name: Remove test container
        if: always()
        run: sudo docker rm -f -v ${TEST_CONTAINER_NAME}

  reldeb_minio_pysdk_test:
    name: reldeb_minio_pysdk_test
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    needs: reldeb_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar -C ${ARTIFACTS_DIR} -cf - cmake-build-reldeb/src/infinity | tar -xf -

      - name: Start test container
        if: ${{ !cancelled() && !failure() }}
        run: |
          TEST_CONTAINER_NAME=infinity_test_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "TEST_CONTAINER_NAME=${TEST_CONTAINER_NAME}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${TEST_CONTAINER_NAME} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Install pysdk
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec ${TEST_CONTAINER_NAME} bash -c "rm -rf /root/.config/pip/pip.conf && cd /infinity/ && pip3 uninstall -y infinity-sdk && pip3 install python/infinity_sdk -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host tuna.tsinghua.edu.cn"

      - name: Start minio container
        if: ${{ !cancelled() && !failure() }}
        run: |
          MINIO_CONTAINER_NAME=minio_${TEST_CONTAINER_NAME}
          echo "MINIO_CONTAINER_NAME=${MINIO_CONTAINER_NAME}" >> $GITHUB_ENV
          rm -rf {MINIO_CONTAINER_NAME} && mkdir ${MINIO_CONTAINER_NAME}
          sudo docker run -d --net=container:${TEST_CONTAINER_NAME} --name ${MINIO_CONTAINER_NAME} -e "MINIO_ROOT_PASSWORD=minioadmin" -e "MINIO_ROOT_USER=minioadmin"  -v ${MINIO_CONTAINER_NAME}:/data quay.io/minio/minio server /data --console-address ":9006" --address ":9005"
          sleep 5s
          if ! sudo docker ps --filter "name=${MINIO_CONTAINER_NAME}" --filter "status=running" | grep -q ${MINIO_CONTAINER_NAME}; then
              echo "Minio container is not running"
              exit 1
          fi

      - name: Start infinity reldeb version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec -d ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && cmake-build-reldeb/src/infinity --config=conf/pytest_parallel_infinity_minio.toml > reldeb_minio_pysdk_stdout.log 2> reldeb_minio_pysdk_stderr.log"

      - name: Run minio pysdk infinity test reldeb version
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && python3 tools/run_pysdk_remote_infinity_test.py"
          sleep 1s

      - name: Collect infinity log
        if: ${{ !cancelled() }}
        run: |
          mkdir -p ${ARTIFACTS_DIR}/reldeb_minio_pysdk_test && cp reldeb_minio_pysdk*.log ${ARTIFACTS_DIR}/reldeb_minio_pysdk_test/
          sudo docker cp ${TEST_CONTAINER_NAME}:/var/infinity/log/infinity.log ${ARTIFACTS_DIR}/reldeb_minio_pysdk_test/
          echo 'reldeb minio pysdk log' && tail -n 1000 reldeb_minio_pysdk*.log

      - name: Remove test container
        if: always()
        run: |
          sudo docker rm -f -v ${MINIO_CONTAINER_NAME} ${TEST_CONTAINER_NAME}
          rm -rf ${MINIO_CONTAINER_NAME}

  reldeb_minio_parallel_test:
    name: reldeb_minio_parallel_test
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "infinity-test" ]
    needs: reldeb_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar -C ${ARTIFACTS_DIR} -cf - cmake-build-reldeb/src/infinity | tar -xf -

      - name: Start test container
        if: ${{ !cancelled() && !failure() }}
        run: |
          TEST_CONTAINER_NAME=infinity_test_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          echo "TEST_CONTAINER_NAME=${TEST_CONTAINER_NAME}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker run --privileged -d --name ${TEST_CONTAINER_NAME} -e TZ=$TZ -v $PWD:/infinity infiniflow/infinity_builder:ubuntu20_clang20

      - name: Install pysdk
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${TEST_CONTAINER_NAME} bash -c "rm -rf /root/.config/pip/pip.conf &&
            cd /infinity/ &&
            pip3 uninstall -y infinity-sdk &&
            pip3 install python/infinity_sdk -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host tuna.tsinghua.edu.cn"

      - name: Start minio container
        if: ${{ !cancelled() && !failure() }}
        run: |
          MINIO_CONTAINER_NAME=minio_${TEST_CONTAINER_NAME}
          echo "MINIO_CONTAINER_NAME=${MINIO_CONTAINER_NAME}" >> $GITHUB_ENV
          rm -rf $MINIO_CONTAINER_NAME && mkdir -p ${MINIO_CONTAINER_NAME}
          sudo docker run -d --net=container:${TEST_CONTAINER_NAME} --name ${MINIO_CONTAINER_NAME} -e "MINIO_ROOT_PASSWORD=minioadmin" -e "MINIO_ROOT_USER=minioadmin"  -v ${MINIO_CONTAINER_NAME}:/data quay.io/minio/minio server /data --console-address ":9006" --address ":9005"
          sleep 5s
          if ! sudo docker ps --filter "name=${MINIO_CONTAINER_NAME}" --filter "status=running" | grep -q ${MINIO_CONTAINER_NAME}; then
              echo "Minio container is not running"
              exit 1
          fi

      - name: Start infinity reldeb version
        if: ${{ !cancelled() && !failure() }}
        run: sudo docker exec -d ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && cmake-build-reldeb/src/infinity --config=conf/pytest_parallel_infinity_minio.toml > reldeb_minio_parallel_stdout.log 2> reldeb_minio_parallel_stderr.log"

      - name: Run minio parallel test
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${TEST_CONTAINER_NAME} bash -c "cd /infinity/ && python3 tools/run_parallel_test.py"
          sleep 1s

      - name: Collect infinity log
        if: ${{ !cancelled() }}
        run: |
          mkdir -p ${ARTIFACTS_DIR}/reldeb_minio_parallel_test && cp reldeb_minio_parallel*.log ${ARTIFACTS_DIR}/reldeb_minio_parallel_test/
          sudo docker cp ${TEST_CONTAINER_NAME}:/var/infinity/log/infinity.log ${ARTIFACTS_DIR}/reldeb_minio_parallel_test/
          echo 'reldeb minio parallel log' && tail -n 1000 reldeb_minio_parallel*.log

      - name: Remove test container
        if: always()
        run: |
          sudo docker rm -f -v ${MINIO_CONTAINER_NAME} ${TEST_CONTAINER_NAME}
          rm -rf ${MINIO_CONTAINER_NAME}

  reldeb_benchmark:
    name: reldeb_benchmark
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
    runs-on: [ "self-hosted", "benchmark" ]
    needs: reldeb_build
    steps:
      - name: Prepare code and artifacts
        if: ${{ !cancelled() && !failure() }}
        run: |
          echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE
          ARTIFACTS_DIR=${RUNNER_WORKSPACE_PREFIX}/artifacts/${GITHUB_RUN_ID}
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_ENV
          tar xzf ${ARTIFACTS_DIR}/infinity.tgz && git reset --hard && git clean -ffdx
          tar -C ${ARTIFACTS_DIR} -cf - cmake-build-reldeb/benchmark/local_infinity/{knn_import_benchmark,knn_query_benchmark} | tar -xf -

      - name: Prepare sift dataset
        if: ${{ !cancelled() && !failure() }}
        run: |
          RUNNER_WORKSPACE_PREFIX=${RUNNER_WORKSPACE_PREFIX:-$HOME}
          echo "RUNNER_WORKSPACE_PREFIX=${RUNNER_WORKSPACE_PREFIX}" >> $GITHUB_ENV
          chmod +x ./tools/ci_tools/check_benchmark_result.py
          rm -rf test/data/benchmark && ln -s ${RUNNER_WORKSPACE_PREFIX}/benchmark test/data/benchmark

      - name: Golden benchmark sift
        if: ${{ !cancelled() && !failure() }}
        run: |
          if [[ -f "${RUNNER_WORKSPACE_PREFIX}/benchmark/golden_benchmark_sift_1_thread.log" ]]; then
              echo "golden benchmark result already exists!"
              exit 0
          fi
          rm -rf $PWD/db_tmp && mkdir -p $PWD/db_tmp && cat ${RUNNER_WORKSPACE_PREFIX}/benchmark/infinity_conf.toml | sed -e "s|/var/infinity|$PWD/db_tmp|g" > $PWD/db_tmp/infinity_conf.toml
          ${RUNNER_WORKSPACE_PREFIX}/benchmark/knn_import_benchmark --dataset=sift --dataset_dir=$PWD/test/data --infinity_dir=$PWD/db_tmp
          echo "1 50" | ${RUNNER_WORKSPACE_PREFIX}/benchmark/knn_query_benchmark sift 200 false $PWD/test/data $PWD/db_tmp | sudo tee ${RUNNER_WORKSPACE_PREFIX}/benchmark/golden_benchmark_sift_1_thread.log
          echo "8 50" | ${RUNNER_WORKSPACE_PREFIX}/benchmark/knn_query_benchmark sift 200 false $PWD/test/data $PWD/db_tmp | sudo tee ${RUNNER_WORKSPACE_PREFIX}/benchmark/golden_benchmark_sift_8_threads.log

      - name: Latest benchmark sift
        if: ${{ !cancelled() && !failure() }}
        run: |
          rm -rf $PWD/db_tmp && mkdir -p $PWD/db_tmp && cat conf/infinity_conf.toml | sed -e "s|/var/infinity|$PWD/db_tmp|g" > $PWD/db_tmp/infinity_conf.toml
          ./cmake-build-reldeb/benchmark/local_infinity/knn_import_benchmark --dataset=sift --dataset_dir=$PWD/test/data --infinity_dir=$PWD/db_tmp --config_path=db_tmp/infinity_conf.toml
          echo "1 50" | ./cmake-build-reldeb/benchmark/local_infinity/knn_query_benchmark sift 200 false $PWD/test/data $PWD/db_tmp db_tmp/infinity_conf.toml | tee benchmark_sift_1_thread.log
          echo "8 50" | ./cmake-build-reldeb/benchmark/local_infinity/knn_query_benchmark sift 200 false $PWD/test/data $PWD/db_tmp db_tmp/infinity_conf.toml | tee benchmark_sift_8_threads.log
          ./tools/ci_tools/check_benchmark_result.py ${RUNNER_WORKSPACE_PREFIX}/benchmark/golden_benchmark_sift_1_thread.log benchmark_sift_1_thread.log
          ./tools/ci_tools/check_benchmark_result.py ${RUNNER_WORKSPACE_PREFIX}/benchmark/golden_benchmark_sift_8_threads.log benchmark_sift_8_threads.log
