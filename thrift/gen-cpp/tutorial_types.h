/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tutorial_TYPES_H
#define tutorial_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "shared_types.h"


namespace tutorial {

/**
 * You can define enums, which are just 32 bit integers. Values are optional
 * and start at 1 if not supplied, C style again.
 */
struct Operation {
  enum type {
    ADD = 1,
    SUBTRACT = 2,
    MULTIPLY = 3,
    DIVIDE = 4
  };
};

extern const std::map<int, const char*> _Operation_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Operation::type& val);

std::string to_string(const Operation::type& val);

/**
 * Thrift lets you do typedefs to get pretty names for your types. Standard
 * C style here.
 */
typedef int32_t MyInteger;

class Work;

class InvalidOperation;

class Option;

class CreateDatabaseRequest;

class CommonResponse;

class CommonRequest;

typedef struct _Work__isset {
  _Work__isset() : num1(true), num2(false), op(false), comment(false) {}
  bool num1 :1;
  bool num2 :1;
  bool op :1;
  bool comment :1;
} _Work__isset;

/**
 * Structs are the basic complex data structures. They are comprised of fields
 * which each have an integer identifier, a type, a symbolic name, and an
 * optional default value.
 * 
 * Fields can be declared "optional", which ensures they will not be included
 * in the serialized output if they aren't set.  Note that this requires some
 * manual management in some languages.
 */
class Work : public virtual ::apache::thrift::TBase {
 public:

  Work(const Work&);
  Work& operator=(const Work&);
  Work() noexcept
       : num1(0),
         num2(0),
         op(static_cast<Operation::type>(0)),
         comment() {
  }

  virtual ~Work() noexcept;
  int32_t num1;
  int32_t num2;
  /**
   * 
   * @see Operation
   */
  Operation::type op;
  std::string comment;

  _Work__isset __isset;

  void __set_num1(const int32_t val);

  void __set_num2(const int32_t val);

  void __set_op(const Operation::type val);

  void __set_comment(const std::string& val);

  bool operator == (const Work & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    if (!(op == rhs.op))
      return false;
    if (__isset.comment != rhs.__isset.comment)
      return false;
    else if (__isset.comment && !(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const Work &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Work & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Work &a, Work &b);

std::ostream& operator<<(std::ostream& out, const Work& obj);

typedef struct _InvalidOperation__isset {
  _InvalidOperation__isset() : whatOp(false), why(false) {}
  bool whatOp :1;
  bool why :1;
} _InvalidOperation__isset;

/**
 * Structs can also be exceptions, if they are nasty.
 */
class InvalidOperation : public ::apache::thrift::TException {
 public:

  InvalidOperation(const InvalidOperation&);
  InvalidOperation& operator=(const InvalidOperation&);
  InvalidOperation() noexcept
                   : whatOp(0),
                     why() {
  }

  virtual ~InvalidOperation() noexcept;
  int32_t whatOp;
  std::string why;

  _InvalidOperation__isset __isset;

  void __set_whatOp(const int32_t val);

  void __set_why(const std::string& val);

  bool operator == (const InvalidOperation & rhs) const
  {
    if (!(whatOp == rhs.whatOp))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const InvalidOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(InvalidOperation &a, InvalidOperation &b);

std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj);


/**
 * That just about covers the basics. Take a look in the test/ folder for more
 * detailed examples. After you run this file, your generated code shows up
 * in folders with names gen-<language>. The generated code isn't too scary
 * to look at. It even has pretty indentation.
 */
class Option : public virtual ::apache::thrift::TBase {
 public:

  Option(const Option&) noexcept;
  Option& operator=(const Option&) noexcept;
  Option() noexcept {
  }

  virtual ~Option() noexcept;

  bool operator == (const Option & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Option &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Option & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Option &a, Option &b);

std::ostream& operator<<(std::ostream& out, const Option& obj);

typedef struct _CreateDatabaseRequest__isset {
  _CreateDatabaseRequest__isset() : db_name(false), session_id(false), option(false) {}
  bool db_name :1;
  bool session_id :1;
  bool option :1;
} _CreateDatabaseRequest__isset;

class CreateDatabaseRequest : public virtual ::apache::thrift::TBase {
 public:

  CreateDatabaseRequest(const CreateDatabaseRequest&);
  CreateDatabaseRequest& operator=(const CreateDatabaseRequest&);
  CreateDatabaseRequest() noexcept
                        : db_name(),
                          session_id(0) {
  }

  virtual ~CreateDatabaseRequest() noexcept;
  std::string db_name;
  int64_t session_id;
  Option option;

  _CreateDatabaseRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_session_id(const int64_t val);

  void __set_option(const Option& val);

  bool operator == (const CreateDatabaseRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    if (!(option == rhs.option))
      return false;
    return true;
  }
  bool operator != (const CreateDatabaseRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateDatabaseRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateDatabaseRequest &a, CreateDatabaseRequest &b);

std::ostream& operator<<(std::ostream& out, const CreateDatabaseRequest& obj);

typedef struct _CommonResponse__isset {
  _CommonResponse__isset() : success(false), error_msg(false), session_id(false) {}
  bool success :1;
  bool error_msg :1;
  bool session_id :1;
} _CommonResponse__isset;

class CommonResponse : public virtual ::apache::thrift::TBase {
 public:

  CommonResponse(const CommonResponse&);
  CommonResponse& operator=(const CommonResponse&);
  CommonResponse() noexcept
                 : success(0),
                   error_msg(),
                   session_id(0) {
  }

  virtual ~CommonResponse() noexcept;
  bool success;
  std::string error_msg;
  int64_t session_id;

  _CommonResponse__isset __isset;

  void __set_success(const bool val);

  void __set_error_msg(const std::string& val);

  void __set_session_id(const int64_t val);

  bool operator == (const CommonResponse & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error_msg == rhs.error_msg))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const CommonResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CommonResponse &a, CommonResponse &b);

std::ostream& operator<<(std::ostream& out, const CommonResponse& obj);

typedef struct _CommonRequest__isset {
  _CommonRequest__isset() : session_id(false) {}
  bool session_id :1;
} _CommonRequest__isset;

class CommonRequest : public virtual ::apache::thrift::TBase {
 public:

  CommonRequest(const CommonRequest&) noexcept;
  CommonRequest& operator=(const CommonRequest&) noexcept;
  CommonRequest() noexcept
                : session_id(0) {
  }

  virtual ~CommonRequest() noexcept;
  int64_t session_id;

  _CommonRequest__isset __isset;

  void __set_session_id(const int64_t val);

  bool operator == (const CommonRequest & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const CommonRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CommonRequest &a, CommonRequest &b);

std::ostream& operator<<(std::ostream& out, const CommonRequest& obj);

} // namespace

#endif
