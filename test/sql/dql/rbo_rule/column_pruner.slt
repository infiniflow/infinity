statement ok
DROP TABLE IF EXISTS t1;

statement ok
CREATE TABLE t1 (c1 INTEGER PRIMARY KEY, c2 INTEGER, c3 INTEGER, c4 INTEGER);

statement ok
DROP TABLE IF EXISTS t2;

statement ok
CREATE TABLE t2 (c1 INTEGER PRIMARY KEY, c2 INTEGER, c3 INTEGER, c4 INTEGER);

query I
EXPLAIN LOGICAL SELECT * FROM t1;
----
PROJECT (3)
 - table index: #4
 - expressions: [c1 (#0), c2 (#1), c3 (#2), c4 (#3)]
-> TABLE SCAN (2)
   - table name: t1(default.t1)
   - table index: #1
   - output columns: [c1, c2, c3, c4, __rowid]

query I
EXPLAIN LOGICAL SELECT c2 FROM t1;
----
PROJECT (3)
 - table index: #4
 - expressions: [c2 (#0)]
-> TABLE SCAN (2)
   - table name: t1(default.t1)
   - table index: #1
   - output columns: [c2, __rowid]

query I
EXPLAIN LOGICAL SELECT c1 + 1 FROM t1;
----
 PROJECT (3)
  - table index: #4
  - expressions: [CAST(c1 (#0) AS BigInt) + 1]
 -> TABLE SCAN (2)
    - table name: t1(default.t1)
    - table index: #1
    - output columns: [c1, __rowid]

query I
EXPLAIN LOGICAL SELECT c1 + c2 FROM t1;
----
 PROJECT (3)
  - table index: #4
  - expressions: [c1 (#0) + c2 (#1)]
 -> TABLE SCAN (2)
    - table name: t1(default.t1)
    - table index: #1
    - output columns: [c1, c2, __rowid]

query I
EXPLAIN LOGICAL SELECT c1 + c2 FROM t1 where c4 > 1;
----
PROJECT (4)
 - table index: #4
 - expressions: [c1 (#0) + c2 (#1)]
-> FILTER (3)
   - filter: CAST(c4 (#0) AS BigInt) > 1
   - output columns: [c4, __rowid]
  -> TABLE SCAN (2)
     - table name: t1(default.t1)
     - table index: #1
     - output columns: [c4, __rowid]

query I
EXPLAIN LOGICAL SELECT t1.c1, t2.c2 FROM t1 INNER JOIN t2 ON t1.c1 = t2.c2;
----
PROJECT (5)
 - table index: #5
 - expressions: [c1 (#1), c2 (#0)]
-> INNER JOIN(4)
   - filters: [c1 (#1) = c2 (#0)
   - output columns: [c1, __rowid, c2, __rowid]
  -> TABLE SCAN (2)
     - table name: t1(default.t1)
     - table index: #1
     - output columns: [c1, __rowid]
  -> TABLE SCAN (3)
     - table name: t2(default.t2)
     - table index: #2
     - output columns: [c2, __rowid]

query I
EXPLAIN LOGICAL SELECT t1.c1, t2.c2 FROM t1 LEFT JOIN t2 ON t1.c1 = t2.c2 where t1.c4 > 1;
----
PROJECT (6)
 - table index: #5
 - expressions: [c1 (#0), c2 (#1)]
-> FILTER (5)
   - filter: CAST(c4 (#2) AS BigInt) > 1
   - output columns: [c1, __rowid, c2, __rowid]
  -> LEFT JOIN(4)
     - filters: [c1 (#1) = c2 (#0)
     - output columns: [c1, __rowid, c2, __rowid]
    -> TABLE SCAN (2)
       - table name: t1(default.t1)
       - table index: #1
       - output columns: [c1, __rowid]
    -> TABLE SCAN (3)
       - table name: t2(default.t2)
       - table index: #2
       - output columns: [c2, __rowid]

query I
EXPLAIN LOGICAL SELECT MIN(c1 + 1), AVG(c2) FROM t1;
----
 PROJECT (4)
  - table index: #4
  - expressions: [min((c1 + 1)) (#0), sum(c2) (#1) / count(c2) (#2)]
 -> AGGREGATE (3)
    - aggregate table index: #3
    - aggregate: [MIN(CAST(c1 (#0) AS BigInt) + 1), SUM(c2 (#1)), COUNT(c2 (#1))]
   -> TABLE SCAN (2)
      - table name: t1(default.t1)
      - table index: #1
      - output columns: [c1, c2, __rowid]


query I
EXPLAIN LOGICAL SELECT Min(c1 + 1), AVG(c2) FROM t1 GROUP BY c1;
----
 PROJECT (4)
  - table index: #4
  - expressions: [min((c1 + 1)) (#1), sum(c2) (#2) / count(c2) (#3)]
 -> AGGREGATE (3)
    - aggregate table index: #3
    - aggregate: [MIN(CAST(c1 (#0) AS BigInt) + 1), SUM(c2 (#1)), COUNT(c2 (#1))]
    - group by table index: #2
    - group by: [c1 (#0)]
   -> TABLE SCAN (2)
      - table name: t1(default.t1)
      - table index: #1
      - output columns: [c1, c2, __rowid]


query I
EXPLAIN LOGICAL DELETE FROM t1 WHERE c1=1;
----
DELETE FROM default.t1
-> FILTER (4)
   - filter: CAST(c1 (#0) AS BigInt) = 1
   - output columns: [c1, __rowid]
  -> TABLE SCAN (2)
     - table name: t1(default.t1)
     - table index: #1
     - output columns: [c1, __rowid]

statement ok
DROP TABLE t1;

statement ok
DROP TABLE t2;