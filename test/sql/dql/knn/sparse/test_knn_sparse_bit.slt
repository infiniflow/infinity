statement ok
DROP TABLE IF EXISTS test_knn_sparse_bit;

statement ok
CREATE TABLE test_knn_sparse_bit(c1 INT, c2 SPARSE(BIT, 100));

# copy to create one block
# the csv has 4 rows, the ip distance to target([20,30,40,60]) is:
# 1. 4
# 2. 3
# 3. 2
# 4. 1
# 5. 0
statement ok
COPY test_knn_sparse_bit FROM '/var/infinity/test_data/sparse_knn_bit.csv' WITH (DELIMITER ',', FORMAT CSV);

# mertic ip will order descendingly. The query will return row 1, 2, 3
query I
SELECT c1 FROM test_knn_sparse_bit SEARCH MATCH SPARSE (c2, [20,30,40,60], 'ip', 3);
----
1
2
3

# empty sparse vec denotes all zero
query I
SELECT SIMILARITY() FROM test_knn_sparse_bit SEARCH MATCH SPARSE (c2, [], 'ip', 3);
----
0
0
0

query I
SELECT c2 FROM test_knn_sparse_bit SEARCH MATCH SPARSE (c2, [20,30,40,60], 'ip', 3);
----
[0,10,20,30,40,50,60,70,80,90]
[0,20,40,60,80]
[0,30,60,90]

query II
SELECT c1, ROW_ID(), SIMILARITY() FROM test_knn_sparse_bit SEARCH MATCH SPARSE (c2, [20,30,40,60], 'ip', 5);
----
1 0 4
2 1 3
3 2 2
4 3 1
5 4 0

statement error
SELECT c1, ROW_ID(), DISTANCE() FROM test_knn_sparse_bit SEARCH MATCH SPARSE (c2, [20,30,40,60], 'ip', 3);

# copy to create another new block
# there will has 2 knn_scan operator to scan the blocks, and one merge_knn to merge
statement ok
COPY test_knn_sparse_bit FROM '/var/infinity/test_data/sparse_knn_bit.csv' WITH (DELIMITER ',', FORMAT CSV);

# the query will return block 1 row 1, block 2 row 1 and a row 2
query I
SELECT c1 FROM test_knn_sparse_bit SEARCH MATCH SPARSE (c2, [20,30,40,60], 'ip', 3);
----
1
1
2

# copy to create another new block
statement ok
COPY test_knn_sparse_bit FROM '/var/infinity/test_data/sparse_knn_bit.csv' WITH (DELIMITER ',', FORMAT CSV);

# the query will return row 1 from block 1, 2 and 3
query I
SELECT c1 FROM test_knn_sparse_bit SEARCH MATCH SPARSE (c2, [20,30,40,60], 'ip', 3);
----
1
1
1

statement ok
DROP TABLE test_knn_sparse_bit;