statement ok
DROP TABLE IF EXISTS test_knn_sparse;

statement ok
CREATE TABLE test_knn_sparse(c1 INT, c2 SPARSE(FLOAT, 100));

# copy to create one block
# the csv has 4 rows, the ip distance to target([0:1.0,20:2.0,80:3.0]) is:
# 1. 1.0*1.0 + 1.0*2.0 + 1.0*3.0 = 6.0
# 2. 2.0*1.0 + 2.0*2.0 + 2.0*3.0 = 12.0
# 3. 3.0*1.0 = 3.0
# 4. 4.0*1.0 + 4.0*3.0 = 16.0
# 5. 0
statement ok
COPY test_knn_sparse FROM '/var/infinity/test_data/sparse_knn.csv' WITH (DELIMITER ',', FORMAT CSV);

# mertic ip will order descendingly. The query will return row 4, 2, 1
query I
SELECT c1 FROM test_knn_sparse SEARCH MATCH SPARSE (c2, [0:1.0,20:2.0,80:3.0], 'ip', 3);
----
4
2
1

query I
SELECT c1 FROM test_knn_sparse SEARCH MATCH SPARSE (c2, [80:3.0,20:2.0,0:1.0], 'ip', 3);
----
4
2
1

query I
SELECT c1 FROM test_knn_sparse SEARCH MATCH SPARSE (c2, [0:1.0,20:2.0,80:3.0], 'ip', 6);
----
4
2
1
3
5

query I
SELECT c1 FROM test_knn_sparse SEARCH MATCH SPARSE (c2, [0:1.0,20:2.0,80:3.0], 'ip', 10);
----
4
2
1
3
5

query I
SELECT c1 FROM test_knn_sparse SEARCH MATCH SPARSE (c2, [0:1.0,20:2.0,80:3.0], 'ip', 3) where c1 < 4;
----
2
1
3

query I
SELECT c1 FROM test_knn_sparse SEARCH MATCH SPARSE (c2, [0:1.0,20:2.0,80:3.0], 'ip', 3) where c1 < 3;
----
2
1

# empty sparse vec denotes all zero
query I
SELECT SIMILARITY() FROM test_knn_sparse SEARCH MATCH SPARSE (c2, [], 'ip', 3);
----
0.000000
0.000000
0.000000

query I
SELECT c2 FROM test_knn_sparse SEARCH MATCH SPARSE (c2, [0:1.0,20:2.0,80:3.0], 'ip', 3);
----
[0:4.000000,40:4.000000,80:4.000000]
[0:2.000000,20:2.000000,40:2.000000,60:2.000000,80:2.000000]
[0:1.000000,10:1.000000,20:1.000000,30:1.000000,40:1.000000,50:1.000000,60:1.000000,70:1.000000,80:1.000000,90:1.000000]

query II
SELECT c1, ROW_ID(), SIMILARITY() FROM test_knn_sparse SEARCH MATCH SPARSE (c2, [0:1.0,20:2.0,80:3.0], 'ip', 5);
----
4 3 16.000000
2 1 12.000000
1 0 6.000000
3 2 3.000000
5 4 0.000000

statement error
SELECT c1, ROW_ID(), DISTANCE() FROM test_knn_sparse SEARCH MATCH SPARSE (c2, [0:1.0,20:2.0,80:3.0], 'ip', 3);

# copy to create another new block
# there will has 2 knn_scan operator to scan the blocks, and one merge_knn to merge
statement ok
COPY test_knn_sparse FROM '/var/infinity/test_data/sparse_knn.csv' WITH (DELIMITER ',', FORMAT CSV);

# the query will return block 1 row 4, block 2 row 4 and a row 3
query I
SELECT c1 FROM test_knn_sparse SEARCH MATCH SPARSE (c2, [0:1.0,20:2.0,80:3.0], 'ip', 3);
----
4
4
2

# copy to create another new block
statement ok
COPY test_knn_sparse FROM '/var/infinity/test_data/sparse_knn.csv' WITH (DELIMITER ',', FORMAT CSV);

# the query will return row 4 from block 1, 2 and 3
query I
SELECT c1 FROM test_knn_sparse SEARCH MATCH SPARSE (c2, [0:1.0,20:2.0,80:3.0], 'ip', 3);
----
4
4
4

statement ok
DROP TABLE test_knn_sparse;