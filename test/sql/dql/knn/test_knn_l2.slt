statement ok
DROP TABLE IF EXISTS test_knn_l2;

statement ok
CREATE TABLE test_knn_l2(c1 INT, c2 EMBEDDING(FLOAT, 4));

# copy to create one block
# the csv has 4 rows, the l2 distance to target([0.3, 0.3, 0.2, 0.2]) is:
# 1. 0.2^2 + 0.1^2 + 0.1^2 + 0.2^2 = 0.1
# 2. 0.1^2 + 0.2^2 + 0.1^2 + 0.2^2 = 0.1
# 3. 0 + 0.1^2 + 0.1^2 + 0.2^2 = 0.06
# 4. 0.1^2 + 0 + 0 + 0.1^2 = 0.02
statement ok
COPY test_knn_l2 FROM '/tmp/infinity/test_data/embedding_float_dim4.csv' WITH (DELIMITER ',');

# mertic l2 will order ascendingly. The query will return row 4, 3, 1
query I
SELECT c1 FROM test_knn_l2 ORDER BY KNN(c2, [0.3, 0.3, 0.2, 0.2], 'float', 'l2') LIMIT 3;
----
8
6
2

# copy to create another new block
# there will has 2 knn_scan operator to scan the blocks, and one merge_knn to merge
statement ok
COPY test_knn_l2 FROM '/tmp/infinity/test_data/embedding_float_dim4.csv' WITH (DELIMITER ',');

# the query will return block 1 row 4, block 2 row 4 and a row 3
query I
SELECT c1 FROM test_knn_l2 ORDER BY KNN(c2, [0.3, 0.3, 0.2, 0.2], 'float', 'l2') LIMIT 3;
----
8
8
6

# copy to create another new block
statement ok
COPY test_knn_l2 FROM '/tmp/infinity/test_data/embedding_float_dim4.csv' WITH (DELIMITER ',');

# the query will return row 4 from block 1, 2 and 3
query I
SELECT c1 FROM test_knn_l2 ORDER BY KNN(c2, [0.3, 0.3, 0.2, 0.2], 'float', 'l2') LIMIT 3;
----
8
8
8