// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: infinity_grpc.proto

#include "infinity_grpc.pb.h"
#include "infinity_grpc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace infinity_grpc_proto {

static const char* InfinityGrpcService_method_names[] = {
  "/infinity_grpc_proto.InfinityGrpcService/Connect",
  "/infinity_grpc_proto.InfinityGrpcService/DisConnect",
  "/infinity_grpc_proto.InfinityGrpcService/CreateDatabase",
  "/infinity_grpc_proto.InfinityGrpcService/DropDatabase",
  "/infinity_grpc_proto.InfinityGrpcService/ListDatabase",
  "/infinity_grpc_proto.InfinityGrpcService/DescribeDatabase",
  "/infinity_grpc_proto.InfinityGrpcService/GetDatabase",
  "/infinity_grpc_proto.InfinityGrpcService/CreateTable",
  "/infinity_grpc_proto.InfinityGrpcService/DropTable",
  "/infinity_grpc_proto.InfinityGrpcService/ListTable",
  "/infinity_grpc_proto.InfinityGrpcService/DescribeTable",
  "/infinity_grpc_proto.InfinityGrpcService/GetTable",
  "/infinity_grpc_proto.InfinityGrpcService/Insert",
  "/infinity_grpc_proto.InfinityGrpcService/Import",
  "/infinity_grpc_proto.InfinityGrpcService/CreateIndex",
  "/infinity_grpc_proto.InfinityGrpcService/DropIndex",
  "/infinity_grpc_proto.InfinityGrpcService/Search",
};

std::unique_ptr< InfinityGrpcService::Stub> InfinityGrpcService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InfinityGrpcService::Stub> stub(new InfinityGrpcService::Stub(channel, options));
  return stub;
}

InfinityGrpcService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Connect_(InfinityGrpcService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisConnect_(InfinityGrpcService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDatabase_(InfinityGrpcService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropDatabase_(InfinityGrpcService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDatabase_(InfinityGrpcService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DescribeDatabase_(InfinityGrpcService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDatabase_(InfinityGrpcService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTable_(InfinityGrpcService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropTable_(InfinityGrpcService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTable_(InfinityGrpcService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DescribeTable_(InfinityGrpcService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTable_(InfinityGrpcService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Insert_(InfinityGrpcService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Import_(InfinityGrpcService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateIndex_(InfinityGrpcService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropIndex_(InfinityGrpcService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Search_(InfinityGrpcService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InfinityGrpcService::Stub::Connect(::grpc::ClientContext* context, const ::infinity_grpc_proto::Empty& request, ::infinity_grpc_proto::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::Empty, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void InfinityGrpcService::Stub::async::Connect(::grpc::ClientContext* context, const ::infinity_grpc_proto::Empty* request, ::infinity_grpc_proto::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::Empty, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::Connect(::grpc::ClientContext* context, const ::infinity_grpc_proto::Empty* request, ::infinity_grpc_proto::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::CommonResponse, ::infinity_grpc_proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Connect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::DisConnect(::grpc::ClientContext* context, const ::infinity_grpc_proto::DisConnectRequest& request, ::infinity_grpc_proto::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::DisConnectRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DisConnect_, context, request, response);
}

void InfinityGrpcService::Stub::async::DisConnect(::grpc::ClientContext* context, const ::infinity_grpc_proto::DisConnectRequest* request, ::infinity_grpc_proto::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::DisConnectRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisConnect_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::DisConnect(::grpc::ClientContext* context, const ::infinity_grpc_proto::DisConnectRequest* request, ::infinity_grpc_proto::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DisConnect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::PrepareAsyncDisConnectRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::DisConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::CommonResponse, ::infinity_grpc_proto::DisConnectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DisConnect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::AsyncDisConnectRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::DisConnectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisConnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::CreateDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateDatabaseRequest& request, ::infinity_grpc_proto::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::CreateDatabaseRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDatabase_, context, request, response);
}

void InfinityGrpcService::Stub::async::CreateDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateDatabaseRequest* request, ::infinity_grpc_proto::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::CreateDatabaseRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDatabase_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::CreateDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateDatabaseRequest* request, ::infinity_grpc_proto::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDatabase_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::PrepareAsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::CommonResponse, ::infinity_grpc_proto::CreateDatabaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDatabase_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::AsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDatabaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::DropDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropDatabaseRequest& request, ::infinity_grpc_proto::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::DropDatabaseRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DropDatabase_, context, request, response);
}

void InfinityGrpcService::Stub::async::DropDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropDatabaseRequest* request, ::infinity_grpc_proto::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::DropDatabaseRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DropDatabase_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::DropDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropDatabaseRequest* request, ::infinity_grpc_proto::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DropDatabase_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::PrepareAsyncDropDatabaseRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::CommonResponse, ::infinity_grpc_proto::DropDatabaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DropDatabase_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::AsyncDropDatabaseRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDropDatabaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::ListDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::ListDatabaseRequest& request, ::infinity_grpc_proto::ListDatabaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::ListDatabaseRequest, ::infinity_grpc_proto::ListDatabaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListDatabase_, context, request, response);
}

void InfinityGrpcService::Stub::async::ListDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::ListDatabaseRequest* request, ::infinity_grpc_proto::ListDatabaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::ListDatabaseRequest, ::infinity_grpc_proto::ListDatabaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDatabase_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::ListDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::ListDatabaseRequest* request, ::infinity_grpc_proto::ListDatabaseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDatabase_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::ListDatabaseResponse>* InfinityGrpcService::Stub::PrepareAsyncListDatabaseRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::ListDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::ListDatabaseResponse, ::infinity_grpc_proto::ListDatabaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListDatabase_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::ListDatabaseResponse>* InfinityGrpcService::Stub::AsyncListDatabaseRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::ListDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListDatabaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::DescribeDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::DescribeDatabaseRequest& request, ::infinity_grpc_proto::DescribeDatabaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::DescribeDatabaseRequest, ::infinity_grpc_proto::DescribeDatabaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DescribeDatabase_, context, request, response);
}

void InfinityGrpcService::Stub::async::DescribeDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::DescribeDatabaseRequest* request, ::infinity_grpc_proto::DescribeDatabaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::DescribeDatabaseRequest, ::infinity_grpc_proto::DescribeDatabaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DescribeDatabase_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::DescribeDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::DescribeDatabaseRequest* request, ::infinity_grpc_proto::DescribeDatabaseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DescribeDatabase_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::DescribeDatabaseResponse>* InfinityGrpcService::Stub::PrepareAsyncDescribeDatabaseRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::DescribeDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::DescribeDatabaseResponse, ::infinity_grpc_proto::DescribeDatabaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DescribeDatabase_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::DescribeDatabaseResponse>* InfinityGrpcService::Stub::AsyncDescribeDatabaseRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::DescribeDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDescribeDatabaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::GetDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::GetDatabaseRequest& request, ::infinity_grpc_proto::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::GetDatabaseRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDatabase_, context, request, response);
}

void InfinityGrpcService::Stub::async::GetDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::GetDatabaseRequest* request, ::infinity_grpc_proto::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::GetDatabaseRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDatabase_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::GetDatabase(::grpc::ClientContext* context, const ::infinity_grpc_proto::GetDatabaseRequest* request, ::infinity_grpc_proto::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDatabase_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::PrepareAsyncGetDatabaseRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::GetDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::CommonResponse, ::infinity_grpc_proto::GetDatabaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDatabase_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::AsyncGetDatabaseRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::GetDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDatabaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::CreateTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateTableRequest& request, ::infinity_grpc_proto::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::CreateTableRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateTable_, context, request, response);
}

void InfinityGrpcService::Stub::async::CreateTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateTableRequest* request, ::infinity_grpc_proto::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::CreateTableRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::CreateTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateTableRequest* request, ::infinity_grpc_proto::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::CommonResponse, ::infinity_grpc_proto::CreateTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::AsyncCreateTableRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::DropTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropTableRequest& request, ::infinity_grpc_proto::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::DropTableRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DropTable_, context, request, response);
}

void InfinityGrpcService::Stub::async::DropTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropTableRequest* request, ::infinity_grpc_proto::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::DropTableRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DropTable_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::DropTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropTableRequest* request, ::infinity_grpc_proto::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DropTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::PrepareAsyncDropTableRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::CommonResponse, ::infinity_grpc_proto::DropTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DropTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::AsyncDropTableRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDropTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::ListTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::ListTableRequest& request, ::infinity_grpc_proto::ListTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::ListTableRequest, ::infinity_grpc_proto::ListTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListTable_, context, request, response);
}

void InfinityGrpcService::Stub::async::ListTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::ListTableRequest* request, ::infinity_grpc_proto::ListTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::ListTableRequest, ::infinity_grpc_proto::ListTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTable_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::ListTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::ListTableRequest* request, ::infinity_grpc_proto::ListTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::ListTableResponse>* InfinityGrpcService::Stub::PrepareAsyncListTableRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::ListTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::ListTableResponse, ::infinity_grpc_proto::ListTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::ListTableResponse>* InfinityGrpcService::Stub::AsyncListTableRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::ListTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::DescribeTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::DescribeTableRequest& request, ::infinity_grpc_proto::DescribeTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::DescribeTableRequest, ::infinity_grpc_proto::DescribeTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DescribeTable_, context, request, response);
}

void InfinityGrpcService::Stub::async::DescribeTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::DescribeTableRequest* request, ::infinity_grpc_proto::DescribeTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::DescribeTableRequest, ::infinity_grpc_proto::DescribeTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DescribeTable_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::DescribeTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::DescribeTableRequest* request, ::infinity_grpc_proto::DescribeTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DescribeTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::DescribeTableResponse>* InfinityGrpcService::Stub::PrepareAsyncDescribeTableRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::DescribeTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::DescribeTableResponse, ::infinity_grpc_proto::DescribeTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DescribeTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::DescribeTableResponse>* InfinityGrpcService::Stub::AsyncDescribeTableRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::DescribeTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDescribeTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::GetTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::GetTableRequest& request, ::infinity_grpc_proto::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::GetTableRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTable_, context, request, response);
}

void InfinityGrpcService::Stub::async::GetTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::GetTableRequest* request, ::infinity_grpc_proto::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::GetTableRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTable_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::GetTable(::grpc::ClientContext* context, const ::infinity_grpc_proto::GetTableRequest* request, ::infinity_grpc_proto::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::PrepareAsyncGetTableRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::CommonResponse, ::infinity_grpc_proto::GetTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::AsyncGetTableRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::GetTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::Insert(::grpc::ClientContext* context, const ::infinity_grpc_proto::InsertRequest& request, ::infinity_grpc_proto::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::InsertRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Insert_, context, request, response);
}

void InfinityGrpcService::Stub::async::Insert(::grpc::ClientContext* context, const ::infinity_grpc_proto::InsertRequest* request, ::infinity_grpc_proto::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::InsertRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::Insert(::grpc::ClientContext* context, const ::infinity_grpc_proto::InsertRequest* request, ::infinity_grpc_proto::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::InsertRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::CommonResponse, ::infinity_grpc_proto::InsertRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Insert_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::AsyncInsertRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::InsertRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::Import(::grpc::ClientContext* context, const ::infinity_grpc_proto::ImportRequest& request, ::infinity_grpc_proto::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::ImportRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Import_, context, request, response);
}

void InfinityGrpcService::Stub::async::Import(::grpc::ClientContext* context, const ::infinity_grpc_proto::ImportRequest* request, ::infinity_grpc_proto::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::ImportRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Import_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::Import(::grpc::ClientContext* context, const ::infinity_grpc_proto::ImportRequest* request, ::infinity_grpc_proto::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Import_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::PrepareAsyncImportRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::ImportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::CommonResponse, ::infinity_grpc_proto::ImportRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Import_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::AsyncImportRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::ImportRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncImportRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::CreateIndex(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateIndexRequest& request, ::infinity_grpc_proto::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::CreateIndexRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateIndex_, context, request, response);
}

void InfinityGrpcService::Stub::async::CreateIndex(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateIndexRequest* request, ::infinity_grpc_proto::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::CreateIndexRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::CreateIndex(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateIndexRequest* request, ::infinity_grpc_proto::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::PrepareAsyncCreateIndexRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::CommonResponse, ::infinity_grpc_proto::CreateIndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateIndex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::AsyncCreateIndexRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::DropIndex(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropIndexRequest& request, ::infinity_grpc_proto::CommonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::DropIndexRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DropIndex_, context, request, response);
}

void InfinityGrpcService::Stub::async::DropIndex(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropIndexRequest* request, ::infinity_grpc_proto::CommonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::DropIndexRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::DropIndex(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropIndexRequest* request, ::infinity_grpc_proto::CommonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DropIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::PrepareAsyncDropIndexRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::CommonResponse, ::infinity_grpc_proto::DropIndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DropIndex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::CommonResponse>* InfinityGrpcService::Stub::AsyncDropIndexRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::DropIndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDropIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InfinityGrpcService::Stub::Search(::grpc::ClientContext* context, const ::infinity_grpc_proto::SelectStatement& request, ::infinity_grpc_proto::SelectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::infinity_grpc_proto::SelectStatement, ::infinity_grpc_proto::SelectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Search_, context, request, response);
}

void InfinityGrpcService::Stub::async::Search(::grpc::ClientContext* context, const ::infinity_grpc_proto::SelectStatement* request, ::infinity_grpc_proto::SelectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::infinity_grpc_proto::SelectStatement, ::infinity_grpc_proto::SelectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

void InfinityGrpcService::Stub::async::Search(::grpc::ClientContext* context, const ::infinity_grpc_proto::SelectStatement* request, ::infinity_grpc_proto::SelectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::SelectResponse>* InfinityGrpcService::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::SelectStatement& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::infinity_grpc_proto::SelectResponse, ::infinity_grpc_proto::SelectStatement, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Search_, context, request);
}

::grpc::ClientAsyncResponseReader< ::infinity_grpc_proto::SelectResponse>* InfinityGrpcService::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::infinity_grpc_proto::SelectStatement& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchRaw(context, request, cq);
  result->StartCall();
  return result;
}

InfinityGrpcService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::Empty, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::Empty* req,
             ::infinity_grpc_proto::CommonResponse* resp) {
               return service->Connect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::DisConnectRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::DisConnectRequest* req,
             ::infinity_grpc_proto::CommonResponse* resp) {
               return service->DisConnect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::CreateDatabaseRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::CreateDatabaseRequest* req,
             ::infinity_grpc_proto::CommonResponse* resp) {
               return service->CreateDatabase(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::DropDatabaseRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::DropDatabaseRequest* req,
             ::infinity_grpc_proto::CommonResponse* resp) {
               return service->DropDatabase(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::ListDatabaseRequest, ::infinity_grpc_proto::ListDatabaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::ListDatabaseRequest* req,
             ::infinity_grpc_proto::ListDatabaseResponse* resp) {
               return service->ListDatabase(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::DescribeDatabaseRequest, ::infinity_grpc_proto::DescribeDatabaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::DescribeDatabaseRequest* req,
             ::infinity_grpc_proto::DescribeDatabaseResponse* resp) {
               return service->DescribeDatabase(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::GetDatabaseRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::GetDatabaseRequest* req,
             ::infinity_grpc_proto::CommonResponse* resp) {
               return service->GetDatabase(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::CreateTableRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::CreateTableRequest* req,
             ::infinity_grpc_proto::CommonResponse* resp) {
               return service->CreateTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::DropTableRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::DropTableRequest* req,
             ::infinity_grpc_proto::CommonResponse* resp) {
               return service->DropTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::ListTableRequest, ::infinity_grpc_proto::ListTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::ListTableRequest* req,
             ::infinity_grpc_proto::ListTableResponse* resp) {
               return service->ListTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::DescribeTableRequest, ::infinity_grpc_proto::DescribeTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::DescribeTableRequest* req,
             ::infinity_grpc_proto::DescribeTableResponse* resp) {
               return service->DescribeTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::GetTableRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::GetTableRequest* req,
             ::infinity_grpc_proto::CommonResponse* resp) {
               return service->GetTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::InsertRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::InsertRequest* req,
             ::infinity_grpc_proto::CommonResponse* resp) {
               return service->Insert(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::ImportRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::ImportRequest* req,
             ::infinity_grpc_proto::CommonResponse* resp) {
               return service->Import(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::CreateIndexRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::CreateIndexRequest* req,
             ::infinity_grpc_proto::CommonResponse* resp) {
               return service->CreateIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::DropIndexRequest, ::infinity_grpc_proto::CommonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::DropIndexRequest* req,
             ::infinity_grpc_proto::CommonResponse* resp) {
               return service->DropIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InfinityGrpcService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InfinityGrpcService::Service, ::infinity_grpc_proto::SelectStatement, ::infinity_grpc_proto::SelectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InfinityGrpcService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::infinity_grpc_proto::SelectStatement* req,
             ::infinity_grpc_proto::SelectResponse* resp) {
               return service->Search(ctx, req, resp);
             }, this)));
}

InfinityGrpcService::Service::~Service() {
}

::grpc::Status InfinityGrpcService::Service::Connect(::grpc::ServerContext* context, const ::infinity_grpc_proto::Empty* request, ::infinity_grpc_proto::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::DisConnect(::grpc::ServerContext* context, const ::infinity_grpc_proto::DisConnectRequest* request, ::infinity_grpc_proto::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::CreateDatabase(::grpc::ServerContext* context, const ::infinity_grpc_proto::CreateDatabaseRequest* request, ::infinity_grpc_proto::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::DropDatabase(::grpc::ServerContext* context, const ::infinity_grpc_proto::DropDatabaseRequest* request, ::infinity_grpc_proto::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::ListDatabase(::grpc::ServerContext* context, const ::infinity_grpc_proto::ListDatabaseRequest* request, ::infinity_grpc_proto::ListDatabaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::DescribeDatabase(::grpc::ServerContext* context, const ::infinity_grpc_proto::DescribeDatabaseRequest* request, ::infinity_grpc_proto::DescribeDatabaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::GetDatabase(::grpc::ServerContext* context, const ::infinity_grpc_proto::GetDatabaseRequest* request, ::infinity_grpc_proto::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::CreateTable(::grpc::ServerContext* context, const ::infinity_grpc_proto::CreateTableRequest* request, ::infinity_grpc_proto::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::DropTable(::grpc::ServerContext* context, const ::infinity_grpc_proto::DropTableRequest* request, ::infinity_grpc_proto::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::ListTable(::grpc::ServerContext* context, const ::infinity_grpc_proto::ListTableRequest* request, ::infinity_grpc_proto::ListTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::DescribeTable(::grpc::ServerContext* context, const ::infinity_grpc_proto::DescribeTableRequest* request, ::infinity_grpc_proto::DescribeTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::GetTable(::grpc::ServerContext* context, const ::infinity_grpc_proto::GetTableRequest* request, ::infinity_grpc_proto::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::Insert(::grpc::ServerContext* context, const ::infinity_grpc_proto::InsertRequest* request, ::infinity_grpc_proto::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::Import(::grpc::ServerContext* context, const ::infinity_grpc_proto::ImportRequest* request, ::infinity_grpc_proto::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::CreateIndex(::grpc::ServerContext* context, const ::infinity_grpc_proto::CreateIndexRequest* request, ::infinity_grpc_proto::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::DropIndex(::grpc::ServerContext* context, const ::infinity_grpc_proto::DropIndexRequest* request, ::infinity_grpc_proto::CommonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InfinityGrpcService::Service::Search(::grpc::ServerContext* context, const ::infinity_grpc_proto::SelectStatement* request, ::infinity_grpc_proto::SelectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace infinity_grpc_proto

