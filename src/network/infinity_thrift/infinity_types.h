/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef infinity_TYPES_H
#define infinity_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace infinity_thrift_rpc {

struct LogicType {
  enum type {
    Boolean = 0,
    TinyInt = 1,
    SmallInt = 2,
    Integer = 3,
    BigInt = 4,
    HugeInt = 5,
    Decimal = 6,
    Float = 7,
    Double = 8,
    Varchar = 9,
    Embedding = 10,
    Invalid = 11
  };
};

extern const std::map<int, const char*> _LogicType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const LogicType::type& val);

std::string to_string(const LogicType::type& val);

struct ElementType {
  enum type {
    ElementBit = 0,
    ElementInt8 = 1,
    ElementInt16 = 2,
    ElementInt32 = 3,
    ElementInt64 = 4,
    ElementFloat32 = 5,
    ElementFloat64 = 6
  };
};

extern const std::map<int, const char*> _ElementType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ElementType::type& val);

std::string to_string(const ElementType::type& val);

struct Constraint {
  enum type {
    PrimaryKey = 0,
    NotNull = 1,
    Null = 2,
    Unique = 3
  };
};

extern const std::map<int, const char*> _Constraint_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Constraint::type& val);

std::string to_string(const Constraint::type& val);

struct LiteralType {
  enum type {
    Boolean = 0,
    Double = 1,
    String = 2,
    Int64 = 3,
    Null = 4,
    IntegerArray = 5,
    DoubleArray = 6
  };
};

extern const std::map<int, const char*> _LiteralType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const LiteralType::type& val);

std::string to_string(const LiteralType::type& val);

struct KnnDistanceType {
  enum type {
    L2 = 0,
    Cosine = 1,
    InnerProduct = 2,
    Hamming = 3
  };
};

extern const std::map<int, const char*> _KnnDistanceType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const KnnDistanceType::type& val);

std::string to_string(const KnnDistanceType::type& val);

struct CopyFileType {
  enum type {
    CSV = 0,
    JSON = 1,
    FVECS = 2
  };
};

extern const std::map<int, const char*> _CopyFileType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const CopyFileType::type& val);

std::string to_string(const CopyFileType::type& val);

struct ColumnType {
  enum type {
    ColumnBool = 0,
    ColumnInt8 = 1,
    ColumnInt16 = 2,
    ColumnInt32 = 3,
    ColumnInt64 = 4,
    ColumnFloat32 = 5,
    ColumnFloat64 = 6,
    ColumnVarchar = 7,
    ColumnEmbedding = 8,
    ColumnInvalid = 9
  };
};

extern const std::map<int, const char*> _ColumnType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ColumnType::type& val);

std::string to_string(const ColumnType::type& val);

struct IndexType {
  enum type {
    IVFFlat = 0,
    HnswLVQ = 1,
    Hnsw = 2,
    IRSFullText = 3
  };
};

extern const std::map<int, const char*> _IndexType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const IndexType::type& val);

std::string to_string(const IndexType::type& val);

class Option;

class NumberType;

class VarcharType;

class EmbeddingType;

class PhysicalType;

class DataType;

class ColumnDef;

class ParsedExprType;

class ParsedExpr;

class ColumnExpr;

class KnnExpr;

class ConstantExpr;

class FunctionExpr;

class BetweenExpr;

class UpdateExpr;

class Field;

class ColumnField;

class ImportOption;

class CommonResponse;

class CommonRequest;

class ListDatabaseRequest;

class ListDatabaseResponse;

class ListTableRequest;

class ListTableResponse;

class DescribeDatabaseRequest;

class DescribeDatabaseResponse;

class DescribeTableRequest;

class DescribeTableResponse;

class GetTableRequest;

class InitParameter;

class IndexInfo;

class CreateIndexRequest;

class DropIndexRequest;

class GetDatabaseRequest;

class CreateDatabaseRequest;

class DropDatabaseRequest;

class CreateTableRequest;

class DropTableRequest;

class InsertRequest;

class ImportRequest;

class SelectRequest;

class SelectResponse;

class DeleteRequest;

class UpdateRequest;


class Option : public virtual ::apache::thrift::TBase {
 public:

  Option(const Option&) noexcept;
  Option& operator=(const Option&) noexcept;
  Option() noexcept {
  }

  virtual ~Option() noexcept;

  bool operator == (const Option & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Option &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Option & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Option &a, Option &b);

std::ostream& operator<<(std::ostream& out, const Option& obj);


class NumberType : public virtual ::apache::thrift::TBase {
 public:

  NumberType(const NumberType&) noexcept;
  NumberType& operator=(const NumberType&) noexcept;
  NumberType() noexcept {
  }

  virtual ~NumberType() noexcept;

  bool operator == (const NumberType & /* rhs */) const
  {
    return true;
  }
  bool operator != (const NumberType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NumberType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(NumberType &a, NumberType &b);

std::ostream& operator<<(std::ostream& out, const NumberType& obj);


class VarcharType : public virtual ::apache::thrift::TBase {
 public:

  VarcharType(const VarcharType&) noexcept;
  VarcharType& operator=(const VarcharType&) noexcept;
  VarcharType() noexcept {
  }

  virtual ~VarcharType() noexcept;

  bool operator == (const VarcharType & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VarcharType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VarcharType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(VarcharType &a, VarcharType &b);

std::ostream& operator<<(std::ostream& out, const VarcharType& obj);

typedef struct _EmbeddingType__isset {
  _EmbeddingType__isset() : dimension(false), element_type(false) {}
  bool dimension :1;
  bool element_type :1;
} _EmbeddingType__isset;

class EmbeddingType : public virtual ::apache::thrift::TBase {
 public:

  EmbeddingType(const EmbeddingType&) noexcept;
  EmbeddingType& operator=(const EmbeddingType&) noexcept;
  EmbeddingType() noexcept
                : dimension(0),
                  element_type(static_cast<ElementType::type>(0)) {
  }

  virtual ~EmbeddingType() noexcept;
  int32_t dimension;
  /**
   * 
   * @see ElementType
   */
  ElementType::type element_type;

  _EmbeddingType__isset __isset;

  void __set_dimension(const int32_t val);

  void __set_element_type(const ElementType::type val);

  bool operator == (const EmbeddingType & rhs) const
  {
    if (!(dimension == rhs.dimension))
      return false;
    if (!(element_type == rhs.element_type))
      return false;
    return true;
  }
  bool operator != (const EmbeddingType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmbeddingType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(EmbeddingType &a, EmbeddingType &b);

std::ostream& operator<<(std::ostream& out, const EmbeddingType& obj);

typedef struct _PhysicalType__isset {
  _PhysicalType__isset() : number_type(false), varchar_type(false), embedding_type(false) {}
  bool number_type :1;
  bool varchar_type :1;
  bool embedding_type :1;
} _PhysicalType__isset;

class PhysicalType : public virtual ::apache::thrift::TBase {
 public:

  PhysicalType(const PhysicalType&) noexcept;
  PhysicalType& operator=(const PhysicalType&) noexcept;
  PhysicalType() noexcept {
  }

  virtual ~PhysicalType() noexcept;
  NumberType number_type;
  VarcharType varchar_type;
  EmbeddingType embedding_type;

  _PhysicalType__isset __isset;

  void __set_number_type(const NumberType& val);

  void __set_varchar_type(const VarcharType& val);

  void __set_embedding_type(const EmbeddingType& val);

  bool operator == (const PhysicalType & rhs) const
  {
    if (__isset.number_type != rhs.__isset.number_type)
      return false;
    else if (__isset.number_type && !(number_type == rhs.number_type))
      return false;
    if (__isset.varchar_type != rhs.__isset.varchar_type)
      return false;
    else if (__isset.varchar_type && !(varchar_type == rhs.varchar_type))
      return false;
    if (__isset.embedding_type != rhs.__isset.embedding_type)
      return false;
    else if (__isset.embedding_type && !(embedding_type == rhs.embedding_type))
      return false;
    return true;
  }
  bool operator != (const PhysicalType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhysicalType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PhysicalType &a, PhysicalType &b);

std::ostream& operator<<(std::ostream& out, const PhysicalType& obj);

typedef struct _DataType__isset {
  _DataType__isset() : logic_type(false), physical_type(false) {}
  bool logic_type :1;
  bool physical_type :1;
} _DataType__isset;

class DataType : public virtual ::apache::thrift::TBase {
 public:

  DataType(const DataType&) noexcept;
  DataType& operator=(const DataType&) noexcept;
  DataType() noexcept
           : logic_type(static_cast<LogicType::type>(0)) {
  }

  virtual ~DataType() noexcept;
  /**
   * 
   * @see LogicType
   */
  LogicType::type logic_type;
  PhysicalType physical_type;

  _DataType__isset __isset;

  void __set_logic_type(const LogicType::type val);

  void __set_physical_type(const PhysicalType& val);

  bool operator == (const DataType & rhs) const
  {
    if (!(logic_type == rhs.logic_type))
      return false;
    if (!(physical_type == rhs.physical_type))
      return false;
    return true;
  }
  bool operator != (const DataType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DataType &a, DataType &b);

std::ostream& operator<<(std::ostream& out, const DataType& obj);

typedef struct _ColumnDef__isset {
  _ColumnDef__isset() : id(false), name(false), data_type(false), constraints(true) {}
  bool id :1;
  bool name :1;
  bool data_type :1;
  bool constraints :1;
} _ColumnDef__isset;

class ColumnDef : public virtual ::apache::thrift::TBase {
 public:

  ColumnDef(const ColumnDef&);
  ColumnDef& operator=(const ColumnDef&);
  ColumnDef() noexcept
            : id(0),
              name() {

  }

  virtual ~ColumnDef() noexcept;
  int32_t id;
  std::string name;
  DataType data_type;
  std::vector<Constraint::type>  constraints;

  _ColumnDef__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_data_type(const DataType& val);

  void __set_constraints(const std::vector<Constraint::type> & val);

  bool operator == (const ColumnDef & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(data_type == rhs.data_type))
      return false;
    if (!(constraints == rhs.constraints))
      return false;
    return true;
  }
  bool operator != (const ColumnDef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ColumnDef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ColumnDef &a, ColumnDef &b);

std::ostream& operator<<(std::ostream& out, const ColumnDef& obj);

typedef struct _ParsedExprType__isset {
  _ParsedExprType__isset() : constant_expr(false), column_expr(false), function_expr(false), knn_expr(false), between_expr(false) {}
  bool constant_expr :1;
  bool column_expr :1;
  bool function_expr :1;
  bool knn_expr :1;
  bool between_expr :1;
} _ParsedExprType__isset;

class ParsedExprType : public virtual ::apache::thrift::TBase {
 public:

  ParsedExprType(const ParsedExprType&);
  ParsedExprType& operator=(const ParsedExprType&);
  ParsedExprType() noexcept
                 : constant_expr(),
                   column_expr(),
                   function_expr(),
                   knn_expr(),
                   between_expr() {
  }

  virtual ~ParsedExprType() noexcept;
  ::std::shared_ptr<ConstantExpr> constant_expr;
  ::std::shared_ptr<ColumnExpr> column_expr;
  ::std::shared_ptr<FunctionExpr> function_expr;
  ::std::shared_ptr<KnnExpr> knn_expr;
  ::std::shared_ptr<BetweenExpr> between_expr;

  _ParsedExprType__isset __isset;

  void __set_constant_expr(::std::shared_ptr<ConstantExpr> val);

  void __set_column_expr(::std::shared_ptr<ColumnExpr> val);

  void __set_function_expr(::std::shared_ptr<FunctionExpr> val);

  void __set_knn_expr(::std::shared_ptr<KnnExpr> val);

  void __set_between_expr(::std::shared_ptr<BetweenExpr> val);

  bool operator == (const ParsedExprType & rhs) const
  {
    if (__isset.constant_expr != rhs.__isset.constant_expr)
      return false;
    else if (__isset.constant_expr && !(constant_expr == rhs.constant_expr))
      return false;
    if (__isset.column_expr != rhs.__isset.column_expr)
      return false;
    else if (__isset.column_expr && !(column_expr == rhs.column_expr))
      return false;
    if (__isset.function_expr != rhs.__isset.function_expr)
      return false;
    else if (__isset.function_expr && !(function_expr == rhs.function_expr))
      return false;
    if (__isset.knn_expr != rhs.__isset.knn_expr)
      return false;
    else if (__isset.knn_expr && !(knn_expr == rhs.knn_expr))
      return false;
    if (__isset.between_expr != rhs.__isset.between_expr)
      return false;
    else if (__isset.between_expr && !(between_expr == rhs.between_expr))
      return false;
    return true;
  }
  bool operator != (const ParsedExprType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParsedExprType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ParsedExprType &a, ParsedExprType &b);

std::ostream& operator<<(std::ostream& out, const ParsedExprType& obj);

typedef struct _ParsedExpr__isset {
  _ParsedExpr__isset() : type(false), alias_name(false) {}
  bool type :1;
  bool alias_name :1;
} _ParsedExpr__isset;

class ParsedExpr : public virtual ::apache::thrift::TBase {
 public:

  ParsedExpr(const ParsedExpr&);
  ParsedExpr& operator=(const ParsedExpr&);
  ParsedExpr() noexcept
             : alias_name() {
  }

  virtual ~ParsedExpr() noexcept;
  ParsedExprType type;
  std::string alias_name;

  _ParsedExpr__isset __isset;

  void __set_type(const ParsedExprType& val);

  void __set_alias_name(const std::string& val);

  bool operator == (const ParsedExpr & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(alias_name == rhs.alias_name))
      return false;
    return true;
  }
  bool operator != (const ParsedExpr &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParsedExpr & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ParsedExpr &a, ParsedExpr &b);

std::ostream& operator<<(std::ostream& out, const ParsedExpr& obj);

typedef struct _ColumnExpr__isset {
  _ColumnExpr__isset() : column_name(true), star(false) {}
  bool column_name :1;
  bool star :1;
} _ColumnExpr__isset;

class ColumnExpr : public virtual ::apache::thrift::TBase {
 public:

  ColumnExpr(const ColumnExpr&);
  ColumnExpr& operator=(const ColumnExpr&);
  ColumnExpr() noexcept
             : star(0) {

  }

  virtual ~ColumnExpr() noexcept;
  std::vector<std::string>  column_name;
  bool star;

  _ColumnExpr__isset __isset;

  void __set_column_name(const std::vector<std::string> & val);

  void __set_star(const bool val);

  bool operator == (const ColumnExpr & rhs) const
  {
    if (!(column_name == rhs.column_name))
      return false;
    if (!(star == rhs.star))
      return false;
    return true;
  }
  bool operator != (const ColumnExpr &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ColumnExpr & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ColumnExpr &a, ColumnExpr &b);

std::ostream& operator<<(std::ostream& out, const ColumnExpr& obj);

typedef struct _KnnExpr__isset {
  _KnnExpr__isset() : column_expr(false), embedding_data(false), dimension(false), distance_type(false), embedding_type(false) {}
  bool column_expr :1;
  bool embedding_data :1;
  bool dimension :1;
  bool distance_type :1;
  bool embedding_type :1;
} _KnnExpr__isset;

class KnnExpr : public virtual ::apache::thrift::TBase {
 public:

  KnnExpr(const KnnExpr&);
  KnnExpr& operator=(const KnnExpr&);
  KnnExpr() noexcept
          : dimension(0),
            distance_type(static_cast<KnnDistanceType::type>(0)) {
  }

  virtual ~KnnExpr() noexcept;
  ParsedExpr column_expr;
  std::vector<std::string>  embedding_data;
  int64_t dimension;
  /**
   * 
   * @see KnnDistanceType
   */
  KnnDistanceType::type distance_type;
  EmbeddingType embedding_type;

  _KnnExpr__isset __isset;

  void __set_column_expr(const ParsedExpr& val);

  void __set_embedding_data(const std::vector<std::string> & val);

  void __set_dimension(const int64_t val);

  void __set_distance_type(const KnnDistanceType::type val);

  void __set_embedding_type(const EmbeddingType& val);

  bool operator == (const KnnExpr & rhs) const
  {
    if (!(column_expr == rhs.column_expr))
      return false;
    if (!(embedding_data == rhs.embedding_data))
      return false;
    if (!(dimension == rhs.dimension))
      return false;
    if (!(distance_type == rhs.distance_type))
      return false;
    if (!(embedding_type == rhs.embedding_type))
      return false;
    return true;
  }
  bool operator != (const KnnExpr &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KnnExpr & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(KnnExpr &a, KnnExpr &b);

std::ostream& operator<<(std::ostream& out, const KnnExpr& obj);

typedef struct _ConstantExpr__isset {
  _ConstantExpr__isset() : literal_type(false), bool_value(false), i64_value(false), f64_value(false), str_value(false), i64_array_value(false), f64_array_value(false) {}
  bool literal_type :1;
  bool bool_value :1;
  bool i64_value :1;
  bool f64_value :1;
  bool str_value :1;
  bool i64_array_value :1;
  bool f64_array_value :1;
} _ConstantExpr__isset;

class ConstantExpr : public virtual ::apache::thrift::TBase {
 public:

  ConstantExpr(const ConstantExpr&);
  ConstantExpr& operator=(const ConstantExpr&);
  ConstantExpr() noexcept
               : literal_type(static_cast<LiteralType::type>(0)),
                 bool_value(0),
                 i64_value(0),
                 f64_value(0),
                 str_value() {
  }

  virtual ~ConstantExpr() noexcept;
  /**
   * 
   * @see LiteralType
   */
  LiteralType::type literal_type;
  bool bool_value;
  int64_t i64_value;
  double f64_value;
  std::string str_value;
  std::vector<int64_t>  i64_array_value;
  std::vector<double>  f64_array_value;

  _ConstantExpr__isset __isset;

  void __set_literal_type(const LiteralType::type val);

  void __set_bool_value(const bool val);

  void __set_i64_value(const int64_t val);

  void __set_f64_value(const double val);

  void __set_str_value(const std::string& val);

  void __set_i64_array_value(const std::vector<int64_t> & val);

  void __set_f64_array_value(const std::vector<double> & val);

  bool operator == (const ConstantExpr & rhs) const
  {
    if (!(literal_type == rhs.literal_type))
      return false;
    if (!(bool_value == rhs.bool_value))
      return false;
    if (!(i64_value == rhs.i64_value))
      return false;
    if (!(f64_value == rhs.f64_value))
      return false;
    if (!(str_value == rhs.str_value))
      return false;
    if (!(i64_array_value == rhs.i64_array_value))
      return false;
    if (!(f64_array_value == rhs.f64_array_value))
      return false;
    return true;
  }
  bool operator != (const ConstantExpr &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConstantExpr & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ConstantExpr &a, ConstantExpr &b);

std::ostream& operator<<(std::ostream& out, const ConstantExpr& obj);

typedef struct _FunctionExpr__isset {
  _FunctionExpr__isset() : function_name(false), arguments(false) {}
  bool function_name :1;
  bool arguments :1;
} _FunctionExpr__isset;

class FunctionExpr : public virtual ::apache::thrift::TBase {
 public:

  FunctionExpr(const FunctionExpr&);
  FunctionExpr& operator=(const FunctionExpr&);
  FunctionExpr() noexcept
               : function_name() {
  }

  virtual ~FunctionExpr() noexcept;
  std::string function_name;
  std::vector<ParsedExpr>  arguments;

  _FunctionExpr__isset __isset;

  void __set_function_name(const std::string& val);

  void __set_arguments(const std::vector<ParsedExpr> & val);

  bool operator == (const FunctionExpr & rhs) const
  {
    if (!(function_name == rhs.function_name))
      return false;
    if (!(arguments == rhs.arguments))
      return false;
    return true;
  }
  bool operator != (const FunctionExpr &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FunctionExpr & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(FunctionExpr &a, FunctionExpr &b);

std::ostream& operator<<(std::ostream& out, const FunctionExpr& obj);

typedef struct _BetweenExpr__isset {
  _BetweenExpr__isset() : value(false), upper_bound(false), lower_bound(false) {}
  bool value :1;
  bool upper_bound :1;
  bool lower_bound :1;
} _BetweenExpr__isset;

class BetweenExpr : public virtual ::apache::thrift::TBase {
 public:

  BetweenExpr(const BetweenExpr&);
  BetweenExpr& operator=(const BetweenExpr&);
  BetweenExpr() noexcept {
  }

  virtual ~BetweenExpr() noexcept;
  ParsedExpr value;
  ParsedExpr upper_bound;
  ParsedExpr lower_bound;

  _BetweenExpr__isset __isset;

  void __set_value(const ParsedExpr& val);

  void __set_upper_bound(const ParsedExpr& val);

  void __set_lower_bound(const ParsedExpr& val);

  bool operator == (const BetweenExpr & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    if (!(upper_bound == rhs.upper_bound))
      return false;
    if (!(lower_bound == rhs.lower_bound))
      return false;
    return true;
  }
  bool operator != (const BetweenExpr &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BetweenExpr & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(BetweenExpr &a, BetweenExpr &b);

std::ostream& operator<<(std::ostream& out, const BetweenExpr& obj);

typedef struct _UpdateExpr__isset {
  _UpdateExpr__isset() : column_name(false), value(false) {}
  bool column_name :1;
  bool value :1;
} _UpdateExpr__isset;

class UpdateExpr : public virtual ::apache::thrift::TBase {
 public:

  UpdateExpr(const UpdateExpr&);
  UpdateExpr& operator=(const UpdateExpr&);
  UpdateExpr() noexcept
             : column_name() {
  }

  virtual ~UpdateExpr() noexcept;
  std::string column_name;
  ParsedExpr value;

  _UpdateExpr__isset __isset;

  void __set_column_name(const std::string& val);

  void __set_value(const ParsedExpr& val);

  bool operator == (const UpdateExpr & rhs) const
  {
    if (!(column_name == rhs.column_name))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const UpdateExpr &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateExpr & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateExpr &a, UpdateExpr &b);

std::ostream& operator<<(std::ostream& out, const UpdateExpr& obj);

typedef struct _Field__isset {
  _Field__isset() : parse_exprs(true) {}
  bool parse_exprs :1;
} _Field__isset;

class Field : public virtual ::apache::thrift::TBase {
 public:

  Field(const Field&);
  Field& operator=(const Field&);
  Field() noexcept {

  }

  virtual ~Field() noexcept;
  std::vector<ParsedExpr>  parse_exprs;

  _Field__isset __isset;

  void __set_parse_exprs(const std::vector<ParsedExpr> & val);

  bool operator == (const Field & rhs) const
  {
    if (!(parse_exprs == rhs.parse_exprs))
      return false;
    return true;
  }
  bool operator != (const Field &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Field & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Field &a, Field &b);

std::ostream& operator<<(std::ostream& out, const Field& obj);

typedef struct _ColumnField__isset {
  _ColumnField__isset() : column_type(false), column_vector(false) {}
  bool column_type :1;
  bool column_vector :1;
} _ColumnField__isset;

class ColumnField : public virtual ::apache::thrift::TBase {
 public:

  ColumnField(const ColumnField&);
  ColumnField& operator=(const ColumnField&);
  ColumnField() noexcept
              : column_type(static_cast<ColumnType::type>(0)),
                column_vector() {
  }

  virtual ~ColumnField() noexcept;
  /**
   * 
   * @see ColumnType
   */
  ColumnType::type column_type;
  std::string column_vector;

  _ColumnField__isset __isset;

  void __set_column_type(const ColumnType::type val);

  void __set_column_vector(const std::string& val);

  bool operator == (const ColumnField & rhs) const
  {
    if (!(column_type == rhs.column_type))
      return false;
    if (!(column_vector == rhs.column_vector))
      return false;
    return true;
  }
  bool operator != (const ColumnField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ColumnField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ColumnField &a, ColumnField &b);

std::ostream& operator<<(std::ostream& out, const ColumnField& obj);

typedef struct _ImportOption__isset {
  _ImportOption__isset() : delimiter(false), file_type(false), table_name(false), schema_name(false), copy_from(false), has_header(false), copy_file_type(false) {}
  bool delimiter :1;
  bool file_type :1;
  bool table_name :1;
  bool schema_name :1;
  bool copy_from :1;
  bool has_header :1;
  bool copy_file_type :1;
} _ImportOption__isset;

class ImportOption : public virtual ::apache::thrift::TBase {
 public:

  ImportOption(const ImportOption&);
  ImportOption& operator=(const ImportOption&);
  ImportOption() noexcept
               : delimiter(),
                 file_type(),
                 table_name(),
                 schema_name(),
                 copy_from(0),
                 has_header(0),
                 copy_file_type(static_cast<CopyFileType::type>(0)) {
  }

  virtual ~ImportOption() noexcept;
  std::string delimiter;
  std::string file_type;
  std::string table_name;
  std::string schema_name;
  bool copy_from;
  bool has_header;
  /**
   * 
   * @see CopyFileType
   */
  CopyFileType::type copy_file_type;

  _ImportOption__isset __isset;

  void __set_delimiter(const std::string& val);

  void __set_file_type(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_schema_name(const std::string& val);

  void __set_copy_from(const bool val);

  void __set_has_header(const bool val);

  void __set_copy_file_type(const CopyFileType::type val);

  bool operator == (const ImportOption & rhs) const
  {
    if (!(delimiter == rhs.delimiter))
      return false;
    if (!(file_type == rhs.file_type))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(schema_name == rhs.schema_name))
      return false;
    if (!(copy_from == rhs.copy_from))
      return false;
    if (!(has_header == rhs.has_header))
      return false;
    if (!(copy_file_type == rhs.copy_file_type))
      return false;
    return true;
  }
  bool operator != (const ImportOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImportOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ImportOption &a, ImportOption &b);

std::ostream& operator<<(std::ostream& out, const ImportOption& obj);

typedef struct _CommonResponse__isset {
  _CommonResponse__isset() : success(false), error_msg(false), session_id(false) {}
  bool success :1;
  bool error_msg :1;
  bool session_id :1;
} _CommonResponse__isset;

class CommonResponse : public virtual ::apache::thrift::TBase {
 public:

  CommonResponse(const CommonResponse&);
  CommonResponse& operator=(const CommonResponse&);
  CommonResponse() noexcept
                 : success(0),
                   error_msg(),
                   session_id(0) {
  }

  virtual ~CommonResponse() noexcept;
  bool success;
  std::string error_msg;
  int64_t session_id;

  _CommonResponse__isset __isset;

  void __set_success(const bool val);

  void __set_error_msg(const std::string& val);

  void __set_session_id(const int64_t val);

  bool operator == (const CommonResponse & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error_msg == rhs.error_msg))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const CommonResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CommonResponse &a, CommonResponse &b);

std::ostream& operator<<(std::ostream& out, const CommonResponse& obj);

typedef struct _CommonRequest__isset {
  _CommonRequest__isset() : session_id(false) {}
  bool session_id :1;
} _CommonRequest__isset;

class CommonRequest : public virtual ::apache::thrift::TBase {
 public:

  CommonRequest(const CommonRequest&) noexcept;
  CommonRequest& operator=(const CommonRequest&) noexcept;
  CommonRequest() noexcept
                : session_id(0) {
  }

  virtual ~CommonRequest() noexcept;
  int64_t session_id;

  _CommonRequest__isset __isset;

  void __set_session_id(const int64_t val);

  bool operator == (const CommonRequest & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const CommonRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CommonRequest &a, CommonRequest &b);

std::ostream& operator<<(std::ostream& out, const CommonRequest& obj);

typedef struct _ListDatabaseRequest__isset {
  _ListDatabaseRequest__isset() : session_id(false) {}
  bool session_id :1;
} _ListDatabaseRequest__isset;

class ListDatabaseRequest : public virtual ::apache::thrift::TBase {
 public:

  ListDatabaseRequest(const ListDatabaseRequest&) noexcept;
  ListDatabaseRequest& operator=(const ListDatabaseRequest&) noexcept;
  ListDatabaseRequest() noexcept
                      : session_id(0) {
  }

  virtual ~ListDatabaseRequest() noexcept;
  int64_t session_id;

  _ListDatabaseRequest__isset __isset;

  void __set_session_id(const int64_t val);

  bool operator == (const ListDatabaseRequest & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const ListDatabaseRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListDatabaseRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ListDatabaseRequest &a, ListDatabaseRequest &b);

std::ostream& operator<<(std::ostream& out, const ListDatabaseRequest& obj);

typedef struct _ListDatabaseResponse__isset {
  _ListDatabaseResponse__isset() : success(false), error_msg(false), db_names(true) {}
  bool success :1;
  bool error_msg :1;
  bool db_names :1;
} _ListDatabaseResponse__isset;

class ListDatabaseResponse : public virtual ::apache::thrift::TBase {
 public:

  ListDatabaseResponse(const ListDatabaseResponse&);
  ListDatabaseResponse& operator=(const ListDatabaseResponse&);
  ListDatabaseResponse() noexcept
                       : success(0),
                         error_msg() {

  }

  virtual ~ListDatabaseResponse() noexcept;
  bool success;
  std::string error_msg;
  std::vector<std::string>  db_names;

  _ListDatabaseResponse__isset __isset;

  void __set_success(const bool val);

  void __set_error_msg(const std::string& val);

  void __set_db_names(const std::vector<std::string> & val);

  bool operator == (const ListDatabaseResponse & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error_msg == rhs.error_msg))
      return false;
    if (!(db_names == rhs.db_names))
      return false;
    return true;
  }
  bool operator != (const ListDatabaseResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListDatabaseResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ListDatabaseResponse &a, ListDatabaseResponse &b);

std::ostream& operator<<(std::ostream& out, const ListDatabaseResponse& obj);

typedef struct _ListTableRequest__isset {
  _ListTableRequest__isset() : db_name(false), session_id(false) {}
  bool db_name :1;
  bool session_id :1;
} _ListTableRequest__isset;

class ListTableRequest : public virtual ::apache::thrift::TBase {
 public:

  ListTableRequest(const ListTableRequest&);
  ListTableRequest& operator=(const ListTableRequest&);
  ListTableRequest() noexcept
                   : db_name(),
                     session_id(0) {
  }

  virtual ~ListTableRequest() noexcept;
  std::string db_name;
  int64_t session_id;

  _ListTableRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_session_id(const int64_t val);

  bool operator == (const ListTableRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const ListTableRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListTableRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ListTableRequest &a, ListTableRequest &b);

std::ostream& operator<<(std::ostream& out, const ListTableRequest& obj);

typedef struct _ListTableResponse__isset {
  _ListTableResponse__isset() : success(false), error_msg(false), table_names(true) {}
  bool success :1;
  bool error_msg :1;
  bool table_names :1;
} _ListTableResponse__isset;

class ListTableResponse : public virtual ::apache::thrift::TBase {
 public:

  ListTableResponse(const ListTableResponse&);
  ListTableResponse& operator=(const ListTableResponse&);
  ListTableResponse() noexcept
                    : success(0),
                      error_msg() {

  }

  virtual ~ListTableResponse() noexcept;
  bool success;
  std::string error_msg;
  std::vector<std::string>  table_names;

  _ListTableResponse__isset __isset;

  void __set_success(const bool val);

  void __set_error_msg(const std::string& val);

  void __set_table_names(const std::vector<std::string> & val);

  bool operator == (const ListTableResponse & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error_msg == rhs.error_msg))
      return false;
    if (!(table_names == rhs.table_names))
      return false;
    return true;
  }
  bool operator != (const ListTableResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ListTableResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ListTableResponse &a, ListTableResponse &b);

std::ostream& operator<<(std::ostream& out, const ListTableResponse& obj);

typedef struct _DescribeDatabaseRequest__isset {
  _DescribeDatabaseRequest__isset() : db_name(false), session_id(false) {}
  bool db_name :1;
  bool session_id :1;
} _DescribeDatabaseRequest__isset;

class DescribeDatabaseRequest : public virtual ::apache::thrift::TBase {
 public:

  DescribeDatabaseRequest(const DescribeDatabaseRequest&);
  DescribeDatabaseRequest& operator=(const DescribeDatabaseRequest&);
  DescribeDatabaseRequest() noexcept
                          : db_name(),
                            session_id(0) {
  }

  virtual ~DescribeDatabaseRequest() noexcept;
  std::string db_name;
  int64_t session_id;

  _DescribeDatabaseRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_session_id(const int64_t val);

  bool operator == (const DescribeDatabaseRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const DescribeDatabaseRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DescribeDatabaseRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DescribeDatabaseRequest &a, DescribeDatabaseRequest &b);

std::ostream& operator<<(std::ostream& out, const DescribeDatabaseRequest& obj);

typedef struct _DescribeDatabaseResponse__isset {
  _DescribeDatabaseResponse__isset() : success(false), error_msg(false), num_segments(false), num_rows(false), num_blocks(false) {}
  bool success :1;
  bool error_msg :1;
  bool num_segments :1;
  bool num_rows :1;
  bool num_blocks :1;
} _DescribeDatabaseResponse__isset;

class DescribeDatabaseResponse : public virtual ::apache::thrift::TBase {
 public:

  DescribeDatabaseResponse(const DescribeDatabaseResponse&);
  DescribeDatabaseResponse& operator=(const DescribeDatabaseResponse&);
  DescribeDatabaseResponse() noexcept
                           : success(0),
                             error_msg(),
                             num_segments(0),
                             num_rows(0),
                             num_blocks(0) {
  }

  virtual ~DescribeDatabaseResponse() noexcept;
  bool success;
  std::string error_msg;
  int64_t num_segments;
  int64_t num_rows;
  int64_t num_blocks;

  _DescribeDatabaseResponse__isset __isset;

  void __set_success(const bool val);

  void __set_error_msg(const std::string& val);

  void __set_num_segments(const int64_t val);

  void __set_num_rows(const int64_t val);

  void __set_num_blocks(const int64_t val);

  bool operator == (const DescribeDatabaseResponse & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error_msg == rhs.error_msg))
      return false;
    if (!(num_segments == rhs.num_segments))
      return false;
    if (!(num_rows == rhs.num_rows))
      return false;
    if (!(num_blocks == rhs.num_blocks))
      return false;
    return true;
  }
  bool operator != (const DescribeDatabaseResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DescribeDatabaseResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DescribeDatabaseResponse &a, DescribeDatabaseResponse &b);

std::ostream& operator<<(std::ostream& out, const DescribeDatabaseResponse& obj);

typedef struct _DescribeTableRequest__isset {
  _DescribeTableRequest__isset() : db_name(false), table_name(false), session_id(false) {}
  bool db_name :1;
  bool table_name :1;
  bool session_id :1;
} _DescribeTableRequest__isset;

class DescribeTableRequest : public virtual ::apache::thrift::TBase {
 public:

  DescribeTableRequest(const DescribeTableRequest&);
  DescribeTableRequest& operator=(const DescribeTableRequest&);
  DescribeTableRequest() noexcept
                       : db_name(),
                         table_name(),
                         session_id(0) {
  }

  virtual ~DescribeTableRequest() noexcept;
  std::string db_name;
  std::string table_name;
  int64_t session_id;

  _DescribeTableRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_session_id(const int64_t val);

  bool operator == (const DescribeTableRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const DescribeTableRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DescribeTableRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DescribeTableRequest &a, DescribeTableRequest &b);

std::ostream& operator<<(std::ostream& out, const DescribeTableRequest& obj);

typedef struct _DescribeTableResponse__isset {
  _DescribeTableResponse__isset() : success(false), error_msg(false), num_segments(false), num_rows(false), num_blocks(false) {}
  bool success :1;
  bool error_msg :1;
  bool num_segments :1;
  bool num_rows :1;
  bool num_blocks :1;
} _DescribeTableResponse__isset;

class DescribeTableResponse : public virtual ::apache::thrift::TBase {
 public:

  DescribeTableResponse(const DescribeTableResponse&);
  DescribeTableResponse& operator=(const DescribeTableResponse&);
  DescribeTableResponse() noexcept
                        : success(0),
                          error_msg(),
                          num_segments(0),
                          num_rows(0),
                          num_blocks(0) {
  }

  virtual ~DescribeTableResponse() noexcept;
  bool success;
  std::string error_msg;
  int64_t num_segments;
  int64_t num_rows;
  int64_t num_blocks;

  _DescribeTableResponse__isset __isset;

  void __set_success(const bool val);

  void __set_error_msg(const std::string& val);

  void __set_num_segments(const int64_t val);

  void __set_num_rows(const int64_t val);

  void __set_num_blocks(const int64_t val);

  bool operator == (const DescribeTableResponse & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error_msg == rhs.error_msg))
      return false;
    if (!(num_segments == rhs.num_segments))
      return false;
    if (!(num_rows == rhs.num_rows))
      return false;
    if (!(num_blocks == rhs.num_blocks))
      return false;
    return true;
  }
  bool operator != (const DescribeTableResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DescribeTableResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DescribeTableResponse &a, DescribeTableResponse &b);

std::ostream& operator<<(std::ostream& out, const DescribeTableResponse& obj);

typedef struct _GetTableRequest__isset {
  _GetTableRequest__isset() : db_name(false), table_name(false), session_id(false) {}
  bool db_name :1;
  bool table_name :1;
  bool session_id :1;
} _GetTableRequest__isset;

class GetTableRequest : public virtual ::apache::thrift::TBase {
 public:

  GetTableRequest(const GetTableRequest&);
  GetTableRequest& operator=(const GetTableRequest&);
  GetTableRequest() noexcept
                  : db_name(),
                    table_name(),
                    session_id(0) {
  }

  virtual ~GetTableRequest() noexcept;
  std::string db_name;
  std::string table_name;
  int64_t session_id;

  _GetTableRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_session_id(const int64_t val);

  bool operator == (const GetTableRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const GetTableRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetTableRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetTableRequest &a, GetTableRequest &b);

std::ostream& operator<<(std::ostream& out, const GetTableRequest& obj);

typedef struct _InitParameter__isset {
  _InitParameter__isset() : param_name(false), param_value(false) {}
  bool param_name :1;
  bool param_value :1;
} _InitParameter__isset;

class InitParameter : public virtual ::apache::thrift::TBase {
 public:

  InitParameter(const InitParameter&);
  InitParameter& operator=(const InitParameter&);
  InitParameter() noexcept
                : param_name(),
                  param_value() {
  }

  virtual ~InitParameter() noexcept;
  std::string param_name;
  std::string param_value;

  _InitParameter__isset __isset;

  void __set_param_name(const std::string& val);

  void __set_param_value(const std::string& val);

  bool operator == (const InitParameter & rhs) const
  {
    if (!(param_name == rhs.param_name))
      return false;
    if (!(param_value == rhs.param_value))
      return false;
    return true;
  }
  bool operator != (const InitParameter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InitParameter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(InitParameter &a, InitParameter &b);

std::ostream& operator<<(std::ostream& out, const InitParameter& obj);

typedef struct _IndexInfo__isset {
  _IndexInfo__isset() : column_name(false), index_type(false), index_param_list(true) {}
  bool column_name :1;
  bool index_type :1;
  bool index_param_list :1;
} _IndexInfo__isset;

class IndexInfo : public virtual ::apache::thrift::TBase {
 public:

  IndexInfo(const IndexInfo&);
  IndexInfo& operator=(const IndexInfo&);
  IndexInfo() noexcept
            : column_name(),
              index_type(static_cast<IndexType::type>(0)) {

  }

  virtual ~IndexInfo() noexcept;
  std::string column_name;
  /**
   * 
   * @see IndexType
   */
  IndexType::type index_type;
  std::vector<InitParameter>  index_param_list;

  _IndexInfo__isset __isset;

  void __set_column_name(const std::string& val);

  void __set_index_type(const IndexType::type val);

  void __set_index_param_list(const std::vector<InitParameter> & val);

  bool operator == (const IndexInfo & rhs) const
  {
    if (!(column_name == rhs.column_name))
      return false;
    if (!(index_type == rhs.index_type))
      return false;
    if (!(index_param_list == rhs.index_param_list))
      return false;
    return true;
  }
  bool operator != (const IndexInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IndexInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(IndexInfo &a, IndexInfo &b);

std::ostream& operator<<(std::ostream& out, const IndexInfo& obj);

typedef struct _CreateIndexRequest__isset {
  _CreateIndexRequest__isset() : db_name(false), table_name(false), index_name(false), index_info_list(true), session_id(false), option(false) {}
  bool db_name :1;
  bool table_name :1;
  bool index_name :1;
  bool index_info_list :1;
  bool session_id :1;
  bool option :1;
} _CreateIndexRequest__isset;

class CreateIndexRequest : public virtual ::apache::thrift::TBase {
 public:

  CreateIndexRequest(const CreateIndexRequest&);
  CreateIndexRequest& operator=(const CreateIndexRequest&);
  CreateIndexRequest() noexcept
                     : db_name(),
                       table_name(),
                       index_name(),
                       session_id(0) {

  }

  virtual ~CreateIndexRequest() noexcept;
  std::string db_name;
  std::string table_name;
  std::string index_name;
  std::vector<IndexInfo>  index_info_list;
  int64_t session_id;
  Option option;

  _CreateIndexRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_index_name(const std::string& val);

  void __set_index_info_list(const std::vector<IndexInfo> & val);

  void __set_session_id(const int64_t val);

  void __set_option(const Option& val);

  bool operator == (const CreateIndexRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(index_name == rhs.index_name))
      return false;
    if (!(index_info_list == rhs.index_info_list))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    if (__isset.option != rhs.__isset.option)
      return false;
    else if (__isset.option && !(option == rhs.option))
      return false;
    return true;
  }
  bool operator != (const CreateIndexRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateIndexRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateIndexRequest &a, CreateIndexRequest &b);

std::ostream& operator<<(std::ostream& out, const CreateIndexRequest& obj);

typedef struct _DropIndexRequest__isset {
  _DropIndexRequest__isset() : db_name(false), table_name(false), index_name(false), session_id(false) {}
  bool db_name :1;
  bool table_name :1;
  bool index_name :1;
  bool session_id :1;
} _DropIndexRequest__isset;

class DropIndexRequest : public virtual ::apache::thrift::TBase {
 public:

  DropIndexRequest(const DropIndexRequest&);
  DropIndexRequest& operator=(const DropIndexRequest&);
  DropIndexRequest() noexcept
                   : db_name(),
                     table_name(),
                     index_name(),
                     session_id(0) {
  }

  virtual ~DropIndexRequest() noexcept;
  std::string db_name;
  std::string table_name;
  std::string index_name;
  int64_t session_id;

  _DropIndexRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_index_name(const std::string& val);

  void __set_session_id(const int64_t val);

  bool operator == (const DropIndexRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(index_name == rhs.index_name))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const DropIndexRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DropIndexRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DropIndexRequest &a, DropIndexRequest &b);

std::ostream& operator<<(std::ostream& out, const DropIndexRequest& obj);

typedef struct _GetDatabaseRequest__isset {
  _GetDatabaseRequest__isset() : db_name(false), session_id(false) {}
  bool db_name :1;
  bool session_id :1;
} _GetDatabaseRequest__isset;

class GetDatabaseRequest : public virtual ::apache::thrift::TBase {
 public:

  GetDatabaseRequest(const GetDatabaseRequest&);
  GetDatabaseRequest& operator=(const GetDatabaseRequest&);
  GetDatabaseRequest() noexcept
                     : db_name(),
                       session_id(0) {
  }

  virtual ~GetDatabaseRequest() noexcept;
  std::string db_name;
  int64_t session_id;

  _GetDatabaseRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_session_id(const int64_t val);

  bool operator == (const GetDatabaseRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const GetDatabaseRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetDatabaseRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetDatabaseRequest &a, GetDatabaseRequest &b);

std::ostream& operator<<(std::ostream& out, const GetDatabaseRequest& obj);

typedef struct _CreateDatabaseRequest__isset {
  _CreateDatabaseRequest__isset() : db_name(false), session_id(false), option(false) {}
  bool db_name :1;
  bool session_id :1;
  bool option :1;
} _CreateDatabaseRequest__isset;

class CreateDatabaseRequest : public virtual ::apache::thrift::TBase {
 public:

  CreateDatabaseRequest(const CreateDatabaseRequest&);
  CreateDatabaseRequest& operator=(const CreateDatabaseRequest&);
  CreateDatabaseRequest() noexcept
                        : db_name(),
                          session_id(0) {
  }

  virtual ~CreateDatabaseRequest() noexcept;
  std::string db_name;
  int64_t session_id;
  Option option;

  _CreateDatabaseRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_session_id(const int64_t val);

  void __set_option(const Option& val);

  bool operator == (const CreateDatabaseRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    if (!(option == rhs.option))
      return false;
    return true;
  }
  bool operator != (const CreateDatabaseRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateDatabaseRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateDatabaseRequest &a, CreateDatabaseRequest &b);

std::ostream& operator<<(std::ostream& out, const CreateDatabaseRequest& obj);

typedef struct _DropDatabaseRequest__isset {
  _DropDatabaseRequest__isset() : db_name(false), session_id(false), option(false) {}
  bool db_name :1;
  bool session_id :1;
  bool option :1;
} _DropDatabaseRequest__isset;

class DropDatabaseRequest : public virtual ::apache::thrift::TBase {
 public:

  DropDatabaseRequest(const DropDatabaseRequest&);
  DropDatabaseRequest& operator=(const DropDatabaseRequest&);
  DropDatabaseRequest() noexcept
                      : db_name(),
                        session_id(0) {
  }

  virtual ~DropDatabaseRequest() noexcept;
  std::string db_name;
  int64_t session_id;
  Option option;

  _DropDatabaseRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_session_id(const int64_t val);

  void __set_option(const Option& val);

  bool operator == (const DropDatabaseRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    if (!(option == rhs.option))
      return false;
    return true;
  }
  bool operator != (const DropDatabaseRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DropDatabaseRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DropDatabaseRequest &a, DropDatabaseRequest &b);

std::ostream& operator<<(std::ostream& out, const DropDatabaseRequest& obj);

typedef struct _CreateTableRequest__isset {
  _CreateTableRequest__isset() : db_name(false), table_name(false), column_defs(true), session_id(false), option(false) {}
  bool db_name :1;
  bool table_name :1;
  bool column_defs :1;
  bool session_id :1;
  bool option :1;
} _CreateTableRequest__isset;

class CreateTableRequest : public virtual ::apache::thrift::TBase {
 public:

  CreateTableRequest(const CreateTableRequest&);
  CreateTableRequest& operator=(const CreateTableRequest&);
  CreateTableRequest() noexcept
                     : db_name(),
                       table_name(),
                       session_id(0) {

  }

  virtual ~CreateTableRequest() noexcept;
  std::string db_name;
  std::string table_name;
  std::vector<ColumnDef>  column_defs;
  int64_t session_id;
  Option option;

  _CreateTableRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_column_defs(const std::vector<ColumnDef> & val);

  void __set_session_id(const int64_t val);

  void __set_option(const Option& val);

  bool operator == (const CreateTableRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(column_defs == rhs.column_defs))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    if (!(option == rhs.option))
      return false;
    return true;
  }
  bool operator != (const CreateTableRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateTableRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateTableRequest &a, CreateTableRequest &b);

std::ostream& operator<<(std::ostream& out, const CreateTableRequest& obj);

typedef struct _DropTableRequest__isset {
  _DropTableRequest__isset() : db_name(false), table_name(false), session_id(false), option(false) {}
  bool db_name :1;
  bool table_name :1;
  bool session_id :1;
  bool option :1;
} _DropTableRequest__isset;

class DropTableRequest : public virtual ::apache::thrift::TBase {
 public:

  DropTableRequest(const DropTableRequest&);
  DropTableRequest& operator=(const DropTableRequest&);
  DropTableRequest() noexcept
                   : db_name(),
                     table_name(),
                     session_id(0) {
  }

  virtual ~DropTableRequest() noexcept;
  std::string db_name;
  std::string table_name;
  int64_t session_id;
  Option option;

  _DropTableRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_session_id(const int64_t val);

  void __set_option(const Option& val);

  bool operator == (const DropTableRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    if (!(option == rhs.option))
      return false;
    return true;
  }
  bool operator != (const DropTableRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DropTableRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DropTableRequest &a, DropTableRequest &b);

std::ostream& operator<<(std::ostream& out, const DropTableRequest& obj);

typedef struct _InsertRequest__isset {
  _InsertRequest__isset() : db_name(false), table_name(false), column_names(true), fields(true), session_id(false) {}
  bool db_name :1;
  bool table_name :1;
  bool column_names :1;
  bool fields :1;
  bool session_id :1;
} _InsertRequest__isset;

class InsertRequest : public virtual ::apache::thrift::TBase {
 public:

  InsertRequest(const InsertRequest&);
  InsertRequest& operator=(const InsertRequest&);
  InsertRequest() noexcept
                : db_name(),
                  table_name(),
                  session_id(0) {


  }

  virtual ~InsertRequest() noexcept;
  std::string db_name;
  std::string table_name;
  std::vector<std::string>  column_names;
  std::vector<Field>  fields;
  int64_t session_id;

  _InsertRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_column_names(const std::vector<std::string> & val);

  void __set_fields(const std::vector<Field> & val);

  void __set_session_id(const int64_t val);

  bool operator == (const InsertRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(column_names == rhs.column_names))
      return false;
    if (!(fields == rhs.fields))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const InsertRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InsertRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(InsertRequest &a, InsertRequest &b);

std::ostream& operator<<(std::ostream& out, const InsertRequest& obj);

typedef struct _ImportRequest__isset {
  _ImportRequest__isset() : db_name(false), table_name(false), file_name(false), file_content(false), import_option(false), session_id(false) {}
  bool db_name :1;
  bool table_name :1;
  bool file_name :1;
  bool file_content :1;
  bool import_option :1;
  bool session_id :1;
} _ImportRequest__isset;

class ImportRequest : public virtual ::apache::thrift::TBase {
 public:

  ImportRequest(const ImportRequest&);
  ImportRequest& operator=(const ImportRequest&);
  ImportRequest() noexcept
                : db_name(),
                  table_name(),
                  file_name(),
                  file_content(),
                  session_id(0) {
  }

  virtual ~ImportRequest() noexcept;
  std::string db_name;
  std::string table_name;
  std::string file_name;
  std::string file_content;
  ImportOption import_option;
  int64_t session_id;

  _ImportRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_file_name(const std::string& val);

  void __set_file_content(const std::string& val);

  void __set_import_option(const ImportOption& val);

  void __set_session_id(const int64_t val);

  bool operator == (const ImportRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(file_name == rhs.file_name))
      return false;
    if (!(file_content == rhs.file_content))
      return false;
    if (!(import_option == rhs.import_option))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const ImportRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImportRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ImportRequest &a, ImportRequest &b);

std::ostream& operator<<(std::ostream& out, const ImportRequest& obj);

typedef struct _SelectRequest__isset {
  _SelectRequest__isset() : db_name(false), table_name(false), select_list(true), where_expr(false), group_by_list(true), having_expr(false), limit_expr(false), offset_expr(false), session_id(false) {}
  bool db_name :1;
  bool table_name :1;
  bool select_list :1;
  bool where_expr :1;
  bool group_by_list :1;
  bool having_expr :1;
  bool limit_expr :1;
  bool offset_expr :1;
  bool session_id :1;
} _SelectRequest__isset;

class SelectRequest : public virtual ::apache::thrift::TBase {
 public:

  SelectRequest(const SelectRequest&);
  SelectRequest& operator=(const SelectRequest&);
  SelectRequest() noexcept
                : db_name(),
                  table_name(),
                  session_id(0) {


  }

  virtual ~SelectRequest() noexcept;
  std::string db_name;
  std::string table_name;
  std::vector<ParsedExpr>  select_list;
  ParsedExpr where_expr;
  std::vector<ParsedExpr>  group_by_list;
  ParsedExpr having_expr;
  ParsedExpr limit_expr;
  ParsedExpr offset_expr;
  int64_t session_id;

  _SelectRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_select_list(const std::vector<ParsedExpr> & val);

  void __set_where_expr(const ParsedExpr& val);

  void __set_group_by_list(const std::vector<ParsedExpr> & val);

  void __set_having_expr(const ParsedExpr& val);

  void __set_limit_expr(const ParsedExpr& val);

  void __set_offset_expr(const ParsedExpr& val);

  void __set_session_id(const int64_t val);

  bool operator == (const SelectRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(select_list == rhs.select_list))
      return false;
    if (!(where_expr == rhs.where_expr))
      return false;
    if (!(group_by_list == rhs.group_by_list))
      return false;
    if (!(having_expr == rhs.having_expr))
      return false;
    if (!(limit_expr == rhs.limit_expr))
      return false;
    if (!(offset_expr == rhs.offset_expr))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const SelectRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelectRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(SelectRequest &a, SelectRequest &b);

std::ostream& operator<<(std::ostream& out, const SelectRequest& obj);

typedef struct _SelectResponse__isset {
  _SelectResponse__isset() : success(false), error_msg(false), column_defs(true), column_fields(true) {}
  bool success :1;
  bool error_msg :1;
  bool column_defs :1;
  bool column_fields :1;
} _SelectResponse__isset;

class SelectResponse : public virtual ::apache::thrift::TBase {
 public:

  SelectResponse(const SelectResponse&);
  SelectResponse& operator=(const SelectResponse&);
  SelectResponse() noexcept
                 : success(0),
                   error_msg() {


  }

  virtual ~SelectResponse() noexcept;
  bool success;
  std::string error_msg;
  std::vector<ColumnDef>  column_defs;
  std::vector<ColumnField>  column_fields;

  _SelectResponse__isset __isset;

  void __set_success(const bool val);

  void __set_error_msg(const std::string& val);

  void __set_column_defs(const std::vector<ColumnDef> & val);

  void __set_column_fields(const std::vector<ColumnField> & val);

  bool operator == (const SelectResponse & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error_msg == rhs.error_msg))
      return false;
    if (!(column_defs == rhs.column_defs))
      return false;
    if (!(column_fields == rhs.column_fields))
      return false;
    return true;
  }
  bool operator != (const SelectResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SelectResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(SelectResponse &a, SelectResponse &b);

std::ostream& operator<<(std::ostream& out, const SelectResponse& obj);

typedef struct _DeleteRequest__isset {
  _DeleteRequest__isset() : db_name(false), table_name(false), where_expr(false), session_id(false) {}
  bool db_name :1;
  bool table_name :1;
  bool where_expr :1;
  bool session_id :1;
} _DeleteRequest__isset;

class DeleteRequest : public virtual ::apache::thrift::TBase {
 public:

  DeleteRequest(const DeleteRequest&);
  DeleteRequest& operator=(const DeleteRequest&);
  DeleteRequest() noexcept
                : db_name(),
                  table_name(),
                  session_id(0) {
  }

  virtual ~DeleteRequest() noexcept;
  std::string db_name;
  std::string table_name;
  ParsedExpr where_expr;
  int64_t session_id;

  _DeleteRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_where_expr(const ParsedExpr& val);

  void __set_session_id(const int64_t val);

  bool operator == (const DeleteRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(where_expr == rhs.where_expr))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const DeleteRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeleteRequest &a, DeleteRequest &b);

std::ostream& operator<<(std::ostream& out, const DeleteRequest& obj);

typedef struct _UpdateRequest__isset {
  _UpdateRequest__isset() : db_name(false), table_name(false), where_expr(false), update_expr_array(true), session_id(false) {}
  bool db_name :1;
  bool table_name :1;
  bool where_expr :1;
  bool update_expr_array :1;
  bool session_id :1;
} _UpdateRequest__isset;

class UpdateRequest : public virtual ::apache::thrift::TBase {
 public:

  UpdateRequest(const UpdateRequest&);
  UpdateRequest& operator=(const UpdateRequest&);
  UpdateRequest() noexcept
                : db_name(),
                  table_name(),
                  session_id(0) {

  }

  virtual ~UpdateRequest() noexcept;
  std::string db_name;
  std::string table_name;
  ParsedExpr where_expr;
  std::vector<UpdateExpr>  update_expr_array;
  int64_t session_id;

  _UpdateRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_where_expr(const ParsedExpr& val);

  void __set_update_expr_array(const std::vector<UpdateExpr> & val);

  void __set_session_id(const int64_t val);

  bool operator == (const UpdateRequest & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(where_expr == rhs.where_expr))
      return false;
    if (!(update_expr_array == rhs.update_expr_array))
      return false;
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const UpdateRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(UpdateRequest &a, UpdateRequest &b);

std::ostream& operator<<(std::ostream& out, const UpdateRequest& obj);

} // namespace

#endif
