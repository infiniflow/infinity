/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef InfinityService_H
#define InfinityService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "infinity_types.h"

namespace infinity_thrift_rpc {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class InfinityServiceIf {
 public:
  virtual ~InfinityServiceIf() {}
  virtual void Connect(CommonResponse& _return) = 0;
  virtual void Disconnect(CommonResponse& _return, const CommonRequest& request) = 0;
  virtual void CreateDatabase(CommonResponse& _return, const CreateDatabaseRequest& request) = 0;
  virtual void DropDatabase(CommonResponse& _return, const DropDatabaseRequest& request) = 0;
  virtual void CreateTable(CommonResponse& _return, const CreateTableRequest& request) = 0;
  virtual void DropTable(CommonResponse& _return, const DropTableRequest& request) = 0;
  virtual void Insert(CommonResponse& _return, const InsertRequest& request) = 0;
  virtual void Import(CommonResponse& _return, const ImportRequest& request) = 0;
  virtual void Select(SelectResponse& _return, const SelectRequest& request) = 0;
  virtual void Delete(CommonResponse& _return, const DeleteRequest& request) = 0;
  virtual void Update(CommonResponse& _return, const UpdateRequest& request) = 0;
  virtual void UploadFileChunk(UploadResponse& _return, const FileChunk& request) = 0;
  virtual void ListDatabase(ListDatabaseResponse& _return, const ListDatabaseRequest& request) = 0;
  virtual void ListTable(ListTableResponse& _return, const ListTableRequest& request) = 0;
  virtual void DescribeDatabase(DescribeDatabaseResponse& _return, const DescribeDatabaseRequest& request) = 0;
  virtual void DescribeTable(DescribeTableResponse& _return, const DescribeTableRequest& request) = 0;
  virtual void GetDatabase(CommonResponse& _return, const GetDatabaseRequest& request) = 0;
  virtual void GetTable(CommonResponse& _return, const GetTableRequest& request) = 0;
  virtual void CreateIndex(CommonResponse& _return, const CreateIndexRequest& request) = 0;
  virtual void DropIndex(CommonResponse& _return, const DropIndexRequest& request) = 0;
};

class InfinityServiceIfFactory {
 public:
  typedef InfinityServiceIf Handler;

  virtual ~InfinityServiceIfFactory() {}

  virtual InfinityServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(InfinityServiceIf* /* handler */) = 0;
  };

class InfinityServiceIfSingletonFactory : virtual public InfinityServiceIfFactory {
 public:
  InfinityServiceIfSingletonFactory(const ::std::shared_ptr<InfinityServiceIf>& iface) : iface_(iface) {}
  virtual ~InfinityServiceIfSingletonFactory() {}

  virtual InfinityServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(InfinityServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<InfinityServiceIf> iface_;
};

class InfinityServiceNull : virtual public InfinityServiceIf {
 public:
  virtual ~InfinityServiceNull() {}
  void Connect(CommonResponse& /* _return */) override {
    return;
  }
  void Disconnect(CommonResponse& /* _return */, const CommonRequest& /* request */) override {
    return;
  }
  void CreateDatabase(CommonResponse& /* _return */, const CreateDatabaseRequest& /* request */) override {
    return;
  }
  void DropDatabase(CommonResponse& /* _return */, const DropDatabaseRequest& /* request */) override {
    return;
  }
  void CreateTable(CommonResponse& /* _return */, const CreateTableRequest& /* request */) override {
    return;
  }
  void DropTable(CommonResponse& /* _return */, const DropTableRequest& /* request */) override {
    return;
  }
  void Insert(CommonResponse& /* _return */, const InsertRequest& /* request */) override {
    return;
  }
  void Import(CommonResponse& /* _return */, const ImportRequest& /* request */) override {
    return;
  }
  void Select(SelectResponse& /* _return */, const SelectRequest& /* request */) override {
    return;
  }
  void Delete(CommonResponse& /* _return */, const DeleteRequest& /* request */) override {
    return;
  }
  void Update(CommonResponse& /* _return */, const UpdateRequest& /* request */) override {
    return;
  }
  void UploadFileChunk(UploadResponse& /* _return */, const FileChunk& /* request */) override {
    return;
  }
  void ListDatabase(ListDatabaseResponse& /* _return */, const ListDatabaseRequest& /* request */) override {
    return;
  }
  void ListTable(ListTableResponse& /* _return */, const ListTableRequest& /* request */) override {
    return;
  }
  void DescribeDatabase(DescribeDatabaseResponse& /* _return */, const DescribeDatabaseRequest& /* request */) override {
    return;
  }
  void DescribeTable(DescribeTableResponse& /* _return */, const DescribeTableRequest& /* request */) override {
    return;
  }
  void GetDatabase(CommonResponse& /* _return */, const GetDatabaseRequest& /* request */) override {
    return;
  }
  void GetTable(CommonResponse& /* _return */, const GetTableRequest& /* request */) override {
    return;
  }
  void CreateIndex(CommonResponse& /* _return */, const CreateIndexRequest& /* request */) override {
    return;
  }
  void DropIndex(CommonResponse& /* _return */, const DropIndexRequest& /* request */) override {
    return;
  }
};


class InfinityService_Connect_args {
 public:

  InfinityService_Connect_args(const InfinityService_Connect_args&) noexcept;
  InfinityService_Connect_args& operator=(const InfinityService_Connect_args&) noexcept;
  InfinityService_Connect_args() noexcept {
  }

  virtual ~InfinityService_Connect_args() noexcept;

  bool operator == (const InfinityService_Connect_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const InfinityService_Connect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Connect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_Connect_pargs {
 public:


  virtual ~InfinityService_Connect_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Connect_result__isset {
  _InfinityService_Connect_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_Connect_result__isset;

class InfinityService_Connect_result {
 public:

  InfinityService_Connect_result(const InfinityService_Connect_result&);
  InfinityService_Connect_result& operator=(const InfinityService_Connect_result&);
  InfinityService_Connect_result() noexcept {
  }

  virtual ~InfinityService_Connect_result() noexcept;
  CommonResponse success;

  _InfinityService_Connect_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_Connect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_Connect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Connect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Connect_presult__isset {
  _InfinityService_Connect_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_Connect_presult__isset;

class InfinityService_Connect_presult {
 public:


  virtual ~InfinityService_Connect_presult() noexcept;
  CommonResponse* success;

  _InfinityService_Connect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_Disconnect_args__isset {
  _InfinityService_Disconnect_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_Disconnect_args__isset;

class InfinityService_Disconnect_args {
 public:

  InfinityService_Disconnect_args(const InfinityService_Disconnect_args&) noexcept;
  InfinityService_Disconnect_args& operator=(const InfinityService_Disconnect_args&) noexcept;
  InfinityService_Disconnect_args() noexcept {
  }

  virtual ~InfinityService_Disconnect_args() noexcept;
  CommonRequest request;

  _InfinityService_Disconnect_args__isset __isset;

  void __set_request(const CommonRequest& val);

  bool operator == (const InfinityService_Disconnect_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_Disconnect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Disconnect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_Disconnect_pargs {
 public:


  virtual ~InfinityService_Disconnect_pargs() noexcept;
  const CommonRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Disconnect_result__isset {
  _InfinityService_Disconnect_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_Disconnect_result__isset;

class InfinityService_Disconnect_result {
 public:

  InfinityService_Disconnect_result(const InfinityService_Disconnect_result&);
  InfinityService_Disconnect_result& operator=(const InfinityService_Disconnect_result&);
  InfinityService_Disconnect_result() noexcept {
  }

  virtual ~InfinityService_Disconnect_result() noexcept;
  CommonResponse success;

  _InfinityService_Disconnect_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_Disconnect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_Disconnect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Disconnect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Disconnect_presult__isset {
  _InfinityService_Disconnect_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_Disconnect_presult__isset;

class InfinityService_Disconnect_presult {
 public:


  virtual ~InfinityService_Disconnect_presult() noexcept;
  CommonResponse* success;

  _InfinityService_Disconnect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_CreateDatabase_args__isset {
  _InfinityService_CreateDatabase_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_CreateDatabase_args__isset;

class InfinityService_CreateDatabase_args {
 public:

  InfinityService_CreateDatabase_args(const InfinityService_CreateDatabase_args&);
  InfinityService_CreateDatabase_args& operator=(const InfinityService_CreateDatabase_args&);
  InfinityService_CreateDatabase_args() noexcept {
  }

  virtual ~InfinityService_CreateDatabase_args() noexcept;
  CreateDatabaseRequest request;

  _InfinityService_CreateDatabase_args__isset __isset;

  void __set_request(const CreateDatabaseRequest& val);

  bool operator == (const InfinityService_CreateDatabase_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_CreateDatabase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_CreateDatabase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_CreateDatabase_pargs {
 public:


  virtual ~InfinityService_CreateDatabase_pargs() noexcept;
  const CreateDatabaseRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_CreateDatabase_result__isset {
  _InfinityService_CreateDatabase_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_CreateDatabase_result__isset;

class InfinityService_CreateDatabase_result {
 public:

  InfinityService_CreateDatabase_result(const InfinityService_CreateDatabase_result&);
  InfinityService_CreateDatabase_result& operator=(const InfinityService_CreateDatabase_result&);
  InfinityService_CreateDatabase_result() noexcept {
  }

  virtual ~InfinityService_CreateDatabase_result() noexcept;
  CommonResponse success;

  _InfinityService_CreateDatabase_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_CreateDatabase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_CreateDatabase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_CreateDatabase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_CreateDatabase_presult__isset {
  _InfinityService_CreateDatabase_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_CreateDatabase_presult__isset;

class InfinityService_CreateDatabase_presult {
 public:


  virtual ~InfinityService_CreateDatabase_presult() noexcept;
  CommonResponse* success;

  _InfinityService_CreateDatabase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_DropDatabase_args__isset {
  _InfinityService_DropDatabase_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_DropDatabase_args__isset;

class InfinityService_DropDatabase_args {
 public:

  InfinityService_DropDatabase_args(const InfinityService_DropDatabase_args&);
  InfinityService_DropDatabase_args& operator=(const InfinityService_DropDatabase_args&);
  InfinityService_DropDatabase_args() noexcept {
  }

  virtual ~InfinityService_DropDatabase_args() noexcept;
  DropDatabaseRequest request;

  _InfinityService_DropDatabase_args__isset __isset;

  void __set_request(const DropDatabaseRequest& val);

  bool operator == (const InfinityService_DropDatabase_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_DropDatabase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_DropDatabase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_DropDatabase_pargs {
 public:


  virtual ~InfinityService_DropDatabase_pargs() noexcept;
  const DropDatabaseRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_DropDatabase_result__isset {
  _InfinityService_DropDatabase_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_DropDatabase_result__isset;

class InfinityService_DropDatabase_result {
 public:

  InfinityService_DropDatabase_result(const InfinityService_DropDatabase_result&);
  InfinityService_DropDatabase_result& operator=(const InfinityService_DropDatabase_result&);
  InfinityService_DropDatabase_result() noexcept {
  }

  virtual ~InfinityService_DropDatabase_result() noexcept;
  CommonResponse success;

  _InfinityService_DropDatabase_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_DropDatabase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_DropDatabase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_DropDatabase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_DropDatabase_presult__isset {
  _InfinityService_DropDatabase_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_DropDatabase_presult__isset;

class InfinityService_DropDatabase_presult {
 public:


  virtual ~InfinityService_DropDatabase_presult() noexcept;
  CommonResponse* success;

  _InfinityService_DropDatabase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_CreateTable_args__isset {
  _InfinityService_CreateTable_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_CreateTable_args__isset;

class InfinityService_CreateTable_args {
 public:

  InfinityService_CreateTable_args(const InfinityService_CreateTable_args&);
  InfinityService_CreateTable_args& operator=(const InfinityService_CreateTable_args&);
  InfinityService_CreateTable_args() noexcept {
  }

  virtual ~InfinityService_CreateTable_args() noexcept;
  CreateTableRequest request;

  _InfinityService_CreateTable_args__isset __isset;

  void __set_request(const CreateTableRequest& val);

  bool operator == (const InfinityService_CreateTable_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_CreateTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_CreateTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_CreateTable_pargs {
 public:


  virtual ~InfinityService_CreateTable_pargs() noexcept;
  const CreateTableRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_CreateTable_result__isset {
  _InfinityService_CreateTable_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_CreateTable_result__isset;

class InfinityService_CreateTable_result {
 public:

  InfinityService_CreateTable_result(const InfinityService_CreateTable_result&);
  InfinityService_CreateTable_result& operator=(const InfinityService_CreateTable_result&);
  InfinityService_CreateTable_result() noexcept {
  }

  virtual ~InfinityService_CreateTable_result() noexcept;
  CommonResponse success;

  _InfinityService_CreateTable_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_CreateTable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_CreateTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_CreateTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_CreateTable_presult__isset {
  _InfinityService_CreateTable_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_CreateTable_presult__isset;

class InfinityService_CreateTable_presult {
 public:


  virtual ~InfinityService_CreateTable_presult() noexcept;
  CommonResponse* success;

  _InfinityService_CreateTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_DropTable_args__isset {
  _InfinityService_DropTable_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_DropTable_args__isset;

class InfinityService_DropTable_args {
 public:

  InfinityService_DropTable_args(const InfinityService_DropTable_args&);
  InfinityService_DropTable_args& operator=(const InfinityService_DropTable_args&);
  InfinityService_DropTable_args() noexcept {
  }

  virtual ~InfinityService_DropTable_args() noexcept;
  DropTableRequest request;

  _InfinityService_DropTable_args__isset __isset;

  void __set_request(const DropTableRequest& val);

  bool operator == (const InfinityService_DropTable_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_DropTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_DropTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_DropTable_pargs {
 public:


  virtual ~InfinityService_DropTable_pargs() noexcept;
  const DropTableRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_DropTable_result__isset {
  _InfinityService_DropTable_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_DropTable_result__isset;

class InfinityService_DropTable_result {
 public:

  InfinityService_DropTable_result(const InfinityService_DropTable_result&);
  InfinityService_DropTable_result& operator=(const InfinityService_DropTable_result&);
  InfinityService_DropTable_result() noexcept {
  }

  virtual ~InfinityService_DropTable_result() noexcept;
  CommonResponse success;

  _InfinityService_DropTable_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_DropTable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_DropTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_DropTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_DropTable_presult__isset {
  _InfinityService_DropTable_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_DropTable_presult__isset;

class InfinityService_DropTable_presult {
 public:


  virtual ~InfinityService_DropTable_presult() noexcept;
  CommonResponse* success;

  _InfinityService_DropTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_Insert_args__isset {
  _InfinityService_Insert_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_Insert_args__isset;

class InfinityService_Insert_args {
 public:

  InfinityService_Insert_args(const InfinityService_Insert_args&);
  InfinityService_Insert_args& operator=(const InfinityService_Insert_args&);
  InfinityService_Insert_args() noexcept {
  }

  virtual ~InfinityService_Insert_args() noexcept;
  InsertRequest request;

  _InfinityService_Insert_args__isset __isset;

  void __set_request(const InsertRequest& val);

  bool operator == (const InfinityService_Insert_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_Insert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Insert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_Insert_pargs {
 public:


  virtual ~InfinityService_Insert_pargs() noexcept;
  const InsertRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Insert_result__isset {
  _InfinityService_Insert_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_Insert_result__isset;

class InfinityService_Insert_result {
 public:

  InfinityService_Insert_result(const InfinityService_Insert_result&);
  InfinityService_Insert_result& operator=(const InfinityService_Insert_result&);
  InfinityService_Insert_result() noexcept {
  }

  virtual ~InfinityService_Insert_result() noexcept;
  CommonResponse success;

  _InfinityService_Insert_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_Insert_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_Insert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Insert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Insert_presult__isset {
  _InfinityService_Insert_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_Insert_presult__isset;

class InfinityService_Insert_presult {
 public:


  virtual ~InfinityService_Insert_presult() noexcept;
  CommonResponse* success;

  _InfinityService_Insert_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_Import_args__isset {
  _InfinityService_Import_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_Import_args__isset;

class InfinityService_Import_args {
 public:

  InfinityService_Import_args(const InfinityService_Import_args&);
  InfinityService_Import_args& operator=(const InfinityService_Import_args&);
  InfinityService_Import_args() noexcept {
  }

  virtual ~InfinityService_Import_args() noexcept;
  ImportRequest request;

  _InfinityService_Import_args__isset __isset;

  void __set_request(const ImportRequest& val);

  bool operator == (const InfinityService_Import_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_Import_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Import_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_Import_pargs {
 public:


  virtual ~InfinityService_Import_pargs() noexcept;
  const ImportRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Import_result__isset {
  _InfinityService_Import_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_Import_result__isset;

class InfinityService_Import_result {
 public:

  InfinityService_Import_result(const InfinityService_Import_result&);
  InfinityService_Import_result& operator=(const InfinityService_Import_result&);
  InfinityService_Import_result() noexcept {
  }

  virtual ~InfinityService_Import_result() noexcept;
  CommonResponse success;

  _InfinityService_Import_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_Import_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_Import_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Import_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Import_presult__isset {
  _InfinityService_Import_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_Import_presult__isset;

class InfinityService_Import_presult {
 public:


  virtual ~InfinityService_Import_presult() noexcept;
  CommonResponse* success;

  _InfinityService_Import_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_Select_args__isset {
  _InfinityService_Select_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_Select_args__isset;

class InfinityService_Select_args {
 public:

  InfinityService_Select_args(const InfinityService_Select_args&);
  InfinityService_Select_args& operator=(const InfinityService_Select_args&);
  InfinityService_Select_args() noexcept {
  }

  virtual ~InfinityService_Select_args() noexcept;
  SelectRequest request;

  _InfinityService_Select_args__isset __isset;

  void __set_request(const SelectRequest& val);

  bool operator == (const InfinityService_Select_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_Select_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Select_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_Select_pargs {
 public:


  virtual ~InfinityService_Select_pargs() noexcept;
  const SelectRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Select_result__isset {
  _InfinityService_Select_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_Select_result__isset;

class InfinityService_Select_result {
 public:

  InfinityService_Select_result(const InfinityService_Select_result&);
  InfinityService_Select_result& operator=(const InfinityService_Select_result&);
  InfinityService_Select_result() noexcept {
  }

  virtual ~InfinityService_Select_result() noexcept;
  SelectResponse success;

  _InfinityService_Select_result__isset __isset;

  void __set_success(const SelectResponse& val);

  bool operator == (const InfinityService_Select_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_Select_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Select_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Select_presult__isset {
  _InfinityService_Select_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_Select_presult__isset;

class InfinityService_Select_presult {
 public:


  virtual ~InfinityService_Select_presult() noexcept;
  SelectResponse* success;

  _InfinityService_Select_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_Delete_args__isset {
  _InfinityService_Delete_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_Delete_args__isset;

class InfinityService_Delete_args {
 public:

  InfinityService_Delete_args(const InfinityService_Delete_args&);
  InfinityService_Delete_args& operator=(const InfinityService_Delete_args&);
  InfinityService_Delete_args() noexcept {
  }

  virtual ~InfinityService_Delete_args() noexcept;
  DeleteRequest request;

  _InfinityService_Delete_args__isset __isset;

  void __set_request(const DeleteRequest& val);

  bool operator == (const InfinityService_Delete_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_Delete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Delete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_Delete_pargs {
 public:


  virtual ~InfinityService_Delete_pargs() noexcept;
  const DeleteRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Delete_result__isset {
  _InfinityService_Delete_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_Delete_result__isset;

class InfinityService_Delete_result {
 public:

  InfinityService_Delete_result(const InfinityService_Delete_result&);
  InfinityService_Delete_result& operator=(const InfinityService_Delete_result&);
  InfinityService_Delete_result() noexcept {
  }

  virtual ~InfinityService_Delete_result() noexcept;
  CommonResponse success;

  _InfinityService_Delete_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_Delete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_Delete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Delete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Delete_presult__isset {
  _InfinityService_Delete_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_Delete_presult__isset;

class InfinityService_Delete_presult {
 public:


  virtual ~InfinityService_Delete_presult() noexcept;
  CommonResponse* success;

  _InfinityService_Delete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_Update_args__isset {
  _InfinityService_Update_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_Update_args__isset;

class InfinityService_Update_args {
 public:

  InfinityService_Update_args(const InfinityService_Update_args&);
  InfinityService_Update_args& operator=(const InfinityService_Update_args&);
  InfinityService_Update_args() noexcept {
  }

  virtual ~InfinityService_Update_args() noexcept;
  UpdateRequest request;

  _InfinityService_Update_args__isset __isset;

  void __set_request(const UpdateRequest& val);

  bool operator == (const InfinityService_Update_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_Update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_Update_pargs {
 public:


  virtual ~InfinityService_Update_pargs() noexcept;
  const UpdateRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Update_result__isset {
  _InfinityService_Update_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_Update_result__isset;

class InfinityService_Update_result {
 public:

  InfinityService_Update_result(const InfinityService_Update_result&);
  InfinityService_Update_result& operator=(const InfinityService_Update_result&);
  InfinityService_Update_result() noexcept {
  }

  virtual ~InfinityService_Update_result() noexcept;
  CommonResponse success;

  _InfinityService_Update_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_Update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_Update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_Update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_Update_presult__isset {
  _InfinityService_Update_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_Update_presult__isset;

class InfinityService_Update_presult {
 public:


  virtual ~InfinityService_Update_presult() noexcept;
  CommonResponse* success;

  _InfinityService_Update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_UploadFileChunk_args__isset {
  _InfinityService_UploadFileChunk_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_UploadFileChunk_args__isset;

class InfinityService_UploadFileChunk_args {
 public:

  InfinityService_UploadFileChunk_args(const InfinityService_UploadFileChunk_args&);
  InfinityService_UploadFileChunk_args& operator=(const InfinityService_UploadFileChunk_args&);
  InfinityService_UploadFileChunk_args() noexcept {
  }

  virtual ~InfinityService_UploadFileChunk_args() noexcept;
  FileChunk request;

  _InfinityService_UploadFileChunk_args__isset __isset;

  void __set_request(const FileChunk& val);

  bool operator == (const InfinityService_UploadFileChunk_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_UploadFileChunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_UploadFileChunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_UploadFileChunk_pargs {
 public:


  virtual ~InfinityService_UploadFileChunk_pargs() noexcept;
  const FileChunk* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_UploadFileChunk_result__isset {
  _InfinityService_UploadFileChunk_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_UploadFileChunk_result__isset;

class InfinityService_UploadFileChunk_result {
 public:

  InfinityService_UploadFileChunk_result(const InfinityService_UploadFileChunk_result&);
  InfinityService_UploadFileChunk_result& operator=(const InfinityService_UploadFileChunk_result&);
  InfinityService_UploadFileChunk_result() noexcept {
  }

  virtual ~InfinityService_UploadFileChunk_result() noexcept;
  UploadResponse success;

  _InfinityService_UploadFileChunk_result__isset __isset;

  void __set_success(const UploadResponse& val);

  bool operator == (const InfinityService_UploadFileChunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_UploadFileChunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_UploadFileChunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_UploadFileChunk_presult__isset {
  _InfinityService_UploadFileChunk_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_UploadFileChunk_presult__isset;

class InfinityService_UploadFileChunk_presult {
 public:


  virtual ~InfinityService_UploadFileChunk_presult() noexcept;
  UploadResponse* success;

  _InfinityService_UploadFileChunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_ListDatabase_args__isset {
  _InfinityService_ListDatabase_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_ListDatabase_args__isset;

class InfinityService_ListDatabase_args {
 public:

  InfinityService_ListDatabase_args(const InfinityService_ListDatabase_args&) noexcept;
  InfinityService_ListDatabase_args& operator=(const InfinityService_ListDatabase_args&) noexcept;
  InfinityService_ListDatabase_args() noexcept {
  }

  virtual ~InfinityService_ListDatabase_args() noexcept;
  ListDatabaseRequest request;

  _InfinityService_ListDatabase_args__isset __isset;

  void __set_request(const ListDatabaseRequest& val);

  bool operator == (const InfinityService_ListDatabase_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_ListDatabase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_ListDatabase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_ListDatabase_pargs {
 public:


  virtual ~InfinityService_ListDatabase_pargs() noexcept;
  const ListDatabaseRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_ListDatabase_result__isset {
  _InfinityService_ListDatabase_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_ListDatabase_result__isset;

class InfinityService_ListDatabase_result {
 public:

  InfinityService_ListDatabase_result(const InfinityService_ListDatabase_result&);
  InfinityService_ListDatabase_result& operator=(const InfinityService_ListDatabase_result&);
  InfinityService_ListDatabase_result() noexcept {
  }

  virtual ~InfinityService_ListDatabase_result() noexcept;
  ListDatabaseResponse success;

  _InfinityService_ListDatabase_result__isset __isset;

  void __set_success(const ListDatabaseResponse& val);

  bool operator == (const InfinityService_ListDatabase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_ListDatabase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_ListDatabase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_ListDatabase_presult__isset {
  _InfinityService_ListDatabase_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_ListDatabase_presult__isset;

class InfinityService_ListDatabase_presult {
 public:


  virtual ~InfinityService_ListDatabase_presult() noexcept;
  ListDatabaseResponse* success;

  _InfinityService_ListDatabase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_ListTable_args__isset {
  _InfinityService_ListTable_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_ListTable_args__isset;

class InfinityService_ListTable_args {
 public:

  InfinityService_ListTable_args(const InfinityService_ListTable_args&);
  InfinityService_ListTable_args& operator=(const InfinityService_ListTable_args&);
  InfinityService_ListTable_args() noexcept {
  }

  virtual ~InfinityService_ListTable_args() noexcept;
  ListTableRequest request;

  _InfinityService_ListTable_args__isset __isset;

  void __set_request(const ListTableRequest& val);

  bool operator == (const InfinityService_ListTable_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_ListTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_ListTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_ListTable_pargs {
 public:


  virtual ~InfinityService_ListTable_pargs() noexcept;
  const ListTableRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_ListTable_result__isset {
  _InfinityService_ListTable_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_ListTable_result__isset;

class InfinityService_ListTable_result {
 public:

  InfinityService_ListTable_result(const InfinityService_ListTable_result&);
  InfinityService_ListTable_result& operator=(const InfinityService_ListTable_result&);
  InfinityService_ListTable_result() noexcept {
  }

  virtual ~InfinityService_ListTable_result() noexcept;
  ListTableResponse success;

  _InfinityService_ListTable_result__isset __isset;

  void __set_success(const ListTableResponse& val);

  bool operator == (const InfinityService_ListTable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_ListTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_ListTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_ListTable_presult__isset {
  _InfinityService_ListTable_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_ListTable_presult__isset;

class InfinityService_ListTable_presult {
 public:


  virtual ~InfinityService_ListTable_presult() noexcept;
  ListTableResponse* success;

  _InfinityService_ListTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_DescribeDatabase_args__isset {
  _InfinityService_DescribeDatabase_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_DescribeDatabase_args__isset;

class InfinityService_DescribeDatabase_args {
 public:

  InfinityService_DescribeDatabase_args(const InfinityService_DescribeDatabase_args&);
  InfinityService_DescribeDatabase_args& operator=(const InfinityService_DescribeDatabase_args&);
  InfinityService_DescribeDatabase_args() noexcept {
  }

  virtual ~InfinityService_DescribeDatabase_args() noexcept;
  DescribeDatabaseRequest request;

  _InfinityService_DescribeDatabase_args__isset __isset;

  void __set_request(const DescribeDatabaseRequest& val);

  bool operator == (const InfinityService_DescribeDatabase_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_DescribeDatabase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_DescribeDatabase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_DescribeDatabase_pargs {
 public:


  virtual ~InfinityService_DescribeDatabase_pargs() noexcept;
  const DescribeDatabaseRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_DescribeDatabase_result__isset {
  _InfinityService_DescribeDatabase_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_DescribeDatabase_result__isset;

class InfinityService_DescribeDatabase_result {
 public:

  InfinityService_DescribeDatabase_result(const InfinityService_DescribeDatabase_result&);
  InfinityService_DescribeDatabase_result& operator=(const InfinityService_DescribeDatabase_result&);
  InfinityService_DescribeDatabase_result() noexcept {
  }

  virtual ~InfinityService_DescribeDatabase_result() noexcept;
  DescribeDatabaseResponse success;

  _InfinityService_DescribeDatabase_result__isset __isset;

  void __set_success(const DescribeDatabaseResponse& val);

  bool operator == (const InfinityService_DescribeDatabase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_DescribeDatabase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_DescribeDatabase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_DescribeDatabase_presult__isset {
  _InfinityService_DescribeDatabase_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_DescribeDatabase_presult__isset;

class InfinityService_DescribeDatabase_presult {
 public:


  virtual ~InfinityService_DescribeDatabase_presult() noexcept;
  DescribeDatabaseResponse* success;

  _InfinityService_DescribeDatabase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_DescribeTable_args__isset {
  _InfinityService_DescribeTable_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_DescribeTable_args__isset;

class InfinityService_DescribeTable_args {
 public:

  InfinityService_DescribeTable_args(const InfinityService_DescribeTable_args&);
  InfinityService_DescribeTable_args& operator=(const InfinityService_DescribeTable_args&);
  InfinityService_DescribeTable_args() noexcept {
  }

  virtual ~InfinityService_DescribeTable_args() noexcept;
  DescribeTableRequest request;

  _InfinityService_DescribeTable_args__isset __isset;

  void __set_request(const DescribeTableRequest& val);

  bool operator == (const InfinityService_DescribeTable_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_DescribeTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_DescribeTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_DescribeTable_pargs {
 public:


  virtual ~InfinityService_DescribeTable_pargs() noexcept;
  const DescribeTableRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_DescribeTable_result__isset {
  _InfinityService_DescribeTable_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_DescribeTable_result__isset;

class InfinityService_DescribeTable_result {
 public:

  InfinityService_DescribeTable_result(const InfinityService_DescribeTable_result&);
  InfinityService_DescribeTable_result& operator=(const InfinityService_DescribeTable_result&);
  InfinityService_DescribeTable_result() noexcept {
  }

  virtual ~InfinityService_DescribeTable_result() noexcept;
  DescribeTableResponse success;

  _InfinityService_DescribeTable_result__isset __isset;

  void __set_success(const DescribeTableResponse& val);

  bool operator == (const InfinityService_DescribeTable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_DescribeTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_DescribeTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_DescribeTable_presult__isset {
  _InfinityService_DescribeTable_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_DescribeTable_presult__isset;

class InfinityService_DescribeTable_presult {
 public:


  virtual ~InfinityService_DescribeTable_presult() noexcept;
  DescribeTableResponse* success;

  _InfinityService_DescribeTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_GetDatabase_args__isset {
  _InfinityService_GetDatabase_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_GetDatabase_args__isset;

class InfinityService_GetDatabase_args {
 public:

  InfinityService_GetDatabase_args(const InfinityService_GetDatabase_args&);
  InfinityService_GetDatabase_args& operator=(const InfinityService_GetDatabase_args&);
  InfinityService_GetDatabase_args() noexcept {
  }

  virtual ~InfinityService_GetDatabase_args() noexcept;
  GetDatabaseRequest request;

  _InfinityService_GetDatabase_args__isset __isset;

  void __set_request(const GetDatabaseRequest& val);

  bool operator == (const InfinityService_GetDatabase_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_GetDatabase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_GetDatabase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_GetDatabase_pargs {
 public:


  virtual ~InfinityService_GetDatabase_pargs() noexcept;
  const GetDatabaseRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_GetDatabase_result__isset {
  _InfinityService_GetDatabase_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_GetDatabase_result__isset;

class InfinityService_GetDatabase_result {
 public:

  InfinityService_GetDatabase_result(const InfinityService_GetDatabase_result&);
  InfinityService_GetDatabase_result& operator=(const InfinityService_GetDatabase_result&);
  InfinityService_GetDatabase_result() noexcept {
  }

  virtual ~InfinityService_GetDatabase_result() noexcept;
  CommonResponse success;

  _InfinityService_GetDatabase_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_GetDatabase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_GetDatabase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_GetDatabase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_GetDatabase_presult__isset {
  _InfinityService_GetDatabase_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_GetDatabase_presult__isset;

class InfinityService_GetDatabase_presult {
 public:


  virtual ~InfinityService_GetDatabase_presult() noexcept;
  CommonResponse* success;

  _InfinityService_GetDatabase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_GetTable_args__isset {
  _InfinityService_GetTable_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_GetTable_args__isset;

class InfinityService_GetTable_args {
 public:

  InfinityService_GetTable_args(const InfinityService_GetTable_args&);
  InfinityService_GetTable_args& operator=(const InfinityService_GetTable_args&);
  InfinityService_GetTable_args() noexcept {
  }

  virtual ~InfinityService_GetTable_args() noexcept;
  GetTableRequest request;

  _InfinityService_GetTable_args__isset __isset;

  void __set_request(const GetTableRequest& val);

  bool operator == (const InfinityService_GetTable_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_GetTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_GetTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_GetTable_pargs {
 public:


  virtual ~InfinityService_GetTable_pargs() noexcept;
  const GetTableRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_GetTable_result__isset {
  _InfinityService_GetTable_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_GetTable_result__isset;

class InfinityService_GetTable_result {
 public:

  InfinityService_GetTable_result(const InfinityService_GetTable_result&);
  InfinityService_GetTable_result& operator=(const InfinityService_GetTable_result&);
  InfinityService_GetTable_result() noexcept {
  }

  virtual ~InfinityService_GetTable_result() noexcept;
  CommonResponse success;

  _InfinityService_GetTable_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_GetTable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_GetTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_GetTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_GetTable_presult__isset {
  _InfinityService_GetTable_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_GetTable_presult__isset;

class InfinityService_GetTable_presult {
 public:


  virtual ~InfinityService_GetTable_presult() noexcept;
  CommonResponse* success;

  _InfinityService_GetTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_CreateIndex_args__isset {
  _InfinityService_CreateIndex_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_CreateIndex_args__isset;

class InfinityService_CreateIndex_args {
 public:

  InfinityService_CreateIndex_args(const InfinityService_CreateIndex_args&);
  InfinityService_CreateIndex_args& operator=(const InfinityService_CreateIndex_args&);
  InfinityService_CreateIndex_args() noexcept {
  }

  virtual ~InfinityService_CreateIndex_args() noexcept;
  CreateIndexRequest request;

  _InfinityService_CreateIndex_args__isset __isset;

  void __set_request(const CreateIndexRequest& val);

  bool operator == (const InfinityService_CreateIndex_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_CreateIndex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_CreateIndex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_CreateIndex_pargs {
 public:


  virtual ~InfinityService_CreateIndex_pargs() noexcept;
  const CreateIndexRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_CreateIndex_result__isset {
  _InfinityService_CreateIndex_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_CreateIndex_result__isset;

class InfinityService_CreateIndex_result {
 public:

  InfinityService_CreateIndex_result(const InfinityService_CreateIndex_result&);
  InfinityService_CreateIndex_result& operator=(const InfinityService_CreateIndex_result&);
  InfinityService_CreateIndex_result() noexcept {
  }

  virtual ~InfinityService_CreateIndex_result() noexcept;
  CommonResponse success;

  _InfinityService_CreateIndex_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_CreateIndex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_CreateIndex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_CreateIndex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_CreateIndex_presult__isset {
  _InfinityService_CreateIndex_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_CreateIndex_presult__isset;

class InfinityService_CreateIndex_presult {
 public:


  virtual ~InfinityService_CreateIndex_presult() noexcept;
  CommonResponse* success;

  _InfinityService_CreateIndex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InfinityService_DropIndex_args__isset {
  _InfinityService_DropIndex_args__isset() : request(false) {}
  bool request :1;
} _InfinityService_DropIndex_args__isset;

class InfinityService_DropIndex_args {
 public:

  InfinityService_DropIndex_args(const InfinityService_DropIndex_args&);
  InfinityService_DropIndex_args& operator=(const InfinityService_DropIndex_args&);
  InfinityService_DropIndex_args() noexcept {
  }

  virtual ~InfinityService_DropIndex_args() noexcept;
  DropIndexRequest request;

  _InfinityService_DropIndex_args__isset __isset;

  void __set_request(const DropIndexRequest& val);

  bool operator == (const InfinityService_DropIndex_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const InfinityService_DropIndex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_DropIndex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InfinityService_DropIndex_pargs {
 public:


  virtual ~InfinityService_DropIndex_pargs() noexcept;
  const DropIndexRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_DropIndex_result__isset {
  _InfinityService_DropIndex_result__isset() : success(false) {}
  bool success :1;
} _InfinityService_DropIndex_result__isset;

class InfinityService_DropIndex_result {
 public:

  InfinityService_DropIndex_result(const InfinityService_DropIndex_result&);
  InfinityService_DropIndex_result& operator=(const InfinityService_DropIndex_result&);
  InfinityService_DropIndex_result() noexcept {
  }

  virtual ~InfinityService_DropIndex_result() noexcept;
  CommonResponse success;

  _InfinityService_DropIndex_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const InfinityService_DropIndex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InfinityService_DropIndex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InfinityService_DropIndex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InfinityService_DropIndex_presult__isset {
  _InfinityService_DropIndex_presult__isset() : success(false) {}
  bool success :1;
} _InfinityService_DropIndex_presult__isset;

class InfinityService_DropIndex_presult {
 public:


  virtual ~InfinityService_DropIndex_presult() noexcept;
  CommonResponse* success;

  _InfinityService_DropIndex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class InfinityServiceClient : virtual public InfinityServiceIf {
 public:
  InfinityServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  InfinityServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Connect(CommonResponse& _return) override;
  void send_Connect();
  void recv_Connect(CommonResponse& _return);
  void Disconnect(CommonResponse& _return, const CommonRequest& request) override;
  void send_Disconnect(const CommonRequest& request);
  void recv_Disconnect(CommonResponse& _return);
  void CreateDatabase(CommonResponse& _return, const CreateDatabaseRequest& request) override;
  void send_CreateDatabase(const CreateDatabaseRequest& request);
  void recv_CreateDatabase(CommonResponse& _return);
  void DropDatabase(CommonResponse& _return, const DropDatabaseRequest& request) override;
  void send_DropDatabase(const DropDatabaseRequest& request);
  void recv_DropDatabase(CommonResponse& _return);
  void CreateTable(CommonResponse& _return, const CreateTableRequest& request) override;
  void send_CreateTable(const CreateTableRequest& request);
  void recv_CreateTable(CommonResponse& _return);
  void DropTable(CommonResponse& _return, const DropTableRequest& request) override;
  void send_DropTable(const DropTableRequest& request);
  void recv_DropTable(CommonResponse& _return);
  void Insert(CommonResponse& _return, const InsertRequest& request) override;
  void send_Insert(const InsertRequest& request);
  void recv_Insert(CommonResponse& _return);
  void Import(CommonResponse& _return, const ImportRequest& request) override;
  void send_Import(const ImportRequest& request);
  void recv_Import(CommonResponse& _return);
  void Select(SelectResponse& _return, const SelectRequest& request) override;
  void send_Select(const SelectRequest& request);
  void recv_Select(SelectResponse& _return);
  void Delete(CommonResponse& _return, const DeleteRequest& request) override;
  void send_Delete(const DeleteRequest& request);
  void recv_Delete(CommonResponse& _return);
  void Update(CommonResponse& _return, const UpdateRequest& request) override;
  void send_Update(const UpdateRequest& request);
  void recv_Update(CommonResponse& _return);
  void UploadFileChunk(UploadResponse& _return, const FileChunk& request) override;
  void send_UploadFileChunk(const FileChunk& request);
  void recv_UploadFileChunk(UploadResponse& _return);
  void ListDatabase(ListDatabaseResponse& _return, const ListDatabaseRequest& request) override;
  void send_ListDatabase(const ListDatabaseRequest& request);
  void recv_ListDatabase(ListDatabaseResponse& _return);
  void ListTable(ListTableResponse& _return, const ListTableRequest& request) override;
  void send_ListTable(const ListTableRequest& request);
  void recv_ListTable(ListTableResponse& _return);
  void DescribeDatabase(DescribeDatabaseResponse& _return, const DescribeDatabaseRequest& request) override;
  void send_DescribeDatabase(const DescribeDatabaseRequest& request);
  void recv_DescribeDatabase(DescribeDatabaseResponse& _return);
  void DescribeTable(DescribeTableResponse& _return, const DescribeTableRequest& request) override;
  void send_DescribeTable(const DescribeTableRequest& request);
  void recv_DescribeTable(DescribeTableResponse& _return);
  void GetDatabase(CommonResponse& _return, const GetDatabaseRequest& request) override;
  void send_GetDatabase(const GetDatabaseRequest& request);
  void recv_GetDatabase(CommonResponse& _return);
  void GetTable(CommonResponse& _return, const GetTableRequest& request) override;
  void send_GetTable(const GetTableRequest& request);
  void recv_GetTable(CommonResponse& _return);
  void CreateIndex(CommonResponse& _return, const CreateIndexRequest& request) override;
  void send_CreateIndex(const CreateIndexRequest& request);
  void recv_CreateIndex(CommonResponse& _return);
  void DropIndex(CommonResponse& _return, const DropIndexRequest& request) override;
  void send_DropIndex(const DropIndexRequest& request);
  void recv_DropIndex(CommonResponse& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class InfinityServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<InfinityServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (InfinityServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Connect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Disconnect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateDatabase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DropDatabase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DropTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Insert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Import(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Select(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UploadFileChunk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ListDatabase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ListTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DescribeDatabase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DescribeTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetDatabase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateIndex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DropIndex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  InfinityServiceProcessor(::std::shared_ptr<InfinityServiceIf> iface) :
    iface_(iface) {
    processMap_["Connect"] = &InfinityServiceProcessor::process_Connect;
    processMap_["Disconnect"] = &InfinityServiceProcessor::process_Disconnect;
    processMap_["CreateDatabase"] = &InfinityServiceProcessor::process_CreateDatabase;
    processMap_["DropDatabase"] = &InfinityServiceProcessor::process_DropDatabase;
    processMap_["CreateTable"] = &InfinityServiceProcessor::process_CreateTable;
    processMap_["DropTable"] = &InfinityServiceProcessor::process_DropTable;
    processMap_["Insert"] = &InfinityServiceProcessor::process_Insert;
    processMap_["Import"] = &InfinityServiceProcessor::process_Import;
    processMap_["Select"] = &InfinityServiceProcessor::process_Select;
    processMap_["Delete"] = &InfinityServiceProcessor::process_Delete;
    processMap_["Update"] = &InfinityServiceProcessor::process_Update;
    processMap_["UploadFileChunk"] = &InfinityServiceProcessor::process_UploadFileChunk;
    processMap_["ListDatabase"] = &InfinityServiceProcessor::process_ListDatabase;
    processMap_["ListTable"] = &InfinityServiceProcessor::process_ListTable;
    processMap_["DescribeDatabase"] = &InfinityServiceProcessor::process_DescribeDatabase;
    processMap_["DescribeTable"] = &InfinityServiceProcessor::process_DescribeTable;
    processMap_["GetDatabase"] = &InfinityServiceProcessor::process_GetDatabase;
    processMap_["GetTable"] = &InfinityServiceProcessor::process_GetTable;
    processMap_["CreateIndex"] = &InfinityServiceProcessor::process_CreateIndex;
    processMap_["DropIndex"] = &InfinityServiceProcessor::process_DropIndex;
  }

  virtual ~InfinityServiceProcessor() {}
};

class InfinityServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  InfinityServiceProcessorFactory(const ::std::shared_ptr< InfinityServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< InfinityServiceIfFactory > handlerFactory_;
};

class InfinityServiceMultiface : virtual public InfinityServiceIf {
 public:
  InfinityServiceMultiface(std::vector<std::shared_ptr<InfinityServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~InfinityServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<InfinityServiceIf> > ifaces_;
  InfinityServiceMultiface() {}
  void add(::std::shared_ptr<InfinityServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Connect(CommonResponse& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Connect(_return);
    }
    ifaces_[i]->Connect(_return);
    return;
  }

  void Disconnect(CommonResponse& _return, const CommonRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Disconnect(_return, request);
    }
    ifaces_[i]->Disconnect(_return, request);
    return;
  }

  void CreateDatabase(CommonResponse& _return, const CreateDatabaseRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateDatabase(_return, request);
    }
    ifaces_[i]->CreateDatabase(_return, request);
    return;
  }

  void DropDatabase(CommonResponse& _return, const DropDatabaseRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DropDatabase(_return, request);
    }
    ifaces_[i]->DropDatabase(_return, request);
    return;
  }

  void CreateTable(CommonResponse& _return, const CreateTableRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateTable(_return, request);
    }
    ifaces_[i]->CreateTable(_return, request);
    return;
  }

  void DropTable(CommonResponse& _return, const DropTableRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DropTable(_return, request);
    }
    ifaces_[i]->DropTable(_return, request);
    return;
  }

  void Insert(CommonResponse& _return, const InsertRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Insert(_return, request);
    }
    ifaces_[i]->Insert(_return, request);
    return;
  }

  void Import(CommonResponse& _return, const ImportRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Import(_return, request);
    }
    ifaces_[i]->Import(_return, request);
    return;
  }

  void Select(SelectResponse& _return, const SelectRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Select(_return, request);
    }
    ifaces_[i]->Select(_return, request);
    return;
  }

  void Delete(CommonResponse& _return, const DeleteRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Delete(_return, request);
    }
    ifaces_[i]->Delete(_return, request);
    return;
  }

  void Update(CommonResponse& _return, const UpdateRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Update(_return, request);
    }
    ifaces_[i]->Update(_return, request);
    return;
  }

  void UploadFileChunk(UploadResponse& _return, const FileChunk& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadFileChunk(_return, request);
    }
    ifaces_[i]->UploadFileChunk(_return, request);
    return;
  }

  void ListDatabase(ListDatabaseResponse& _return, const ListDatabaseRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ListDatabase(_return, request);
    }
    ifaces_[i]->ListDatabase(_return, request);
    return;
  }

  void ListTable(ListTableResponse& _return, const ListTableRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ListTable(_return, request);
    }
    ifaces_[i]->ListTable(_return, request);
    return;
  }

  void DescribeDatabase(DescribeDatabaseResponse& _return, const DescribeDatabaseRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DescribeDatabase(_return, request);
    }
    ifaces_[i]->DescribeDatabase(_return, request);
    return;
  }

  void DescribeTable(DescribeTableResponse& _return, const DescribeTableRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DescribeTable(_return, request);
    }
    ifaces_[i]->DescribeTable(_return, request);
    return;
  }

  void GetDatabase(CommonResponse& _return, const GetDatabaseRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetDatabase(_return, request);
    }
    ifaces_[i]->GetDatabase(_return, request);
    return;
  }

  void GetTable(CommonResponse& _return, const GetTableRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTable(_return, request);
    }
    ifaces_[i]->GetTable(_return, request);
    return;
  }

  void CreateIndex(CommonResponse& _return, const CreateIndexRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateIndex(_return, request);
    }
    ifaces_[i]->CreateIndex(_return, request);
    return;
  }

  void DropIndex(CommonResponse& _return, const DropIndexRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DropIndex(_return, request);
    }
    ifaces_[i]->DropIndex(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class InfinityServiceConcurrentClient : virtual public InfinityServiceIf {
 public:
  InfinityServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  InfinityServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Connect(CommonResponse& _return) override;
  int32_t send_Connect();
  void recv_Connect(CommonResponse& _return, const int32_t seqid);
  void Disconnect(CommonResponse& _return, const CommonRequest& request) override;
  int32_t send_Disconnect(const CommonRequest& request);
  void recv_Disconnect(CommonResponse& _return, const int32_t seqid);
  void CreateDatabase(CommonResponse& _return, const CreateDatabaseRequest& request) override;
  int32_t send_CreateDatabase(const CreateDatabaseRequest& request);
  void recv_CreateDatabase(CommonResponse& _return, const int32_t seqid);
  void DropDatabase(CommonResponse& _return, const DropDatabaseRequest& request) override;
  int32_t send_DropDatabase(const DropDatabaseRequest& request);
  void recv_DropDatabase(CommonResponse& _return, const int32_t seqid);
  void CreateTable(CommonResponse& _return, const CreateTableRequest& request) override;
  int32_t send_CreateTable(const CreateTableRequest& request);
  void recv_CreateTable(CommonResponse& _return, const int32_t seqid);
  void DropTable(CommonResponse& _return, const DropTableRequest& request) override;
  int32_t send_DropTable(const DropTableRequest& request);
  void recv_DropTable(CommonResponse& _return, const int32_t seqid);
  void Insert(CommonResponse& _return, const InsertRequest& request) override;
  int32_t send_Insert(const InsertRequest& request);
  void recv_Insert(CommonResponse& _return, const int32_t seqid);
  void Import(CommonResponse& _return, const ImportRequest& request) override;
  int32_t send_Import(const ImportRequest& request);
  void recv_Import(CommonResponse& _return, const int32_t seqid);
  void Select(SelectResponse& _return, const SelectRequest& request) override;
  int32_t send_Select(const SelectRequest& request);
  void recv_Select(SelectResponse& _return, const int32_t seqid);
  void Delete(CommonResponse& _return, const DeleteRequest& request) override;
  int32_t send_Delete(const DeleteRequest& request);
  void recv_Delete(CommonResponse& _return, const int32_t seqid);
  void Update(CommonResponse& _return, const UpdateRequest& request) override;
  int32_t send_Update(const UpdateRequest& request);
  void recv_Update(CommonResponse& _return, const int32_t seqid);
  void UploadFileChunk(UploadResponse& _return, const FileChunk& request) override;
  int32_t send_UploadFileChunk(const FileChunk& request);
  void recv_UploadFileChunk(UploadResponse& _return, const int32_t seqid);
  void ListDatabase(ListDatabaseResponse& _return, const ListDatabaseRequest& request) override;
  int32_t send_ListDatabase(const ListDatabaseRequest& request);
  void recv_ListDatabase(ListDatabaseResponse& _return, const int32_t seqid);
  void ListTable(ListTableResponse& _return, const ListTableRequest& request) override;
  int32_t send_ListTable(const ListTableRequest& request);
  void recv_ListTable(ListTableResponse& _return, const int32_t seqid);
  void DescribeDatabase(DescribeDatabaseResponse& _return, const DescribeDatabaseRequest& request) override;
  int32_t send_DescribeDatabase(const DescribeDatabaseRequest& request);
  void recv_DescribeDatabase(DescribeDatabaseResponse& _return, const int32_t seqid);
  void DescribeTable(DescribeTableResponse& _return, const DescribeTableRequest& request) override;
  int32_t send_DescribeTable(const DescribeTableRequest& request);
  void recv_DescribeTable(DescribeTableResponse& _return, const int32_t seqid);
  void GetDatabase(CommonResponse& _return, const GetDatabaseRequest& request) override;
  int32_t send_GetDatabase(const GetDatabaseRequest& request);
  void recv_GetDatabase(CommonResponse& _return, const int32_t seqid);
  void GetTable(CommonResponse& _return, const GetTableRequest& request) override;
  int32_t send_GetTable(const GetTableRequest& request);
  void recv_GetTable(CommonResponse& _return, const int32_t seqid);
  void CreateIndex(CommonResponse& _return, const CreateIndexRequest& request) override;
  int32_t send_CreateIndex(const CreateIndexRequest& request);
  void recv_CreateIndex(CommonResponse& _return, const int32_t seqid);
  void DropIndex(CommonResponse& _return, const DropIndexRequest& request) override;
  int32_t send_DropIndex(const DropIndexRequest& request);
  void recv_DropIndex(CommonResponse& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
