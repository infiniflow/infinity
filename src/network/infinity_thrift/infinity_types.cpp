/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "infinity_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace infinity_thrift_rpc {

int _kLogicTypeValues[] = {
  LogicType::Boolean,
  LogicType::TinyInt,
  LogicType::SmallInt,
  LogicType::Integer,
  LogicType::BigInt,
  LogicType::HugeInt,
  LogicType::Decimal,
  LogicType::Float,
  LogicType::Double,
  LogicType::Float16,
  LogicType::BFloat16,
  LogicType::Varchar,
  LogicType::Embedding,
  LogicType::Tensor,
  LogicType::TensorArray,
  LogicType::Sparse,
  LogicType::MultiVector,
  LogicType::Invalid
};
const char* _kLogicTypeNames[] = {
  "Boolean",
  "TinyInt",
  "SmallInt",
  "Integer",
  "BigInt",
  "HugeInt",
  "Decimal",
  "Float",
  "Double",
  "Float16",
  "BFloat16",
  "Varchar",
  "Embedding",
  "Tensor",
  "TensorArray",
  "Sparse",
  "MultiVector",
  "Invalid"
};
const std::map<int, const char*> _LogicType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(18, _kLogicTypeValues, _kLogicTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const LogicType::type& val) {
  std::map<int, const char*>::const_iterator it = _LogicType_VALUES_TO_NAMES.find(val);
  if (it != _LogicType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const LogicType::type& val) {
  std::map<int, const char*>::const_iterator it = _LogicType_VALUES_TO_NAMES.find(val);
  if (it != _LogicType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kCreateConflictValues[] = {
  CreateConflict::Ignore,
  CreateConflict::Error,
  CreateConflict::Replace
};
const char* _kCreateConflictNames[] = {
  "Ignore",
  "Error",
  "Replace"
};
const std::map<int, const char*> _CreateConflict_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCreateConflictValues, _kCreateConflictNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const CreateConflict::type& val) {
  std::map<int, const char*>::const_iterator it = _CreateConflict_VALUES_TO_NAMES.find(val);
  if (it != _CreateConflict_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const CreateConflict::type& val) {
  std::map<int, const char*>::const_iterator it = _CreateConflict_VALUES_TO_NAMES.find(val);
  if (it != _CreateConflict_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kDropConflictValues[] = {
  DropConflict::Ignore,
  DropConflict::Error
};
const char* _kDropConflictNames[] = {
  "Ignore",
  "Error"
};
const std::map<int, const char*> _DropConflict_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kDropConflictValues, _kDropConflictNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const DropConflict::type& val) {
  std::map<int, const char*>::const_iterator it = _DropConflict_VALUES_TO_NAMES.find(val);
  if (it != _DropConflict_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const DropConflict::type& val) {
  std::map<int, const char*>::const_iterator it = _DropConflict_VALUES_TO_NAMES.find(val);
  if (it != _DropConflict_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kElementTypeValues[] = {
  ElementType::ElementBit,
  ElementType::ElementUInt8,
  ElementType::ElementInt8,
  ElementType::ElementInt16,
  ElementType::ElementInt32,
  ElementType::ElementInt64,
  ElementType::ElementFloat32,
  ElementType::ElementFloat64,
  ElementType::ElementFloat16,
  ElementType::ElementBFloat16
};
const char* _kElementTypeNames[] = {
  "ElementBit",
  "ElementUInt8",
  "ElementInt8",
  "ElementInt16",
  "ElementInt32",
  "ElementInt64",
  "ElementFloat32",
  "ElementFloat64",
  "ElementFloat16",
  "ElementBFloat16"
};
const std::map<int, const char*> _ElementType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kElementTypeValues, _kElementTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const ElementType::type& val) {
  std::map<int, const char*>::const_iterator it = _ElementType_VALUES_TO_NAMES.find(val);
  if (it != _ElementType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ElementType::type& val) {
  std::map<int, const char*>::const_iterator it = _ElementType_VALUES_TO_NAMES.find(val);
  if (it != _ElementType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kConstraintValues[] = {
  Constraint::PrimaryKey,
  Constraint::NotNull,
  Constraint::Null,
  Constraint::Unique
};
const char* _kConstraintNames[] = {
  "PrimaryKey",
  "NotNull",
  "Null",
  "Unique"
};
const std::map<int, const char*> _Constraint_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kConstraintValues, _kConstraintNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const Constraint::type& val) {
  std::map<int, const char*>::const_iterator it = _Constraint_VALUES_TO_NAMES.find(val);
  if (it != _Constraint_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const Constraint::type& val) {
  std::map<int, const char*>::const_iterator it = _Constraint_VALUES_TO_NAMES.find(val);
  if (it != _Constraint_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kLiteralTypeValues[] = {
  LiteralType::Boolean,
  LiteralType::Double,
  LiteralType::String,
  LiteralType::Int64,
  LiteralType::Null,
  LiteralType::IntegerArray,
  LiteralType::DoubleArray,
  LiteralType::IntegerTensor,
  LiteralType::DoubleTensor,
  LiteralType::IntegerTensorArray,
  LiteralType::DoubleTensorArray,
  LiteralType::SparseIntegerArray,
  LiteralType::SparseDoubleArray
};
const char* _kLiteralTypeNames[] = {
  "Boolean",
  "Double",
  "String",
  "Int64",
  "Null",
  "IntegerArray",
  "DoubleArray",
  "IntegerTensor",
  "DoubleTensor",
  "IntegerTensorArray",
  "DoubleTensorArray",
  "SparseIntegerArray",
  "SparseDoubleArray"
};
const std::map<int, const char*> _LiteralType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kLiteralTypeValues, _kLiteralTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const LiteralType::type& val) {
  std::map<int, const char*>::const_iterator it = _LiteralType_VALUES_TO_NAMES.find(val);
  if (it != _LiteralType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const LiteralType::type& val) {
  std::map<int, const char*>::const_iterator it = _LiteralType_VALUES_TO_NAMES.find(val);
  if (it != _LiteralType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kKnnDistanceTypeValues[] = {
  KnnDistanceType::L2,
  KnnDistanceType::Cosine,
  KnnDistanceType::InnerProduct,
  KnnDistanceType::Hamming
};
const char* _kKnnDistanceTypeNames[] = {
  "L2",
  "Cosine",
  "InnerProduct",
  "Hamming"
};
const std::map<int, const char*> _KnnDistanceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kKnnDistanceTypeValues, _kKnnDistanceTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const KnnDistanceType::type& val) {
  std::map<int, const char*>::const_iterator it = _KnnDistanceType_VALUES_TO_NAMES.find(val);
  if (it != _KnnDistanceType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const KnnDistanceType::type& val) {
  std::map<int, const char*>::const_iterator it = _KnnDistanceType_VALUES_TO_NAMES.find(val);
  if (it != _KnnDistanceType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kCopyFileTypeValues[] = {
  CopyFileType::CSV,
  CopyFileType::JSON,
  CopyFileType::JSONL,
  CopyFileType::FVECS,
  CopyFileType::CSR,
  CopyFileType::BVECS
};
const char* _kCopyFileTypeNames[] = {
  "CSV",
  "JSON",
  "JSONL",
  "FVECS",
  "CSR",
  "BVECS"
};
const std::map<int, const char*> _CopyFileType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kCopyFileTypeValues, _kCopyFileTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const CopyFileType::type& val) {
  std::map<int, const char*>::const_iterator it = _CopyFileType_VALUES_TO_NAMES.find(val);
  if (it != _CopyFileType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const CopyFileType::type& val) {
  std::map<int, const char*>::const_iterator it = _CopyFileType_VALUES_TO_NAMES.find(val);
  if (it != _CopyFileType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kColumnTypeValues[] = {
  ColumnType::ColumnBool,
  ColumnType::ColumnInt8,
  ColumnType::ColumnInt16,
  ColumnType::ColumnInt32,
  ColumnType::ColumnInt64,
  ColumnType::ColumnFloat32,
  ColumnType::ColumnFloat64,
  ColumnType::ColumnFloat16,
  ColumnType::ColumnBFloat16,
  ColumnType::ColumnVarchar,
  ColumnType::ColumnEmbedding,
  ColumnType::ColumnTensor,
  ColumnType::ColumnTensorArray,
  ColumnType::ColumnSparse,
  ColumnType::ColumnMultiVector,
  ColumnType::ColumnRowID,
  ColumnType::ColumnInvalid
};
const char* _kColumnTypeNames[] = {
  "ColumnBool",
  "ColumnInt8",
  "ColumnInt16",
  "ColumnInt32",
  "ColumnInt64",
  "ColumnFloat32",
  "ColumnFloat64",
  "ColumnFloat16",
  "ColumnBFloat16",
  "ColumnVarchar",
  "ColumnEmbedding",
  "ColumnTensor",
  "ColumnTensorArray",
  "ColumnSparse",
  "ColumnMultiVector",
  "ColumnRowID",
  "ColumnInvalid"
};
const std::map<int, const char*> _ColumnType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(17, _kColumnTypeValues, _kColumnTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const ColumnType::type& val) {
  std::map<int, const char*>::const_iterator it = _ColumnType_VALUES_TO_NAMES.find(val);
  if (it != _ColumnType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ColumnType::type& val) {
  std::map<int, const char*>::const_iterator it = _ColumnType_VALUES_TO_NAMES.find(val);
  if (it != _ColumnType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kIndexTypeValues[] = {
  IndexType::IVFFlat,
  IndexType::Hnsw,
  IndexType::FullText,
  IndexType::BMP,
  IndexType::Secondary,
  IndexType::EMVB,
  IndexType::DiskAnn
};
const char* _kIndexTypeNames[] = {
  "IVFFlat",
  "Hnsw",
  "FullText",
  "BMP",
  "Secondary",
  "EMVB",
  "DiskAnn"
};
const std::map<int, const char*> _IndexType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kIndexTypeValues, _kIndexTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const IndexType::type& val) {
  std::map<int, const char*>::const_iterator it = _IndexType_VALUES_TO_NAMES.find(val);
  if (it != _IndexType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const IndexType::type& val) {
  std::map<int, const char*>::const_iterator it = _IndexType_VALUES_TO_NAMES.find(val);
  if (it != _IndexType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kExplainTypeValues[] = {
  ExplainType::Analyze,
  ExplainType::Ast,
  ExplainType::UnOpt,
  ExplainType::Opt,
  ExplainType::Physical,
  ExplainType::Pipeline,
  ExplainType::Fragment
};
const char* _kExplainTypeNames[] = {
  "Analyze",
  "Ast",
  "UnOpt",
  "Opt",
  "Physical",
  "Pipeline",
  "Fragment"
};
const std::map<int, const char*> _ExplainType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kExplainTypeValues, _kExplainTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const ExplainType::type& val) {
  std::map<int, const char*>::const_iterator it = _ExplainType_VALUES_TO_NAMES.find(val);
  if (it != _ExplainType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ExplainType::type& val) {
  std::map<int, const char*>::const_iterator it = _ExplainType_VALUES_TO_NAMES.find(val);
  if (it != _ExplainType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


Property::~Property() noexcept {
}


void Property::__set_key(const std::string& val) {
  this->key = val;
}

void Property::__set_value(const std::string& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const Property& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Property::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Property::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Property");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Property &a, Property &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

Property::Property(const Property& other0) {
  key = other0.key;
  value = other0.value;
  __isset = other0.__isset;
}
Property& Property::operator=(const Property& other1) {
  key = other1.key;
  value = other1.value;
  __isset = other1.__isset;
  return *this;
}
void Property::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Property(";
  out << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


CreateOption::~CreateOption() noexcept {
}


void CreateOption::__set_conflict_type(const CreateConflict::type val) {
  this->conflict_type = val;
}

void CreateOption::__set_properties(const std::vector<Property> & val) {
  this->properties = val;
}
std::ostream& operator<<(std::ostream& out, const CreateOption& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->conflict_type = static_cast<CreateConflict::type>(ecast2);
          this->__isset.conflict_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->properties.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readListBegin(_etype6, _size3);
            this->properties.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += this->properties[_i7].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateOption");

  xfer += oprot->writeFieldBegin("conflict_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->conflict_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->properties.size()));
    std::vector<Property> ::const_iterator _iter8;
    for (_iter8 = this->properties.begin(); _iter8 != this->properties.end(); ++_iter8)
    {
      xfer += (*_iter8).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateOption &a, CreateOption &b) {
  using ::std::swap;
  swap(a.conflict_type, b.conflict_type);
  swap(a.properties, b.properties);
  swap(a.__isset, b.__isset);
}

CreateOption::CreateOption(const CreateOption& other9) {
  conflict_type = other9.conflict_type;
  properties = other9.properties;
  __isset = other9.__isset;
}
CreateOption& CreateOption::operator=(const CreateOption& other10) {
  conflict_type = other10.conflict_type;
  properties = other10.properties;
  __isset = other10.__isset;
  return *this;
}
void CreateOption::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateOption(";
  out << "conflict_type=" << to_string(conflict_type);
  out << ", " << "properties=" << to_string(properties);
  out << ")";
}


DropOption::~DropOption() noexcept {
}


void DropOption::__set_conflict_type(const DropConflict::type val) {
  this->conflict_type = val;
}
std::ostream& operator<<(std::ostream& out, const DropOption& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DropOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->conflict_type = static_cast<DropConflict::type>(ecast11);
          this->__isset.conflict_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DropOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropOption");

  xfer += oprot->writeFieldBegin("conflict_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->conflict_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropOption &a, DropOption &b) {
  using ::std::swap;
  swap(a.conflict_type, b.conflict_type);
  swap(a.__isset, b.__isset);
}

DropOption::DropOption(const DropOption& other12) noexcept {
  conflict_type = other12.conflict_type;
  __isset = other12.__isset;
}
DropOption& DropOption::operator=(const DropOption& other13) noexcept {
  conflict_type = other13.conflict_type;
  __isset = other13.__isset;
  return *this;
}
void DropOption::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropOption(";
  out << "conflict_type=" << to_string(conflict_type);
  out << ")";
}


NumberType::~NumberType() noexcept {
}

std::ostream& operator<<(std::ostream& out, const NumberType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NumberType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NumberType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NumberType");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NumberType &a, NumberType &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

NumberType::NumberType(const NumberType& other14) noexcept {
  (void) other14;
}
NumberType& NumberType::operator=(const NumberType& other15) noexcept {
  (void) other15;
  return *this;
}
void NumberType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NumberType(";
  out << ")";
}


VarcharType::~VarcharType() noexcept {
}

std::ostream& operator<<(std::ostream& out, const VarcharType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t VarcharType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VarcharType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VarcharType");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VarcharType &a, VarcharType &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

VarcharType::VarcharType(const VarcharType& other16) noexcept {
  (void) other16;
}
VarcharType& VarcharType::operator=(const VarcharType& other17) noexcept {
  (void) other17;
  return *this;
}
void VarcharType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VarcharType(";
  out << ")";
}


EmbeddingType::~EmbeddingType() noexcept {
}


void EmbeddingType::__set_dimension(const int32_t val) {
  this->dimension = val;
}

void EmbeddingType::__set_element_type(const ElementType::type val) {
  this->element_type = val;
}
std::ostream& operator<<(std::ostream& out, const EmbeddingType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EmbeddingType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dimension);
          this->__isset.dimension = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->element_type = static_cast<ElementType::type>(ecast18);
          this->__isset.element_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EmbeddingType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EmbeddingType");

  xfer += oprot->writeFieldBegin("dimension", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->dimension);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("element_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->element_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EmbeddingType &a, EmbeddingType &b) {
  using ::std::swap;
  swap(a.dimension, b.dimension);
  swap(a.element_type, b.element_type);
  swap(a.__isset, b.__isset);
}

EmbeddingType::EmbeddingType(const EmbeddingType& other19) noexcept {
  dimension = other19.dimension;
  element_type = other19.element_type;
  __isset = other19.__isset;
}
EmbeddingType& EmbeddingType::operator=(const EmbeddingType& other20) noexcept {
  dimension = other20.dimension;
  element_type = other20.element_type;
  __isset = other20.__isset;
  return *this;
}
void EmbeddingType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EmbeddingType(";
  out << "dimension=" << to_string(dimension);
  out << ", " << "element_type=" << to_string(element_type);
  out << ")";
}


SparseType::~SparseType() noexcept {
}


void SparseType::__set_dimension(const int64_t val) {
  this->dimension = val;
}

void SparseType::__set_element_type(const ElementType::type val) {
  this->element_type = val;
}

void SparseType::__set_index_type(const ElementType::type val) {
  this->index_type = val;
}
std::ostream& operator<<(std::ostream& out, const SparseType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SparseType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dimension);
          this->__isset.dimension = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast21;
          xfer += iprot->readI32(ecast21);
          this->element_type = static_cast<ElementType::type>(ecast21);
          this->__isset.element_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast22;
          xfer += iprot->readI32(ecast22);
          this->index_type = static_cast<ElementType::type>(ecast22);
          this->__isset.index_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SparseType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SparseType");

  xfer += oprot->writeFieldBegin("dimension", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->dimension);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("element_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->element_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(static_cast<int32_t>(this->index_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SparseType &a, SparseType &b) {
  using ::std::swap;
  swap(a.dimension, b.dimension);
  swap(a.element_type, b.element_type);
  swap(a.index_type, b.index_type);
  swap(a.__isset, b.__isset);
}

SparseType::SparseType(const SparseType& other23) noexcept {
  dimension = other23.dimension;
  element_type = other23.element_type;
  index_type = other23.index_type;
  __isset = other23.__isset;
}
SparseType& SparseType::operator=(const SparseType& other24) noexcept {
  dimension = other24.dimension;
  element_type = other24.element_type;
  index_type = other24.index_type;
  __isset = other24.__isset;
  return *this;
}
void SparseType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SparseType(";
  out << "dimension=" << to_string(dimension);
  out << ", " << "element_type=" << to_string(element_type);
  out << ", " << "index_type=" << to_string(index_type);
  out << ")";
}


PhysicalType::~PhysicalType() noexcept {
}


void PhysicalType::__set_number_type(const NumberType& val) {
  this->number_type = val;
__isset.number_type = true;
}

void PhysicalType::__set_varchar_type(const VarcharType& val) {
  this->varchar_type = val;
__isset.varchar_type = true;
}

void PhysicalType::__set_embedding_type(const EmbeddingType& val) {
  this->embedding_type = val;
__isset.embedding_type = true;
}

void PhysicalType::__set_sparse_type(const SparseType& val) {
  this->sparse_type = val;
__isset.sparse_type = true;
}
std::ostream& operator<<(std::ostream& out, const PhysicalType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PhysicalType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->number_type.read(iprot);
          this->__isset.number_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->varchar_type.read(iprot);
          this->__isset.varchar_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->embedding_type.read(iprot);
          this->__isset.embedding_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sparse_type.read(iprot);
          this->__isset.sparse_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PhysicalType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PhysicalType");

  if (this->__isset.number_type) {
    xfer += oprot->writeFieldBegin("number_type", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->number_type.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.varchar_type) {
    xfer += oprot->writeFieldBegin("varchar_type", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->varchar_type.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.embedding_type) {
    xfer += oprot->writeFieldBegin("embedding_type", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->embedding_type.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sparse_type) {
    xfer += oprot->writeFieldBegin("sparse_type", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->sparse_type.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PhysicalType &a, PhysicalType &b) {
  using ::std::swap;
  swap(a.number_type, b.number_type);
  swap(a.varchar_type, b.varchar_type);
  swap(a.embedding_type, b.embedding_type);
  swap(a.sparse_type, b.sparse_type);
  swap(a.__isset, b.__isset);
}

PhysicalType::PhysicalType(const PhysicalType& other25) noexcept {
  number_type = other25.number_type;
  varchar_type = other25.varchar_type;
  embedding_type = other25.embedding_type;
  sparse_type = other25.sparse_type;
  __isset = other25.__isset;
}
PhysicalType& PhysicalType::operator=(const PhysicalType& other26) noexcept {
  number_type = other26.number_type;
  varchar_type = other26.varchar_type;
  embedding_type = other26.embedding_type;
  sparse_type = other26.sparse_type;
  __isset = other26.__isset;
  return *this;
}
void PhysicalType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PhysicalType(";
  out << "number_type="; (__isset.number_type ? (out << to_string(number_type)) : (out << "<null>"));
  out << ", " << "varchar_type="; (__isset.varchar_type ? (out << to_string(varchar_type)) : (out << "<null>"));
  out << ", " << "embedding_type="; (__isset.embedding_type ? (out << to_string(embedding_type)) : (out << "<null>"));
  out << ", " << "sparse_type="; (__isset.sparse_type ? (out << to_string(sparse_type)) : (out << "<null>"));
  out << ")";
}


DataType::~DataType() noexcept {
}


void DataType::__set_logic_type(const LogicType::type val) {
  this->logic_type = val;
}

void DataType::__set_physical_type(const PhysicalType& val) {
  this->physical_type = val;
}
std::ostream& operator<<(std::ostream& out, const DataType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DataType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast27;
          xfer += iprot->readI32(ecast27);
          this->logic_type = static_cast<LogicType::type>(ecast27);
          this->__isset.logic_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->physical_type.read(iprot);
          this->__isset.physical_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataType");

  xfer += oprot->writeFieldBegin("logic_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->logic_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("physical_type", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->physical_type.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DataType &a, DataType &b) {
  using ::std::swap;
  swap(a.logic_type, b.logic_type);
  swap(a.physical_type, b.physical_type);
  swap(a.__isset, b.__isset);
}

DataType::DataType(const DataType& other28) noexcept {
  logic_type = other28.logic_type;
  physical_type = other28.physical_type;
  __isset = other28.__isset;
}
DataType& DataType::operator=(const DataType& other29) noexcept {
  logic_type = other29.logic_type;
  physical_type = other29.physical_type;
  __isset = other29.__isset;
  return *this;
}
void DataType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DataType(";
  out << "logic_type=" << to_string(logic_type);
  out << ", " << "physical_type=" << to_string(physical_type);
  out << ")";
}


ParsedExprType::~ParsedExprType() noexcept {
}


void ParsedExprType::__set_constant_expr(::std::shared_ptr<ConstantExpr> val) {
  this->constant_expr = val;
__isset.constant_expr = true;
}

void ParsedExprType::__set_column_expr(::std::shared_ptr<ColumnExpr> val) {
  this->column_expr = val;
__isset.column_expr = true;
}

void ParsedExprType::__set_function_expr(::std::shared_ptr<FunctionExpr> val) {
  this->function_expr = val;
__isset.function_expr = true;
}

void ParsedExprType::__set_between_expr(::std::shared_ptr<BetweenExpr> val) {
  this->between_expr = val;
__isset.between_expr = true;
}

void ParsedExprType::__set_knn_expr(::std::shared_ptr<KnnExpr> val) {
  this->knn_expr = val;
__isset.knn_expr = true;
}

void ParsedExprType::__set_match_sparse_expr(::std::shared_ptr<MatchSparseExpr> val) {
  this->match_sparse_expr = val;
__isset.match_sparse_expr = true;
}

void ParsedExprType::__set_match_tensor_expr(::std::shared_ptr<MatchTensorExpr> val) {
  this->match_tensor_expr = val;
__isset.match_tensor_expr = true;
}

void ParsedExprType::__set_match_expr(::std::shared_ptr<MatchExpr> val) {
  this->match_expr = val;
__isset.match_expr = true;
}

void ParsedExprType::__set_fusion_expr(::std::shared_ptr<FusionExpr> val) {
  this->fusion_expr = val;
__isset.fusion_expr = true;
}

void ParsedExprType::__set_search_expr(::std::shared_ptr<SearchExpr> val) {
  this->search_expr = val;
__isset.search_expr = true;
}
std::ostream& operator<<(std::ostream& out, const ParsedExprType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ParsedExprType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->constant_expr) { 
            this->constant_expr = ::std::shared_ptr<ConstantExpr>(new ConstantExpr);
          }
          xfer += this->constant_expr->read(iprot);
          bool wasSet = false;
          if (this->constant_expr->__isset.literal_type) { wasSet = true; }
          if (this->constant_expr->__isset.bool_value) { wasSet = true; }
          if (this->constant_expr->__isset.i64_value) { wasSet = true; }
          if (this->constant_expr->__isset.f64_value) { wasSet = true; }
          if (this->constant_expr->__isset.str_value) { wasSet = true; }
          if (this->constant_expr->__isset.i64_array_value) { wasSet = true; }
          if (this->constant_expr->__isset.f64_array_value) { wasSet = true; }
          if (this->constant_expr->__isset.i64_tensor_value) { wasSet = true; }
          if (this->constant_expr->__isset.f64_tensor_value) { wasSet = true; }
          if (this->constant_expr->__isset.i64_tensor_array_value) { wasSet = true; }
          if (this->constant_expr->__isset.f64_tensor_array_value) { wasSet = true; }
          if (this->constant_expr->__isset.i64_array_idx) { wasSet = true; }
          if (!wasSet) { this->constant_expr.reset(); }
          this->__isset.constant_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->column_expr) { 
            this->column_expr = ::std::shared_ptr<ColumnExpr>(new ColumnExpr);
          }
          xfer += this->column_expr->read(iprot);
          bool wasSet = false;
          if (this->column_expr->__isset.column_name) { wasSet = true; }
          if (this->column_expr->__isset.star) { wasSet = true; }
          if (!wasSet) { this->column_expr.reset(); }
          this->__isset.column_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->function_expr) { 
            this->function_expr = ::std::shared_ptr<FunctionExpr>(new FunctionExpr);
          }
          xfer += this->function_expr->read(iprot);
          bool wasSet = false;
          if (this->function_expr->__isset.function_name) { wasSet = true; }
          if (this->function_expr->__isset.arguments) { wasSet = true; }
          if (!wasSet) { this->function_expr.reset(); }
          this->__isset.function_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->between_expr) { 
            this->between_expr = ::std::shared_ptr<BetweenExpr>(new BetweenExpr);
          }
          xfer += this->between_expr->read(iprot);
          bool wasSet = false;
          if (this->between_expr->__isset.value) { wasSet = true; }
          if (this->between_expr->__isset.upper_bound) { wasSet = true; }
          if (this->between_expr->__isset.lower_bound) { wasSet = true; }
          if (!wasSet) { this->between_expr.reset(); }
          this->__isset.between_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->knn_expr) { 
            this->knn_expr = ::std::shared_ptr<KnnExpr>(new KnnExpr);
          }
          xfer += this->knn_expr->read(iprot);
          bool wasSet = false;
          if (this->knn_expr->__isset.column_expr) { wasSet = true; }
          if (this->knn_expr->__isset.embedding_data) { wasSet = true; }
          if (this->knn_expr->__isset.embedding_data_type) { wasSet = true; }
          if (this->knn_expr->__isset.distance_type) { wasSet = true; }
          if (this->knn_expr->__isset.topn) { wasSet = true; }
          if (this->knn_expr->__isset.opt_params) { wasSet = true; }
          if (this->knn_expr->__isset.filter_expr) { wasSet = true; }
          if (!wasSet) { this->knn_expr.reset(); }
          this->__isset.knn_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->match_sparse_expr) { 
            this->match_sparse_expr = ::std::shared_ptr<MatchSparseExpr>(new MatchSparseExpr);
          }
          xfer += this->match_sparse_expr->read(iprot);
          bool wasSet = false;
          if (this->match_sparse_expr->__isset.column_expr) { wasSet = true; }
          if (this->match_sparse_expr->__isset.query_sparse_expr) { wasSet = true; }
          if (this->match_sparse_expr->__isset.metric_type) { wasSet = true; }
          if (this->match_sparse_expr->__isset.topn) { wasSet = true; }
          if (this->match_sparse_expr->__isset.opt_params) { wasSet = true; }
          if (this->match_sparse_expr->__isset.filter_expr) { wasSet = true; }
          if (!wasSet) { this->match_sparse_expr.reset(); }
          this->__isset.match_sparse_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->match_tensor_expr) { 
            this->match_tensor_expr = ::std::shared_ptr<MatchTensorExpr>(new MatchTensorExpr);
          }
          xfer += this->match_tensor_expr->read(iprot);
          bool wasSet = false;
          if (this->match_tensor_expr->__isset.search_method) { wasSet = true; }
          if (this->match_tensor_expr->__isset.column_expr) { wasSet = true; }
          if (this->match_tensor_expr->__isset.embedding_data_type) { wasSet = true; }
          if (this->match_tensor_expr->__isset.embedding_data) { wasSet = true; }
          if (this->match_tensor_expr->__isset.extra_options) { wasSet = true; }
          if (this->match_tensor_expr->__isset.filter_expr) { wasSet = true; }
          if (!wasSet) { this->match_tensor_expr.reset(); }
          this->__isset.match_tensor_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->match_expr) { 
            this->match_expr = ::std::shared_ptr<MatchExpr>(new MatchExpr);
          }
          xfer += this->match_expr->read(iprot);
          bool wasSet = false;
          if (this->match_expr->__isset.fields) { wasSet = true; }
          if (this->match_expr->__isset.matching_text) { wasSet = true; }
          if (this->match_expr->__isset.options_text) { wasSet = true; }
          if (this->match_expr->__isset.filter_expr) { wasSet = true; }
          if (!wasSet) { this->match_expr.reset(); }
          this->__isset.match_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->fusion_expr) { 
            this->fusion_expr = ::std::shared_ptr<FusionExpr>(new FusionExpr);
          }
          xfer += this->fusion_expr->read(iprot);
          bool wasSet = false;
          if (this->fusion_expr->__isset.method) { wasSet = true; }
          if (this->fusion_expr->__isset.options_text) { wasSet = true; }
          if (this->fusion_expr->__isset.optional_match_tensor_expr) { wasSet = true; }
          if (!wasSet) { this->fusion_expr.reset(); }
          this->__isset.fusion_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->search_expr) { 
            this->search_expr = ::std::shared_ptr<SearchExpr>(new SearchExpr);
          }
          xfer += this->search_expr->read(iprot);
          bool wasSet = false;
          if (this->search_expr->__isset.match_exprs) { wasSet = true; }
          if (this->search_expr->__isset.fusion_exprs) { wasSet = true; }
          if (!wasSet) { this->search_expr.reset(); }
          this->__isset.search_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ParsedExprType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ParsedExprType");

  if (this->__isset.constant_expr) {
    xfer += oprot->writeFieldBegin("constant_expr", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->constant_expr) {
      xfer += this->constant_expr->write(oprot); 
    } else {oprot->writeStructBegin("ConstantExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.column_expr) {
    xfer += oprot->writeFieldBegin("column_expr", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->column_expr) {
      xfer += this->column_expr->write(oprot); 
    } else {oprot->writeStructBegin("ColumnExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.function_expr) {
    xfer += oprot->writeFieldBegin("function_expr", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->function_expr) {
      xfer += this->function_expr->write(oprot); 
    } else {oprot->writeStructBegin("FunctionExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.between_expr) {
    xfer += oprot->writeFieldBegin("between_expr", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->between_expr) {
      xfer += this->between_expr->write(oprot); 
    } else {oprot->writeStructBegin("BetweenExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.knn_expr) {
    xfer += oprot->writeFieldBegin("knn_expr", ::apache::thrift::protocol::T_STRUCT, 5);
    if (this->knn_expr) {
      xfer += this->knn_expr->write(oprot); 
    } else {oprot->writeStructBegin("KnnExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.match_sparse_expr) {
    xfer += oprot->writeFieldBegin("match_sparse_expr", ::apache::thrift::protocol::T_STRUCT, 6);
    if (this->match_sparse_expr) {
      xfer += this->match_sparse_expr->write(oprot); 
    } else {oprot->writeStructBegin("MatchSparseExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.match_tensor_expr) {
    xfer += oprot->writeFieldBegin("match_tensor_expr", ::apache::thrift::protocol::T_STRUCT, 7);
    if (this->match_tensor_expr) {
      xfer += this->match_tensor_expr->write(oprot); 
    } else {oprot->writeStructBegin("MatchTensorExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.match_expr) {
    xfer += oprot->writeFieldBegin("match_expr", ::apache::thrift::protocol::T_STRUCT, 8);
    if (this->match_expr) {
      xfer += this->match_expr->write(oprot); 
    } else {oprot->writeStructBegin("MatchExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fusion_expr) {
    xfer += oprot->writeFieldBegin("fusion_expr", ::apache::thrift::protocol::T_STRUCT, 9);
    if (this->fusion_expr) {
      xfer += this->fusion_expr->write(oprot); 
    } else {oprot->writeStructBegin("FusionExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.search_expr) {
    xfer += oprot->writeFieldBegin("search_expr", ::apache::thrift::protocol::T_STRUCT, 10);
    if (this->search_expr) {
      xfer += this->search_expr->write(oprot); 
    } else {oprot->writeStructBegin("SearchExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ParsedExprType &a, ParsedExprType &b) {
  using ::std::swap;
  swap(a.constant_expr, b.constant_expr);
  swap(a.column_expr, b.column_expr);
  swap(a.function_expr, b.function_expr);
  swap(a.between_expr, b.between_expr);
  swap(a.knn_expr, b.knn_expr);
  swap(a.match_sparse_expr, b.match_sparse_expr);
  swap(a.match_tensor_expr, b.match_tensor_expr);
  swap(a.match_expr, b.match_expr);
  swap(a.fusion_expr, b.fusion_expr);
  swap(a.search_expr, b.search_expr);
  swap(a.__isset, b.__isset);
}

ParsedExprType::ParsedExprType(const ParsedExprType& other30) {
  constant_expr = other30.constant_expr;
  column_expr = other30.column_expr;
  function_expr = other30.function_expr;
  between_expr = other30.between_expr;
  knn_expr = other30.knn_expr;
  match_sparse_expr = other30.match_sparse_expr;
  match_tensor_expr = other30.match_tensor_expr;
  match_expr = other30.match_expr;
  fusion_expr = other30.fusion_expr;
  search_expr = other30.search_expr;
  __isset = other30.__isset;
}
ParsedExprType& ParsedExprType::operator=(const ParsedExprType& other31) {
  constant_expr = other31.constant_expr;
  column_expr = other31.column_expr;
  function_expr = other31.function_expr;
  between_expr = other31.between_expr;
  knn_expr = other31.knn_expr;
  match_sparse_expr = other31.match_sparse_expr;
  match_tensor_expr = other31.match_tensor_expr;
  match_expr = other31.match_expr;
  fusion_expr = other31.fusion_expr;
  search_expr = other31.search_expr;
  __isset = other31.__isset;
  return *this;
}
void ParsedExprType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ParsedExprType(";
  out << "constant_expr="; (__isset.constant_expr ? (out << to_string(constant_expr)) : (out << "<null>"));
  out << ", " << "column_expr="; (__isset.column_expr ? (out << to_string(column_expr)) : (out << "<null>"));
  out << ", " << "function_expr="; (__isset.function_expr ? (out << to_string(function_expr)) : (out << "<null>"));
  out << ", " << "between_expr="; (__isset.between_expr ? (out << to_string(between_expr)) : (out << "<null>"));
  out << ", " << "knn_expr="; (__isset.knn_expr ? (out << to_string(knn_expr)) : (out << "<null>"));
  out << ", " << "match_sparse_expr="; (__isset.match_sparse_expr ? (out << to_string(match_sparse_expr)) : (out << "<null>"));
  out << ", " << "match_tensor_expr="; (__isset.match_tensor_expr ? (out << to_string(match_tensor_expr)) : (out << "<null>"));
  out << ", " << "match_expr="; (__isset.match_expr ? (out << to_string(match_expr)) : (out << "<null>"));
  out << ", " << "fusion_expr="; (__isset.fusion_expr ? (out << to_string(fusion_expr)) : (out << "<null>"));
  out << ", " << "search_expr="; (__isset.search_expr ? (out << to_string(search_expr)) : (out << "<null>"));
  out << ")";
}


ParsedExpr::~ParsedExpr() noexcept {
}


void ParsedExpr::__set_type(const ParsedExprType& val) {
  this->type = val;
}

void ParsedExpr::__set_alias_name(const std::string& val) {
  this->alias_name = val;
}
std::ostream& operator<<(std::ostream& out, const ParsedExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ParsedExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->type.read(iprot);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->alias_name);
          this->__isset.alias_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ParsedExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ParsedExpr");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->type.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alias_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->alias_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ParsedExpr &a, ParsedExpr &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.alias_name, b.alias_name);
  swap(a.__isset, b.__isset);
}

ParsedExpr::ParsedExpr(const ParsedExpr& other32) {
  type = other32.type;
  alias_name = other32.alias_name;
  __isset = other32.__isset;
}
ParsedExpr& ParsedExpr::operator=(const ParsedExpr& other33) {
  type = other33.type;
  alias_name = other33.alias_name;
  __isset = other33.__isset;
  return *this;
}
void ParsedExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ParsedExpr(";
  out << "type=" << to_string(type);
  out << ", " << "alias_name=" << to_string(alias_name);
  out << ")";
}


ColumnExpr::~ColumnExpr() noexcept {
}


void ColumnExpr::__set_column_name(const std::vector<std::string> & val) {
  this->column_name = val;
}

void ColumnExpr::__set_star(const bool val) {
  this->star = val;
}
std::ostream& operator<<(std::ostream& out, const ColumnExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ColumnExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_name.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            xfer += iprot->readListBegin(_etype37, _size34);
            this->column_name.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += iprot->readString(this->column_name[_i38]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->star);
          this->__isset.star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ColumnExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnExpr");

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_name.size()));
    std::vector<std::string> ::const_iterator _iter39;
    for (_iter39 = this->column_name.begin(); _iter39 != this->column_name.end(); ++_iter39)
    {
      xfer += oprot->writeString((*_iter39));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("star", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->star);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnExpr &a, ColumnExpr &b) {
  using ::std::swap;
  swap(a.column_name, b.column_name);
  swap(a.star, b.star);
  swap(a.__isset, b.__isset);
}

ColumnExpr::ColumnExpr(const ColumnExpr& other40) {
  column_name = other40.column_name;
  star = other40.star;
  __isset = other40.__isset;
}
ColumnExpr& ColumnExpr::operator=(const ColumnExpr& other41) {
  column_name = other41.column_name;
  star = other41.star;
  __isset = other41.__isset;
  return *this;
}
void ColumnExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnExpr(";
  out << "column_name=" << to_string(column_name);
  out << ", " << "star=" << to_string(star);
  out << ")";
}


EmbeddingData::~EmbeddingData() noexcept {
}


void EmbeddingData::__set_bool_array_value(const std::vector<bool> & val) {
  this->bool_array_value = val;
__isset.bool_array_value = true;
}

void EmbeddingData::__set_u8_array_value(const std::vector<int16_t> & val) {
  this->u8_array_value = val;
__isset.u8_array_value = true;
}

void EmbeddingData::__set_i8_array_value(const std::vector<int16_t> & val) {
  this->i8_array_value = val;
__isset.i8_array_value = true;
}

void EmbeddingData::__set_i16_array_value(const std::vector<int16_t> & val) {
  this->i16_array_value = val;
__isset.i16_array_value = true;
}

void EmbeddingData::__set_i32_array_value(const std::vector<int32_t> & val) {
  this->i32_array_value = val;
__isset.i32_array_value = true;
}

void EmbeddingData::__set_i64_array_value(const std::vector<int64_t> & val) {
  this->i64_array_value = val;
__isset.i64_array_value = true;
}

void EmbeddingData::__set_f32_array_value(const std::vector<double> & val) {
  this->f32_array_value = val;
__isset.f32_array_value = true;
}

void EmbeddingData::__set_f64_array_value(const std::vector<double> & val) {
  this->f64_array_value = val;
__isset.f64_array_value = true;
}

void EmbeddingData::__set_f16_array_value(const std::vector<double> & val) {
  this->f16_array_value = val;
__isset.f16_array_value = true;
}

void EmbeddingData::__set_bf16_array_value(const std::vector<double> & val) {
  this->bf16_array_value = val;
__isset.bf16_array_value = true;
}
std::ostream& operator<<(std::ostream& out, const EmbeddingData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EmbeddingData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bool_array_value.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _etype45;
            xfer += iprot->readListBegin(_etype45, _size42);
            this->bool_array_value.resize(_size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              xfer += iprot->readBool(this->bool_array_value[_i46]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.bool_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->u8_array_value.clear();
            uint32_t _size47;
            ::apache::thrift::protocol::TType _etype50;
            xfer += iprot->readListBegin(_etype50, _size47);
            this->u8_array_value.resize(_size47);
            uint32_t _i51;
            for (_i51 = 0; _i51 < _size47; ++_i51)
            {
              xfer += iprot->readI16(this->u8_array_value[_i51]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.u8_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i8_array_value.clear();
            uint32_t _size52;
            ::apache::thrift::protocol::TType _etype55;
            xfer += iprot->readListBegin(_etype55, _size52);
            this->i8_array_value.resize(_size52);
            uint32_t _i56;
            for (_i56 = 0; _i56 < _size52; ++_i56)
            {
              xfer += iprot->readI16(this->i8_array_value[_i56]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i8_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i16_array_value.clear();
            uint32_t _size57;
            ::apache::thrift::protocol::TType _etype60;
            xfer += iprot->readListBegin(_etype60, _size57);
            this->i16_array_value.resize(_size57);
            uint32_t _i61;
            for (_i61 = 0; _i61 < _size57; ++_i61)
            {
              xfer += iprot->readI16(this->i16_array_value[_i61]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i16_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i32_array_value.clear();
            uint32_t _size62;
            ::apache::thrift::protocol::TType _etype65;
            xfer += iprot->readListBegin(_etype65, _size62);
            this->i32_array_value.resize(_size62);
            uint32_t _i66;
            for (_i66 = 0; _i66 < _size62; ++_i66)
            {
              xfer += iprot->readI32(this->i32_array_value[_i66]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i32_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i64_array_value.clear();
            uint32_t _size67;
            ::apache::thrift::protocol::TType _etype70;
            xfer += iprot->readListBegin(_etype70, _size67);
            this->i64_array_value.resize(_size67);
            uint32_t _i71;
            for (_i71 = 0; _i71 < _size67; ++_i71)
            {
              xfer += iprot->readI64(this->i64_array_value[_i71]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i64_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->f32_array_value.clear();
            uint32_t _size72;
            ::apache::thrift::protocol::TType _etype75;
            xfer += iprot->readListBegin(_etype75, _size72);
            this->f32_array_value.resize(_size72);
            uint32_t _i76;
            for (_i76 = 0; _i76 < _size72; ++_i76)
            {
              xfer += iprot->readDouble(this->f32_array_value[_i76]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.f32_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->f64_array_value.clear();
            uint32_t _size77;
            ::apache::thrift::protocol::TType _etype80;
            xfer += iprot->readListBegin(_etype80, _size77);
            this->f64_array_value.resize(_size77);
            uint32_t _i81;
            for (_i81 = 0; _i81 < _size77; ++_i81)
            {
              xfer += iprot->readDouble(this->f64_array_value[_i81]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.f64_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->f16_array_value.clear();
            uint32_t _size82;
            ::apache::thrift::protocol::TType _etype85;
            xfer += iprot->readListBegin(_etype85, _size82);
            this->f16_array_value.resize(_size82);
            uint32_t _i86;
            for (_i86 = 0; _i86 < _size82; ++_i86)
            {
              xfer += iprot->readDouble(this->f16_array_value[_i86]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.f16_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bf16_array_value.clear();
            uint32_t _size87;
            ::apache::thrift::protocol::TType _etype90;
            xfer += iprot->readListBegin(_etype90, _size87);
            this->bf16_array_value.resize(_size87);
            uint32_t _i91;
            for (_i91 = 0; _i91 < _size87; ++_i91)
            {
              xfer += iprot->readDouble(this->bf16_array_value[_i91]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.bf16_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EmbeddingData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EmbeddingData");

  if (this->__isset.bool_array_value) {
    xfer += oprot->writeFieldBegin("bool_array_value", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->bool_array_value.size()));
      std::vector<bool> ::const_iterator _iter92;
      for (_iter92 = this->bool_array_value.begin(); _iter92 != this->bool_array_value.end(); ++_iter92)
      {
        xfer += oprot->writeBool((*_iter92));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.u8_array_value) {
    xfer += oprot->writeFieldBegin("u8_array_value", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->u8_array_value.size()));
      std::vector<int16_t> ::const_iterator _iter93;
      for (_iter93 = this->u8_array_value.begin(); _iter93 != this->u8_array_value.end(); ++_iter93)
      {
        xfer += oprot->writeI16((*_iter93));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i8_array_value) {
    xfer += oprot->writeFieldBegin("i8_array_value", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->i8_array_value.size()));
      std::vector<int16_t> ::const_iterator _iter94;
      for (_iter94 = this->i8_array_value.begin(); _iter94 != this->i8_array_value.end(); ++_iter94)
      {
        xfer += oprot->writeI16((*_iter94));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i16_array_value) {
    xfer += oprot->writeFieldBegin("i16_array_value", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->i16_array_value.size()));
      std::vector<int16_t> ::const_iterator _iter95;
      for (_iter95 = this->i16_array_value.begin(); _iter95 != this->i16_array_value.end(); ++_iter95)
      {
        xfer += oprot->writeI16((*_iter95));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i32_array_value) {
    xfer += oprot->writeFieldBegin("i32_array_value", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->i32_array_value.size()));
      std::vector<int32_t> ::const_iterator _iter96;
      for (_iter96 = this->i32_array_value.begin(); _iter96 != this->i32_array_value.end(); ++_iter96)
      {
        xfer += oprot->writeI32((*_iter96));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i64_array_value) {
    xfer += oprot->writeFieldBegin("i64_array_value", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->i64_array_value.size()));
      std::vector<int64_t> ::const_iterator _iter97;
      for (_iter97 = this->i64_array_value.begin(); _iter97 != this->i64_array_value.end(); ++_iter97)
      {
        xfer += oprot->writeI64((*_iter97));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.f32_array_value) {
    xfer += oprot->writeFieldBegin("f32_array_value", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->f32_array_value.size()));
      std::vector<double> ::const_iterator _iter98;
      for (_iter98 = this->f32_array_value.begin(); _iter98 != this->f32_array_value.end(); ++_iter98)
      {
        xfer += oprot->writeDouble((*_iter98));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.f64_array_value) {
    xfer += oprot->writeFieldBegin("f64_array_value", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->f64_array_value.size()));
      std::vector<double> ::const_iterator _iter99;
      for (_iter99 = this->f64_array_value.begin(); _iter99 != this->f64_array_value.end(); ++_iter99)
      {
        xfer += oprot->writeDouble((*_iter99));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.f16_array_value) {
    xfer += oprot->writeFieldBegin("f16_array_value", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->f16_array_value.size()));
      std::vector<double> ::const_iterator _iter100;
      for (_iter100 = this->f16_array_value.begin(); _iter100 != this->f16_array_value.end(); ++_iter100)
      {
        xfer += oprot->writeDouble((*_iter100));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bf16_array_value) {
    xfer += oprot->writeFieldBegin("bf16_array_value", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->bf16_array_value.size()));
      std::vector<double> ::const_iterator _iter101;
      for (_iter101 = this->bf16_array_value.begin(); _iter101 != this->bf16_array_value.end(); ++_iter101)
      {
        xfer += oprot->writeDouble((*_iter101));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EmbeddingData &a, EmbeddingData &b) {
  using ::std::swap;
  swap(a.bool_array_value, b.bool_array_value);
  swap(a.u8_array_value, b.u8_array_value);
  swap(a.i8_array_value, b.i8_array_value);
  swap(a.i16_array_value, b.i16_array_value);
  swap(a.i32_array_value, b.i32_array_value);
  swap(a.i64_array_value, b.i64_array_value);
  swap(a.f32_array_value, b.f32_array_value);
  swap(a.f64_array_value, b.f64_array_value);
  swap(a.f16_array_value, b.f16_array_value);
  swap(a.bf16_array_value, b.bf16_array_value);
  swap(a.__isset, b.__isset);
}

EmbeddingData::EmbeddingData(const EmbeddingData& other102) {
  bool_array_value = other102.bool_array_value;
  u8_array_value = other102.u8_array_value;
  i8_array_value = other102.i8_array_value;
  i16_array_value = other102.i16_array_value;
  i32_array_value = other102.i32_array_value;
  i64_array_value = other102.i64_array_value;
  f32_array_value = other102.f32_array_value;
  f64_array_value = other102.f64_array_value;
  f16_array_value = other102.f16_array_value;
  bf16_array_value = other102.bf16_array_value;
  __isset = other102.__isset;
}
EmbeddingData& EmbeddingData::operator=(const EmbeddingData& other103) {
  bool_array_value = other103.bool_array_value;
  u8_array_value = other103.u8_array_value;
  i8_array_value = other103.i8_array_value;
  i16_array_value = other103.i16_array_value;
  i32_array_value = other103.i32_array_value;
  i64_array_value = other103.i64_array_value;
  f32_array_value = other103.f32_array_value;
  f64_array_value = other103.f64_array_value;
  f16_array_value = other103.f16_array_value;
  bf16_array_value = other103.bf16_array_value;
  __isset = other103.__isset;
  return *this;
}
void EmbeddingData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EmbeddingData(";
  out << "bool_array_value="; (__isset.bool_array_value ? (out << to_string(bool_array_value)) : (out << "<null>"));
  out << ", " << "u8_array_value="; (__isset.u8_array_value ? (out << to_string(u8_array_value)) : (out << "<null>"));
  out << ", " << "i8_array_value="; (__isset.i8_array_value ? (out << to_string(i8_array_value)) : (out << "<null>"));
  out << ", " << "i16_array_value="; (__isset.i16_array_value ? (out << to_string(i16_array_value)) : (out << "<null>"));
  out << ", " << "i32_array_value="; (__isset.i32_array_value ? (out << to_string(i32_array_value)) : (out << "<null>"));
  out << ", " << "i64_array_value="; (__isset.i64_array_value ? (out << to_string(i64_array_value)) : (out << "<null>"));
  out << ", " << "f32_array_value="; (__isset.f32_array_value ? (out << to_string(f32_array_value)) : (out << "<null>"));
  out << ", " << "f64_array_value="; (__isset.f64_array_value ? (out << to_string(f64_array_value)) : (out << "<null>"));
  out << ", " << "f16_array_value="; (__isset.f16_array_value ? (out << to_string(f16_array_value)) : (out << "<null>"));
  out << ", " << "bf16_array_value="; (__isset.bf16_array_value ? (out << to_string(bf16_array_value)) : (out << "<null>"));
  out << ")";
}


InitParameter::~InitParameter() noexcept {
}


void InitParameter::__set_param_name(const std::string& val) {
  this->param_name = val;
}

void InitParameter::__set_param_value(const std::string& val) {
  this->param_value = val;
}
std::ostream& operator<<(std::ostream& out, const InitParameter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InitParameter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param_name);
          this->__isset.param_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param_value);
          this->__isset.param_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InitParameter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InitParameter");

  xfer += oprot->writeFieldBegin("param_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->param_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param_value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->param_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InitParameter &a, InitParameter &b) {
  using ::std::swap;
  swap(a.param_name, b.param_name);
  swap(a.param_value, b.param_value);
  swap(a.__isset, b.__isset);
}

InitParameter::InitParameter(const InitParameter& other104) {
  param_name = other104.param_name;
  param_value = other104.param_value;
  __isset = other104.__isset;
}
InitParameter& InitParameter::operator=(const InitParameter& other105) {
  param_name = other105.param_name;
  param_value = other105.param_value;
  __isset = other105.__isset;
  return *this;
}
void InitParameter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InitParameter(";
  out << "param_name=" << to_string(param_name);
  out << ", " << "param_value=" << to_string(param_value);
  out << ")";
}


ConstantExpr::~ConstantExpr() noexcept {
}


void ConstantExpr::__set_literal_type(const LiteralType::type val) {
  this->literal_type = val;
}

void ConstantExpr::__set_bool_value(const bool val) {
  this->bool_value = val;
__isset.bool_value = true;
}

void ConstantExpr::__set_i64_value(const int64_t val) {
  this->i64_value = val;
__isset.i64_value = true;
}

void ConstantExpr::__set_f64_value(const double val) {
  this->f64_value = val;
__isset.f64_value = true;
}

void ConstantExpr::__set_str_value(const std::string& val) {
  this->str_value = val;
__isset.str_value = true;
}

void ConstantExpr::__set_i64_array_value(const std::vector<int64_t> & val) {
  this->i64_array_value = val;
__isset.i64_array_value = true;
}

void ConstantExpr::__set_f64_array_value(const std::vector<double> & val) {
  this->f64_array_value = val;
__isset.f64_array_value = true;
}

void ConstantExpr::__set_i64_tensor_value(const std::vector<std::vector<int64_t> > & val) {
  this->i64_tensor_value = val;
__isset.i64_tensor_value = true;
}

void ConstantExpr::__set_f64_tensor_value(const std::vector<std::vector<double> > & val) {
  this->f64_tensor_value = val;
__isset.f64_tensor_value = true;
}

void ConstantExpr::__set_i64_tensor_array_value(const std::vector<std::vector<std::vector<int64_t> > > & val) {
  this->i64_tensor_array_value = val;
__isset.i64_tensor_array_value = true;
}

void ConstantExpr::__set_f64_tensor_array_value(const std::vector<std::vector<std::vector<double> > > & val) {
  this->f64_tensor_array_value = val;
__isset.f64_tensor_array_value = true;
}

void ConstantExpr::__set_i64_array_idx(const std::vector<int64_t> & val) {
  this->i64_array_idx = val;
__isset.i64_array_idx = true;
}
std::ostream& operator<<(std::ostream& out, const ConstantExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ConstantExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast106;
          xfer += iprot->readI32(ecast106);
          this->literal_type = static_cast<LiteralType::type>(ecast106);
          this->__isset.literal_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bool_value);
          this->__isset.bool_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->i64_value);
          this->__isset.i64_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->f64_value);
          this->__isset.f64_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str_value);
          this->__isset.str_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i64_array_value.clear();
            uint32_t _size107;
            ::apache::thrift::protocol::TType _etype110;
            xfer += iprot->readListBegin(_etype110, _size107);
            this->i64_array_value.resize(_size107);
            uint32_t _i111;
            for (_i111 = 0; _i111 < _size107; ++_i111)
            {
              xfer += iprot->readI64(this->i64_array_value[_i111]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i64_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->f64_array_value.clear();
            uint32_t _size112;
            ::apache::thrift::protocol::TType _etype115;
            xfer += iprot->readListBegin(_etype115, _size112);
            this->f64_array_value.resize(_size112);
            uint32_t _i116;
            for (_i116 = 0; _i116 < _size112; ++_i116)
            {
              xfer += iprot->readDouble(this->f64_array_value[_i116]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.f64_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i64_tensor_value.clear();
            uint32_t _size117;
            ::apache::thrift::protocol::TType _etype120;
            xfer += iprot->readListBegin(_etype120, _size117);
            this->i64_tensor_value.resize(_size117);
            uint32_t _i121;
            for (_i121 = 0; _i121 < _size117; ++_i121)
            {
              {
                this->i64_tensor_value[_i121].clear();
                uint32_t _size122;
                ::apache::thrift::protocol::TType _etype125;
                xfer += iprot->readListBegin(_etype125, _size122);
                this->i64_tensor_value[_i121].resize(_size122);
                uint32_t _i126;
                for (_i126 = 0; _i126 < _size122; ++_i126)
                {
                  xfer += iprot->readI64(this->i64_tensor_value[_i121][_i126]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i64_tensor_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->f64_tensor_value.clear();
            uint32_t _size127;
            ::apache::thrift::protocol::TType _etype130;
            xfer += iprot->readListBegin(_etype130, _size127);
            this->f64_tensor_value.resize(_size127);
            uint32_t _i131;
            for (_i131 = 0; _i131 < _size127; ++_i131)
            {
              {
                this->f64_tensor_value[_i131].clear();
                uint32_t _size132;
                ::apache::thrift::protocol::TType _etype135;
                xfer += iprot->readListBegin(_etype135, _size132);
                this->f64_tensor_value[_i131].resize(_size132);
                uint32_t _i136;
                for (_i136 = 0; _i136 < _size132; ++_i136)
                {
                  xfer += iprot->readDouble(this->f64_tensor_value[_i131][_i136]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.f64_tensor_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i64_tensor_array_value.clear();
            uint32_t _size137;
            ::apache::thrift::protocol::TType _etype140;
            xfer += iprot->readListBegin(_etype140, _size137);
            this->i64_tensor_array_value.resize(_size137);
            uint32_t _i141;
            for (_i141 = 0; _i141 < _size137; ++_i141)
            {
              {
                this->i64_tensor_array_value[_i141].clear();
                uint32_t _size142;
                ::apache::thrift::protocol::TType _etype145;
                xfer += iprot->readListBegin(_etype145, _size142);
                this->i64_tensor_array_value[_i141].resize(_size142);
                uint32_t _i146;
                for (_i146 = 0; _i146 < _size142; ++_i146)
                {
                  {
                    this->i64_tensor_array_value[_i141][_i146].clear();
                    uint32_t _size147;
                    ::apache::thrift::protocol::TType _etype150;
                    xfer += iprot->readListBegin(_etype150, _size147);
                    this->i64_tensor_array_value[_i141][_i146].resize(_size147);
                    uint32_t _i151;
                    for (_i151 = 0; _i151 < _size147; ++_i151)
                    {
                      xfer += iprot->readI64(this->i64_tensor_array_value[_i141][_i146][_i151]);
                    }
                    xfer += iprot->readListEnd();
                  }
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i64_tensor_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->f64_tensor_array_value.clear();
            uint32_t _size152;
            ::apache::thrift::protocol::TType _etype155;
            xfer += iprot->readListBegin(_etype155, _size152);
            this->f64_tensor_array_value.resize(_size152);
            uint32_t _i156;
            for (_i156 = 0; _i156 < _size152; ++_i156)
            {
              {
                this->f64_tensor_array_value[_i156].clear();
                uint32_t _size157;
                ::apache::thrift::protocol::TType _etype160;
                xfer += iprot->readListBegin(_etype160, _size157);
                this->f64_tensor_array_value[_i156].resize(_size157);
                uint32_t _i161;
                for (_i161 = 0; _i161 < _size157; ++_i161)
                {
                  {
                    this->f64_tensor_array_value[_i156][_i161].clear();
                    uint32_t _size162;
                    ::apache::thrift::protocol::TType _etype165;
                    xfer += iprot->readListBegin(_etype165, _size162);
                    this->f64_tensor_array_value[_i156][_i161].resize(_size162);
                    uint32_t _i166;
                    for (_i166 = 0; _i166 < _size162; ++_i166)
                    {
                      xfer += iprot->readDouble(this->f64_tensor_array_value[_i156][_i161][_i166]);
                    }
                    xfer += iprot->readListEnd();
                  }
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.f64_tensor_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i64_array_idx.clear();
            uint32_t _size167;
            ::apache::thrift::protocol::TType _etype170;
            xfer += iprot->readListBegin(_etype170, _size167);
            this->i64_array_idx.resize(_size167);
            uint32_t _i171;
            for (_i171 = 0; _i171 < _size167; ++_i171)
            {
              xfer += iprot->readI64(this->i64_array_idx[_i171]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i64_array_idx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConstantExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ConstantExpr");

  xfer += oprot->writeFieldBegin("literal_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->literal_type));
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bool_value) {
    xfer += oprot->writeFieldBegin("bool_value", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->bool_value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i64_value) {
    xfer += oprot->writeFieldBegin("i64_value", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->i64_value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.f64_value) {
    xfer += oprot->writeFieldBegin("f64_value", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->f64_value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.str_value) {
    xfer += oprot->writeFieldBegin("str_value", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->str_value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i64_array_value) {
    xfer += oprot->writeFieldBegin("i64_array_value", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->i64_array_value.size()));
      std::vector<int64_t> ::const_iterator _iter172;
      for (_iter172 = this->i64_array_value.begin(); _iter172 != this->i64_array_value.end(); ++_iter172)
      {
        xfer += oprot->writeI64((*_iter172));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.f64_array_value) {
    xfer += oprot->writeFieldBegin("f64_array_value", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->f64_array_value.size()));
      std::vector<double> ::const_iterator _iter173;
      for (_iter173 = this->f64_array_value.begin(); _iter173 != this->f64_array_value.end(); ++_iter173)
      {
        xfer += oprot->writeDouble((*_iter173));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i64_tensor_value) {
    xfer += oprot->writeFieldBegin("i64_tensor_value", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->i64_tensor_value.size()));
      std::vector<std::vector<int64_t> > ::const_iterator _iter174;
      for (_iter174 = this->i64_tensor_value.begin(); _iter174 != this->i64_tensor_value.end(); ++_iter174)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter174).size()));
          std::vector<int64_t> ::const_iterator _iter175;
          for (_iter175 = (*_iter174).begin(); _iter175 != (*_iter174).end(); ++_iter175)
          {
            xfer += oprot->writeI64((*_iter175));
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.f64_tensor_value) {
    xfer += oprot->writeFieldBegin("f64_tensor_value", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->f64_tensor_value.size()));
      std::vector<std::vector<double> > ::const_iterator _iter176;
      for (_iter176 = this->f64_tensor_value.begin(); _iter176 != this->f64_tensor_value.end(); ++_iter176)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>((*_iter176).size()));
          std::vector<double> ::const_iterator _iter177;
          for (_iter177 = (*_iter176).begin(); _iter177 != (*_iter176).end(); ++_iter177)
          {
            xfer += oprot->writeDouble((*_iter177));
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i64_tensor_array_value) {
    xfer += oprot->writeFieldBegin("i64_tensor_array_value", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->i64_tensor_array_value.size()));
      std::vector<std::vector<std::vector<int64_t> > > ::const_iterator _iter178;
      for (_iter178 = this->i64_tensor_array_value.begin(); _iter178 != this->i64_tensor_array_value.end(); ++_iter178)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*_iter178).size()));
          std::vector<std::vector<int64_t> > ::const_iterator _iter179;
          for (_iter179 = (*_iter178).begin(); _iter179 != (*_iter178).end(); ++_iter179)
          {
            {
              xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter179).size()));
              std::vector<int64_t> ::const_iterator _iter180;
              for (_iter180 = (*_iter179).begin(); _iter180 != (*_iter179).end(); ++_iter180)
              {
                xfer += oprot->writeI64((*_iter180));
              }
              xfer += oprot->writeListEnd();
            }
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.f64_tensor_array_value) {
    xfer += oprot->writeFieldBegin("f64_tensor_array_value", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->f64_tensor_array_value.size()));
      std::vector<std::vector<std::vector<double> > > ::const_iterator _iter181;
      for (_iter181 = this->f64_tensor_array_value.begin(); _iter181 != this->f64_tensor_array_value.end(); ++_iter181)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*_iter181).size()));
          std::vector<std::vector<double> > ::const_iterator _iter182;
          for (_iter182 = (*_iter181).begin(); _iter182 != (*_iter181).end(); ++_iter182)
          {
            {
              xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>((*_iter182).size()));
              std::vector<double> ::const_iterator _iter183;
              for (_iter183 = (*_iter182).begin(); _iter183 != (*_iter182).end(); ++_iter183)
              {
                xfer += oprot->writeDouble((*_iter183));
              }
              xfer += oprot->writeListEnd();
            }
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i64_array_idx) {
    xfer += oprot->writeFieldBegin("i64_array_idx", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->i64_array_idx.size()));
      std::vector<int64_t> ::const_iterator _iter184;
      for (_iter184 = this->i64_array_idx.begin(); _iter184 != this->i64_array_idx.end(); ++_iter184)
      {
        xfer += oprot->writeI64((*_iter184));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConstantExpr &a, ConstantExpr &b) {
  using ::std::swap;
  swap(a.literal_type, b.literal_type);
  swap(a.bool_value, b.bool_value);
  swap(a.i64_value, b.i64_value);
  swap(a.f64_value, b.f64_value);
  swap(a.str_value, b.str_value);
  swap(a.i64_array_value, b.i64_array_value);
  swap(a.f64_array_value, b.f64_array_value);
  swap(a.i64_tensor_value, b.i64_tensor_value);
  swap(a.f64_tensor_value, b.f64_tensor_value);
  swap(a.i64_tensor_array_value, b.i64_tensor_array_value);
  swap(a.f64_tensor_array_value, b.f64_tensor_array_value);
  swap(a.i64_array_idx, b.i64_array_idx);
  swap(a.__isset, b.__isset);
}

ConstantExpr::ConstantExpr(const ConstantExpr& other185) {
  literal_type = other185.literal_type;
  bool_value = other185.bool_value;
  i64_value = other185.i64_value;
  f64_value = other185.f64_value;
  str_value = other185.str_value;
  i64_array_value = other185.i64_array_value;
  f64_array_value = other185.f64_array_value;
  i64_tensor_value = other185.i64_tensor_value;
  f64_tensor_value = other185.f64_tensor_value;
  i64_tensor_array_value = other185.i64_tensor_array_value;
  f64_tensor_array_value = other185.f64_tensor_array_value;
  i64_array_idx = other185.i64_array_idx;
  __isset = other185.__isset;
}
ConstantExpr& ConstantExpr::operator=(const ConstantExpr& other186) {
  literal_type = other186.literal_type;
  bool_value = other186.bool_value;
  i64_value = other186.i64_value;
  f64_value = other186.f64_value;
  str_value = other186.str_value;
  i64_array_value = other186.i64_array_value;
  f64_array_value = other186.f64_array_value;
  i64_tensor_value = other186.i64_tensor_value;
  f64_tensor_value = other186.f64_tensor_value;
  i64_tensor_array_value = other186.i64_tensor_array_value;
  f64_tensor_array_value = other186.f64_tensor_array_value;
  i64_array_idx = other186.i64_array_idx;
  __isset = other186.__isset;
  return *this;
}
void ConstantExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ConstantExpr(";
  out << "literal_type=" << to_string(literal_type);
  out << ", " << "bool_value="; (__isset.bool_value ? (out << to_string(bool_value)) : (out << "<null>"));
  out << ", " << "i64_value="; (__isset.i64_value ? (out << to_string(i64_value)) : (out << "<null>"));
  out << ", " << "f64_value="; (__isset.f64_value ? (out << to_string(f64_value)) : (out << "<null>"));
  out << ", " << "str_value="; (__isset.str_value ? (out << to_string(str_value)) : (out << "<null>"));
  out << ", " << "i64_array_value="; (__isset.i64_array_value ? (out << to_string(i64_array_value)) : (out << "<null>"));
  out << ", " << "f64_array_value="; (__isset.f64_array_value ? (out << to_string(f64_array_value)) : (out << "<null>"));
  out << ", " << "i64_tensor_value="; (__isset.i64_tensor_value ? (out << to_string(i64_tensor_value)) : (out << "<null>"));
  out << ", " << "f64_tensor_value="; (__isset.f64_tensor_value ? (out << to_string(f64_tensor_value)) : (out << "<null>"));
  out << ", " << "i64_tensor_array_value="; (__isset.i64_tensor_array_value ? (out << to_string(i64_tensor_array_value)) : (out << "<null>"));
  out << ", " << "f64_tensor_array_value="; (__isset.f64_tensor_array_value ? (out << to_string(f64_tensor_array_value)) : (out << "<null>"));
  out << ", " << "i64_array_idx="; (__isset.i64_array_idx ? (out << to_string(i64_array_idx)) : (out << "<null>"));
  out << ")";
}


KnnExpr::~KnnExpr() noexcept {
}


void KnnExpr::__set_column_expr(const ColumnExpr& val) {
  this->column_expr = val;
}

void KnnExpr::__set_embedding_data(const EmbeddingData& val) {
  this->embedding_data = val;
}

void KnnExpr::__set_embedding_data_type(const ElementType::type val) {
  this->embedding_data_type = val;
}

void KnnExpr::__set_distance_type(const KnnDistanceType::type val) {
  this->distance_type = val;
}

void KnnExpr::__set_topn(const int64_t val) {
  this->topn = val;
}

void KnnExpr::__set_opt_params(const std::vector<InitParameter> & val) {
  this->opt_params = val;
}

void KnnExpr::__set_filter_expr(const ParsedExpr& val) {
  this->filter_expr = val;
__isset.filter_expr = true;
}
std::ostream& operator<<(std::ostream& out, const KnnExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t KnnExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->column_expr.read(iprot);
          this->__isset.column_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->embedding_data.read(iprot);
          this->__isset.embedding_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast187;
          xfer += iprot->readI32(ecast187);
          this->embedding_data_type = static_cast<ElementType::type>(ecast187);
          this->__isset.embedding_data_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast188;
          xfer += iprot->readI32(ecast188);
          this->distance_type = static_cast<KnnDistanceType::type>(ecast188);
          this->__isset.distance_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->topn);
          this->__isset.topn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->opt_params.clear();
            uint32_t _size189;
            ::apache::thrift::protocol::TType _etype192;
            xfer += iprot->readListBegin(_etype192, _size189);
            this->opt_params.resize(_size189);
            uint32_t _i193;
            for (_i193 = 0; _i193 < _size189; ++_i193)
            {
              xfer += this->opt_params[_i193].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.opt_params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->filter_expr.read(iprot);
          this->__isset.filter_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t KnnExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("KnnExpr");

  xfer += oprot->writeFieldBegin("column_expr", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->column_expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("embedding_data", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->embedding_data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("embedding_data_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(static_cast<int32_t>(this->embedding_data_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("distance_type", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(static_cast<int32_t>(this->distance_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topn", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->topn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("opt_params", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->opt_params.size()));
    std::vector<InitParameter> ::const_iterator _iter194;
    for (_iter194 = this->opt_params.begin(); _iter194 != this->opt_params.end(); ++_iter194)
    {
      xfer += (*_iter194).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.filter_expr) {
    xfer += oprot->writeFieldBegin("filter_expr", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->filter_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(KnnExpr &a, KnnExpr &b) {
  using ::std::swap;
  swap(a.column_expr, b.column_expr);
  swap(a.embedding_data, b.embedding_data);
  swap(a.embedding_data_type, b.embedding_data_type);
  swap(a.distance_type, b.distance_type);
  swap(a.topn, b.topn);
  swap(a.opt_params, b.opt_params);
  swap(a.filter_expr, b.filter_expr);
  swap(a.__isset, b.__isset);
}

KnnExpr::KnnExpr(const KnnExpr& other195) {
  column_expr = other195.column_expr;
  embedding_data = other195.embedding_data;
  embedding_data_type = other195.embedding_data_type;
  distance_type = other195.distance_type;
  topn = other195.topn;
  opt_params = other195.opt_params;
  filter_expr = other195.filter_expr;
  __isset = other195.__isset;
}
KnnExpr& KnnExpr::operator=(const KnnExpr& other196) {
  column_expr = other196.column_expr;
  embedding_data = other196.embedding_data;
  embedding_data_type = other196.embedding_data_type;
  distance_type = other196.distance_type;
  topn = other196.topn;
  opt_params = other196.opt_params;
  filter_expr = other196.filter_expr;
  __isset = other196.__isset;
  return *this;
}
void KnnExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "KnnExpr(";
  out << "column_expr=" << to_string(column_expr);
  out << ", " << "embedding_data=" << to_string(embedding_data);
  out << ", " << "embedding_data_type=" << to_string(embedding_data_type);
  out << ", " << "distance_type=" << to_string(distance_type);
  out << ", " << "topn=" << to_string(topn);
  out << ", " << "opt_params=" << to_string(opt_params);
  out << ", " << "filter_expr="; (__isset.filter_expr ? (out << to_string(filter_expr)) : (out << "<null>"));
  out << ")";
}


MatchSparseExpr::~MatchSparseExpr() noexcept {
}


void MatchSparseExpr::__set_column_expr(const ColumnExpr& val) {
  this->column_expr = val;
}

void MatchSparseExpr::__set_query_sparse_expr(const ConstantExpr& val) {
  this->query_sparse_expr = val;
}

void MatchSparseExpr::__set_metric_type(const std::string& val) {
  this->metric_type = val;
}

void MatchSparseExpr::__set_topn(const int64_t val) {
  this->topn = val;
}

void MatchSparseExpr::__set_opt_params(const std::vector<InitParameter> & val) {
  this->opt_params = val;
}

void MatchSparseExpr::__set_filter_expr(const ParsedExpr& val) {
  this->filter_expr = val;
__isset.filter_expr = true;
}
std::ostream& operator<<(std::ostream& out, const MatchSparseExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MatchSparseExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->column_expr.read(iprot);
          this->__isset.column_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->query_sparse_expr.read(iprot);
          this->__isset.query_sparse_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->metric_type);
          this->__isset.metric_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->topn);
          this->__isset.topn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->opt_params.clear();
            uint32_t _size197;
            ::apache::thrift::protocol::TType _etype200;
            xfer += iprot->readListBegin(_etype200, _size197);
            this->opt_params.resize(_size197);
            uint32_t _i201;
            for (_i201 = 0; _i201 < _size197; ++_i201)
            {
              xfer += this->opt_params[_i201].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.opt_params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->filter_expr.read(iprot);
          this->__isset.filter_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MatchSparseExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MatchSparseExpr");

  xfer += oprot->writeFieldBegin("column_expr", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->column_expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("query_sparse_expr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->query_sparse_expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metric_type", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->metric_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topn", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->topn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("opt_params", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->opt_params.size()));
    std::vector<InitParameter> ::const_iterator _iter202;
    for (_iter202 = this->opt_params.begin(); _iter202 != this->opt_params.end(); ++_iter202)
    {
      xfer += (*_iter202).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.filter_expr) {
    xfer += oprot->writeFieldBegin("filter_expr", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->filter_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MatchSparseExpr &a, MatchSparseExpr &b) {
  using ::std::swap;
  swap(a.column_expr, b.column_expr);
  swap(a.query_sparse_expr, b.query_sparse_expr);
  swap(a.metric_type, b.metric_type);
  swap(a.topn, b.topn);
  swap(a.opt_params, b.opt_params);
  swap(a.filter_expr, b.filter_expr);
  swap(a.__isset, b.__isset);
}

MatchSparseExpr::MatchSparseExpr(const MatchSparseExpr& other203) {
  column_expr = other203.column_expr;
  query_sparse_expr = other203.query_sparse_expr;
  metric_type = other203.metric_type;
  topn = other203.topn;
  opt_params = other203.opt_params;
  filter_expr = other203.filter_expr;
  __isset = other203.__isset;
}
MatchSparseExpr& MatchSparseExpr::operator=(const MatchSparseExpr& other204) {
  column_expr = other204.column_expr;
  query_sparse_expr = other204.query_sparse_expr;
  metric_type = other204.metric_type;
  topn = other204.topn;
  opt_params = other204.opt_params;
  filter_expr = other204.filter_expr;
  __isset = other204.__isset;
  return *this;
}
void MatchSparseExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MatchSparseExpr(";
  out << "column_expr=" << to_string(column_expr);
  out << ", " << "query_sparse_expr=" << to_string(query_sparse_expr);
  out << ", " << "metric_type=" << to_string(metric_type);
  out << ", " << "topn=" << to_string(topn);
  out << ", " << "opt_params=" << to_string(opt_params);
  out << ", " << "filter_expr="; (__isset.filter_expr ? (out << to_string(filter_expr)) : (out << "<null>"));
  out << ")";
}


MatchTensorExpr::~MatchTensorExpr() noexcept {
}


void MatchTensorExpr::__set_search_method(const std::string& val) {
  this->search_method = val;
}

void MatchTensorExpr::__set_column_expr(const ColumnExpr& val) {
  this->column_expr = val;
}

void MatchTensorExpr::__set_embedding_data_type(const ElementType::type val) {
  this->embedding_data_type = val;
}

void MatchTensorExpr::__set_embedding_data(const EmbeddingData& val) {
  this->embedding_data = val;
}

void MatchTensorExpr::__set_extra_options(const std::string& val) {
  this->extra_options = val;
}

void MatchTensorExpr::__set_filter_expr(const ParsedExpr& val) {
  this->filter_expr = val;
__isset.filter_expr = true;
}
std::ostream& operator<<(std::ostream& out, const MatchTensorExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MatchTensorExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->search_method);
          this->__isset.search_method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->column_expr.read(iprot);
          this->__isset.column_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast205;
          xfer += iprot->readI32(ecast205);
          this->embedding_data_type = static_cast<ElementType::type>(ecast205);
          this->__isset.embedding_data_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->embedding_data.read(iprot);
          this->__isset.embedding_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extra_options);
          this->__isset.extra_options = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->filter_expr.read(iprot);
          this->__isset.filter_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MatchTensorExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MatchTensorExpr");

  xfer += oprot->writeFieldBegin("search_method", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->search_method);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_expr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->column_expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("embedding_data_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(static_cast<int32_t>(this->embedding_data_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("embedding_data", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->embedding_data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra_options", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->extra_options);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.filter_expr) {
    xfer += oprot->writeFieldBegin("filter_expr", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->filter_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MatchTensorExpr &a, MatchTensorExpr &b) {
  using ::std::swap;
  swap(a.search_method, b.search_method);
  swap(a.column_expr, b.column_expr);
  swap(a.embedding_data_type, b.embedding_data_type);
  swap(a.embedding_data, b.embedding_data);
  swap(a.extra_options, b.extra_options);
  swap(a.filter_expr, b.filter_expr);
  swap(a.__isset, b.__isset);
}

MatchTensorExpr::MatchTensorExpr(const MatchTensorExpr& other206) {
  search_method = other206.search_method;
  column_expr = other206.column_expr;
  embedding_data_type = other206.embedding_data_type;
  embedding_data = other206.embedding_data;
  extra_options = other206.extra_options;
  filter_expr = other206.filter_expr;
  __isset = other206.__isset;
}
MatchTensorExpr& MatchTensorExpr::operator=(const MatchTensorExpr& other207) {
  search_method = other207.search_method;
  column_expr = other207.column_expr;
  embedding_data_type = other207.embedding_data_type;
  embedding_data = other207.embedding_data;
  extra_options = other207.extra_options;
  filter_expr = other207.filter_expr;
  __isset = other207.__isset;
  return *this;
}
void MatchTensorExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MatchTensorExpr(";
  out << "search_method=" << to_string(search_method);
  out << ", " << "column_expr=" << to_string(column_expr);
  out << ", " << "embedding_data_type=" << to_string(embedding_data_type);
  out << ", " << "embedding_data=" << to_string(embedding_data);
  out << ", " << "extra_options=" << to_string(extra_options);
  out << ", " << "filter_expr="; (__isset.filter_expr ? (out << to_string(filter_expr)) : (out << "<null>"));
  out << ")";
}


MatchExpr::~MatchExpr() noexcept {
}


void MatchExpr::__set_fields(const std::string& val) {
  this->fields = val;
}

void MatchExpr::__set_matching_text(const std::string& val) {
  this->matching_text = val;
}

void MatchExpr::__set_options_text(const std::string& val) {
  this->options_text = val;
}

void MatchExpr::__set_filter_expr(const ParsedExpr& val) {
  this->filter_expr = val;
__isset.filter_expr = true;
}
std::ostream& operator<<(std::ostream& out, const MatchExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MatchExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fields);
          this->__isset.fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->matching_text);
          this->__isset.matching_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->options_text);
          this->__isset.options_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->filter_expr.read(iprot);
          this->__isset.filter_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MatchExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MatchExpr");

  xfer += oprot->writeFieldBegin("fields", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->fields);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("matching_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->matching_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("options_text", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->options_text);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.filter_expr) {
    xfer += oprot->writeFieldBegin("filter_expr", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->filter_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MatchExpr &a, MatchExpr &b) {
  using ::std::swap;
  swap(a.fields, b.fields);
  swap(a.matching_text, b.matching_text);
  swap(a.options_text, b.options_text);
  swap(a.filter_expr, b.filter_expr);
  swap(a.__isset, b.__isset);
}

MatchExpr::MatchExpr(const MatchExpr& other208) {
  fields = other208.fields;
  matching_text = other208.matching_text;
  options_text = other208.options_text;
  filter_expr = other208.filter_expr;
  __isset = other208.__isset;
}
MatchExpr& MatchExpr::operator=(const MatchExpr& other209) {
  fields = other209.fields;
  matching_text = other209.matching_text;
  options_text = other209.options_text;
  filter_expr = other209.filter_expr;
  __isset = other209.__isset;
  return *this;
}
void MatchExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MatchExpr(";
  out << "fields=" << to_string(fields);
  out << ", " << "matching_text=" << to_string(matching_text);
  out << ", " << "options_text=" << to_string(options_text);
  out << ", " << "filter_expr="; (__isset.filter_expr ? (out << to_string(filter_expr)) : (out << "<null>"));
  out << ")";
}


GenericMatchExpr::~GenericMatchExpr() noexcept {
}


void GenericMatchExpr::__set_match_vector_expr(::std::shared_ptr<KnnExpr> val) {
  this->match_vector_expr = val;
__isset.match_vector_expr = true;
}

void GenericMatchExpr::__set_match_sparse_expr(::std::shared_ptr<MatchSparseExpr> val) {
  this->match_sparse_expr = val;
__isset.match_sparse_expr = true;
}

void GenericMatchExpr::__set_match_tensor_expr(::std::shared_ptr<MatchTensorExpr> val) {
  this->match_tensor_expr = val;
__isset.match_tensor_expr = true;
}

void GenericMatchExpr::__set_match_text_expr(::std::shared_ptr<MatchExpr> val) {
  this->match_text_expr = val;
__isset.match_text_expr = true;
}
std::ostream& operator<<(std::ostream& out, const GenericMatchExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GenericMatchExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->match_vector_expr) { 
            this->match_vector_expr = ::std::shared_ptr<KnnExpr>(new KnnExpr);
          }
          xfer += this->match_vector_expr->read(iprot);
          bool wasSet = false;
          if (this->match_vector_expr->__isset.column_expr) { wasSet = true; }
          if (this->match_vector_expr->__isset.embedding_data) { wasSet = true; }
          if (this->match_vector_expr->__isset.embedding_data_type) { wasSet = true; }
          if (this->match_vector_expr->__isset.distance_type) { wasSet = true; }
          if (this->match_vector_expr->__isset.topn) { wasSet = true; }
          if (this->match_vector_expr->__isset.opt_params) { wasSet = true; }
          if (this->match_vector_expr->__isset.filter_expr) { wasSet = true; }
          if (!wasSet) { this->match_vector_expr.reset(); }
          this->__isset.match_vector_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->match_sparse_expr) { 
            this->match_sparse_expr = ::std::shared_ptr<MatchSparseExpr>(new MatchSparseExpr);
          }
          xfer += this->match_sparse_expr->read(iprot);
          bool wasSet = false;
          if (this->match_sparse_expr->__isset.column_expr) { wasSet = true; }
          if (this->match_sparse_expr->__isset.query_sparse_expr) { wasSet = true; }
          if (this->match_sparse_expr->__isset.metric_type) { wasSet = true; }
          if (this->match_sparse_expr->__isset.topn) { wasSet = true; }
          if (this->match_sparse_expr->__isset.opt_params) { wasSet = true; }
          if (this->match_sparse_expr->__isset.filter_expr) { wasSet = true; }
          if (!wasSet) { this->match_sparse_expr.reset(); }
          this->__isset.match_sparse_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->match_tensor_expr) { 
            this->match_tensor_expr = ::std::shared_ptr<MatchTensorExpr>(new MatchTensorExpr);
          }
          xfer += this->match_tensor_expr->read(iprot);
          bool wasSet = false;
          if (this->match_tensor_expr->__isset.search_method) { wasSet = true; }
          if (this->match_tensor_expr->__isset.column_expr) { wasSet = true; }
          if (this->match_tensor_expr->__isset.embedding_data_type) { wasSet = true; }
          if (this->match_tensor_expr->__isset.embedding_data) { wasSet = true; }
          if (this->match_tensor_expr->__isset.extra_options) { wasSet = true; }
          if (this->match_tensor_expr->__isset.filter_expr) { wasSet = true; }
          if (!wasSet) { this->match_tensor_expr.reset(); }
          this->__isset.match_tensor_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->match_text_expr) { 
            this->match_text_expr = ::std::shared_ptr<MatchExpr>(new MatchExpr);
          }
          xfer += this->match_text_expr->read(iprot);
          bool wasSet = false;
          if (this->match_text_expr->__isset.fields) { wasSet = true; }
          if (this->match_text_expr->__isset.matching_text) { wasSet = true; }
          if (this->match_text_expr->__isset.options_text) { wasSet = true; }
          if (this->match_text_expr->__isset.filter_expr) { wasSet = true; }
          if (!wasSet) { this->match_text_expr.reset(); }
          this->__isset.match_text_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GenericMatchExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GenericMatchExpr");

  if (this->__isset.match_vector_expr) {
    xfer += oprot->writeFieldBegin("match_vector_expr", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->match_vector_expr) {
      xfer += this->match_vector_expr->write(oprot); 
    } else {oprot->writeStructBegin("KnnExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.match_sparse_expr) {
    xfer += oprot->writeFieldBegin("match_sparse_expr", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->match_sparse_expr) {
      xfer += this->match_sparse_expr->write(oprot); 
    } else {oprot->writeStructBegin("MatchSparseExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.match_tensor_expr) {
    xfer += oprot->writeFieldBegin("match_tensor_expr", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->match_tensor_expr) {
      xfer += this->match_tensor_expr->write(oprot); 
    } else {oprot->writeStructBegin("MatchTensorExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.match_text_expr) {
    xfer += oprot->writeFieldBegin("match_text_expr", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->match_text_expr) {
      xfer += this->match_text_expr->write(oprot); 
    } else {oprot->writeStructBegin("MatchExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GenericMatchExpr &a, GenericMatchExpr &b) {
  using ::std::swap;
  swap(a.match_vector_expr, b.match_vector_expr);
  swap(a.match_sparse_expr, b.match_sparse_expr);
  swap(a.match_tensor_expr, b.match_tensor_expr);
  swap(a.match_text_expr, b.match_text_expr);
  swap(a.__isset, b.__isset);
}

GenericMatchExpr::GenericMatchExpr(const GenericMatchExpr& other210) {
  match_vector_expr = other210.match_vector_expr;
  match_sparse_expr = other210.match_sparse_expr;
  match_tensor_expr = other210.match_tensor_expr;
  match_text_expr = other210.match_text_expr;
  __isset = other210.__isset;
}
GenericMatchExpr& GenericMatchExpr::operator=(const GenericMatchExpr& other211) {
  match_vector_expr = other211.match_vector_expr;
  match_sparse_expr = other211.match_sparse_expr;
  match_tensor_expr = other211.match_tensor_expr;
  match_text_expr = other211.match_text_expr;
  __isset = other211.__isset;
  return *this;
}
void GenericMatchExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GenericMatchExpr(";
  out << "match_vector_expr="; (__isset.match_vector_expr ? (out << to_string(match_vector_expr)) : (out << "<null>"));
  out << ", " << "match_sparse_expr="; (__isset.match_sparse_expr ? (out << to_string(match_sparse_expr)) : (out << "<null>"));
  out << ", " << "match_tensor_expr="; (__isset.match_tensor_expr ? (out << to_string(match_tensor_expr)) : (out << "<null>"));
  out << ", " << "match_text_expr="; (__isset.match_text_expr ? (out << to_string(match_text_expr)) : (out << "<null>"));
  out << ")";
}


FusionExpr::~FusionExpr() noexcept {
}


void FusionExpr::__set_method(const std::string& val) {
  this->method = val;
}

void FusionExpr::__set_options_text(const std::string& val) {
  this->options_text = val;
}

void FusionExpr::__set_optional_match_tensor_expr(const MatchTensorExpr& val) {
  this->optional_match_tensor_expr = val;
__isset.optional_match_tensor_expr = true;
}
std::ostream& operator<<(std::ostream& out, const FusionExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FusionExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->method);
          this->__isset.method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->options_text);
          this->__isset.options_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->optional_match_tensor_expr.read(iprot);
          this->__isset.optional_match_tensor_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FusionExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FusionExpr");

  xfer += oprot->writeFieldBegin("method", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->method);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("options_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->options_text);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.optional_match_tensor_expr) {
    xfer += oprot->writeFieldBegin("optional_match_tensor_expr", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->optional_match_tensor_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FusionExpr &a, FusionExpr &b) {
  using ::std::swap;
  swap(a.method, b.method);
  swap(a.options_text, b.options_text);
  swap(a.optional_match_tensor_expr, b.optional_match_tensor_expr);
  swap(a.__isset, b.__isset);
}

FusionExpr::FusionExpr(const FusionExpr& other212) {
  method = other212.method;
  options_text = other212.options_text;
  optional_match_tensor_expr = other212.optional_match_tensor_expr;
  __isset = other212.__isset;
}
FusionExpr& FusionExpr::operator=(const FusionExpr& other213) {
  method = other213.method;
  options_text = other213.options_text;
  optional_match_tensor_expr = other213.optional_match_tensor_expr;
  __isset = other213.__isset;
  return *this;
}
void FusionExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FusionExpr(";
  out << "method=" << to_string(method);
  out << ", " << "options_text=" << to_string(options_text);
  out << ", " << "optional_match_tensor_expr="; (__isset.optional_match_tensor_expr ? (out << to_string(optional_match_tensor_expr)) : (out << "<null>"));
  out << ")";
}


SearchExpr::~SearchExpr() noexcept {
}


void SearchExpr::__set_match_exprs(const std::vector<GenericMatchExpr> & val) {
  this->match_exprs = val;
__isset.match_exprs = true;
}

void SearchExpr::__set_fusion_exprs(const std::vector<FusionExpr> & val) {
  this->fusion_exprs = val;
__isset.fusion_exprs = true;
}
std::ostream& operator<<(std::ostream& out, const SearchExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SearchExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->match_exprs.clear();
            uint32_t _size214;
            ::apache::thrift::protocol::TType _etype217;
            xfer += iprot->readListBegin(_etype217, _size214);
            this->match_exprs.resize(_size214);
            uint32_t _i218;
            for (_i218 = 0; _i218 < _size214; ++_i218)
            {
              xfer += this->match_exprs[_i218].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.match_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fusion_exprs.clear();
            uint32_t _size219;
            ::apache::thrift::protocol::TType _etype222;
            xfer += iprot->readListBegin(_etype222, _size219);
            this->fusion_exprs.resize(_size219);
            uint32_t _i223;
            for (_i223 = 0; _i223 < _size219; ++_i223)
            {
              xfer += this->fusion_exprs[_i223].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.fusion_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchExpr");

  if (this->__isset.match_exprs) {
    xfer += oprot->writeFieldBegin("match_exprs", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->match_exprs.size()));
      std::vector<GenericMatchExpr> ::const_iterator _iter224;
      for (_iter224 = this->match_exprs.begin(); _iter224 != this->match_exprs.end(); ++_iter224)
      {
        xfer += (*_iter224).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fusion_exprs) {
    xfer += oprot->writeFieldBegin("fusion_exprs", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fusion_exprs.size()));
      std::vector<FusionExpr> ::const_iterator _iter225;
      for (_iter225 = this->fusion_exprs.begin(); _iter225 != this->fusion_exprs.end(); ++_iter225)
      {
        xfer += (*_iter225).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchExpr &a, SearchExpr &b) {
  using ::std::swap;
  swap(a.match_exprs, b.match_exprs);
  swap(a.fusion_exprs, b.fusion_exprs);
  swap(a.__isset, b.__isset);
}

SearchExpr::SearchExpr(const SearchExpr& other226) {
  match_exprs = other226.match_exprs;
  fusion_exprs = other226.fusion_exprs;
  __isset = other226.__isset;
}
SearchExpr& SearchExpr::operator=(const SearchExpr& other227) {
  match_exprs = other227.match_exprs;
  fusion_exprs = other227.fusion_exprs;
  __isset = other227.__isset;
  return *this;
}
void SearchExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchExpr(";
  out << "match_exprs="; (__isset.match_exprs ? (out << to_string(match_exprs)) : (out << "<null>"));
  out << ", " << "fusion_exprs="; (__isset.fusion_exprs ? (out << to_string(fusion_exprs)) : (out << "<null>"));
  out << ")";
}


FunctionExpr::~FunctionExpr() noexcept {
}


void FunctionExpr::__set_function_name(const std::string& val) {
  this->function_name = val;
}

void FunctionExpr::__set_arguments(const std::vector<ParsedExpr> & val) {
  this->arguments = val;
}
std::ostream& operator<<(std::ostream& out, const FunctionExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FunctionExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->function_name);
          this->__isset.function_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->arguments.clear();
            uint32_t _size228;
            ::apache::thrift::protocol::TType _etype231;
            xfer += iprot->readListBegin(_etype231, _size228);
            this->arguments.resize(_size228);
            uint32_t _i232;
            for (_i232 = 0; _i232 < _size228; ++_i232)
            {
              xfer += this->arguments[_i232].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.arguments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FunctionExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FunctionExpr");

  xfer += oprot->writeFieldBegin("function_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->function_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->arguments.size()));
    std::vector<ParsedExpr> ::const_iterator _iter233;
    for (_iter233 = this->arguments.begin(); _iter233 != this->arguments.end(); ++_iter233)
    {
      xfer += (*_iter233).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FunctionExpr &a, FunctionExpr &b) {
  using ::std::swap;
  swap(a.function_name, b.function_name);
  swap(a.arguments, b.arguments);
  swap(a.__isset, b.__isset);
}

FunctionExpr::FunctionExpr(const FunctionExpr& other234) {
  function_name = other234.function_name;
  arguments = other234.arguments;
  __isset = other234.__isset;
}
FunctionExpr& FunctionExpr::operator=(const FunctionExpr& other235) {
  function_name = other235.function_name;
  arguments = other235.arguments;
  __isset = other235.__isset;
  return *this;
}
void FunctionExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FunctionExpr(";
  out << "function_name=" << to_string(function_name);
  out << ", " << "arguments=" << to_string(arguments);
  out << ")";
}


BetweenExpr::~BetweenExpr() noexcept {
}


void BetweenExpr::__set_value(const ParsedExpr& val) {
  this->value = val;
}

void BetweenExpr::__set_upper_bound(const ParsedExpr& val) {
  this->upper_bound = val;
}

void BetweenExpr::__set_lower_bound(const ParsedExpr& val) {
  this->lower_bound = val;
}
std::ostream& operator<<(std::ostream& out, const BetweenExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BetweenExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->upper_bound.read(iprot);
          this->__isset.upper_bound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lower_bound.read(iprot);
          this->__isset.lower_bound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BetweenExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BetweenExpr");

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("upper_bound", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->upper_bound.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lower_bound", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->lower_bound.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BetweenExpr &a, BetweenExpr &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.upper_bound, b.upper_bound);
  swap(a.lower_bound, b.lower_bound);
  swap(a.__isset, b.__isset);
}

BetweenExpr::BetweenExpr(const BetweenExpr& other236) {
  value = other236.value;
  upper_bound = other236.upper_bound;
  lower_bound = other236.lower_bound;
  __isset = other236.__isset;
}
BetweenExpr& BetweenExpr::operator=(const BetweenExpr& other237) {
  value = other237.value;
  upper_bound = other237.upper_bound;
  lower_bound = other237.lower_bound;
  __isset = other237.__isset;
  return *this;
}
void BetweenExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BetweenExpr(";
  out << "value=" << to_string(value);
  out << ", " << "upper_bound=" << to_string(upper_bound);
  out << ", " << "lower_bound=" << to_string(lower_bound);
  out << ")";
}


UpdateExpr::~UpdateExpr() noexcept {
}


void UpdateExpr::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void UpdateExpr::__set_value(const ParsedExpr& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateExpr");

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateExpr &a, UpdateExpr &b) {
  using ::std::swap;
  swap(a.column_name, b.column_name);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

UpdateExpr::UpdateExpr(const UpdateExpr& other238) {
  column_name = other238.column_name;
  value = other238.value;
  __isset = other238.__isset;
}
UpdateExpr& UpdateExpr::operator=(const UpdateExpr& other239) {
  column_name = other239.column_name;
  value = other239.value;
  __isset = other239.__isset;
  return *this;
}
void UpdateExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateExpr(";
  out << "column_name=" << to_string(column_name);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


OrderByExpr::~OrderByExpr() noexcept {
}


void OrderByExpr::__set_expr(const ParsedExpr& val) {
  this->expr = val;
}

void OrderByExpr::__set_asc(const bool val) {
  this->asc = val;
}
std::ostream& operator<<(std::ostream& out, const OrderByExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t OrderByExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->expr.read(iprot);
          this->__isset.expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->asc);
          this->__isset.asc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OrderByExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OrderByExpr");

  xfer += oprot->writeFieldBegin("expr", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("asc", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->asc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OrderByExpr &a, OrderByExpr &b) {
  using ::std::swap;
  swap(a.expr, b.expr);
  swap(a.asc, b.asc);
  swap(a.__isset, b.__isset);
}

OrderByExpr::OrderByExpr(const OrderByExpr& other240) {
  expr = other240.expr;
  asc = other240.asc;
  __isset = other240.__isset;
}
OrderByExpr& OrderByExpr::operator=(const OrderByExpr& other241) {
  expr = other241.expr;
  asc = other241.asc;
  __isset = other241.__isset;
  return *this;
}
void OrderByExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OrderByExpr(";
  out << "expr=" << to_string(expr);
  out << ", " << "asc=" << to_string(asc);
  out << ")";
}


ColumnDef::~ColumnDef() noexcept {
}


void ColumnDef::__set_id(const int32_t val) {
  this->id = val;
}

void ColumnDef::__set_name(const std::string& val) {
  this->name = val;
}

void ColumnDef::__set_data_type(const DataType& val) {
  this->data_type = val;
}

void ColumnDef::__set_constraints(const std::vector<Constraint::type> & val) {
  this->constraints = val;
}

void ColumnDef::__set_constant_expr(const ConstantExpr& val) {
  this->constant_expr = val;
}
std::ostream& operator<<(std::ostream& out, const ColumnDef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ColumnDef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_type.read(iprot);
          this->__isset.data_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->constraints.clear();
            uint32_t _size242;
            ::apache::thrift::protocol::TType _etype245;
            xfer += iprot->readListBegin(_etype245, _size242);
            this->constraints.resize(_size242);
            uint32_t _i246;
            for (_i246 = 0; _i246 < _size242; ++_i246)
            {
              int32_t ecast247;
              xfer += iprot->readI32(ecast247);
              this->constraints[_i246] = static_cast<Constraint::type>(ecast247);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.constraints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->constant_expr.read(iprot);
          this->__isset.constant_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ColumnDef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnDef");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_type", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->data_type.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("constraints", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->constraints.size()));
    std::vector<Constraint::type> ::const_iterator _iter248;
    for (_iter248 = this->constraints.begin(); _iter248 != this->constraints.end(); ++_iter248)
    {
      xfer += oprot->writeI32(static_cast<int32_t>((*_iter248)));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("constant_expr", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->constant_expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnDef &a, ColumnDef &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.data_type, b.data_type);
  swap(a.constraints, b.constraints);
  swap(a.constant_expr, b.constant_expr);
  swap(a.__isset, b.__isset);
}

ColumnDef::ColumnDef(const ColumnDef& other249) {
  id = other249.id;
  name = other249.name;
  data_type = other249.data_type;
  constraints = other249.constraints;
  constant_expr = other249.constant_expr;
  __isset = other249.__isset;
}
ColumnDef& ColumnDef::operator=(const ColumnDef& other250) {
  id = other250.id;
  name = other250.name;
  data_type = other250.data_type;
  constraints = other250.constraints;
  constant_expr = other250.constant_expr;
  __isset = other250.__isset;
  return *this;
}
void ColumnDef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnDef(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "data_type=" << to_string(data_type);
  out << ", " << "constraints=" << to_string(constraints);
  out << ", " << "constant_expr=" << to_string(constant_expr);
  out << ")";
}


Field::~Field() noexcept {
}


void Field::__set_parse_exprs(const std::vector<ParsedExpr> & val) {
  this->parse_exprs = val;
}
std::ostream& operator<<(std::ostream& out, const Field& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Field::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->parse_exprs.clear();
            uint32_t _size251;
            ::apache::thrift::protocol::TType _etype254;
            xfer += iprot->readListBegin(_etype254, _size251);
            this->parse_exprs.resize(_size251);
            uint32_t _i255;
            for (_i255 = 0; _i255 < _size251; ++_i255)
            {
              xfer += this->parse_exprs[_i255].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.parse_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Field::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Field");

  xfer += oprot->writeFieldBegin("parse_exprs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->parse_exprs.size()));
    std::vector<ParsedExpr> ::const_iterator _iter256;
    for (_iter256 = this->parse_exprs.begin(); _iter256 != this->parse_exprs.end(); ++_iter256)
    {
      xfer += (*_iter256).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Field &a, Field &b) {
  using ::std::swap;
  swap(a.parse_exprs, b.parse_exprs);
  swap(a.__isset, b.__isset);
}

Field::Field(const Field& other257) {
  parse_exprs = other257.parse_exprs;
  __isset = other257.__isset;
}
Field& Field::operator=(const Field& other258) {
  parse_exprs = other258.parse_exprs;
  __isset = other258.__isset;
  return *this;
}
void Field::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Field(";
  out << "parse_exprs=" << to_string(parse_exprs);
  out << ")";
}


ColumnField::~ColumnField() noexcept {
}


void ColumnField::__set_column_type(const ColumnType::type val) {
  this->column_type = val;
}

void ColumnField::__set_column_vectors(const std::vector<std::string> & val) {
  this->column_vectors = val;
}

void ColumnField::__set_column_name(const std::string& val) {
  this->column_name = val;
}
std::ostream& operator<<(std::ostream& out, const ColumnField& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ColumnField::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast259;
          xfer += iprot->readI32(ecast259);
          this->column_type = static_cast<ColumnType::type>(ecast259);
          this->__isset.column_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_vectors.clear();
            uint32_t _size260;
            ::apache::thrift::protocol::TType _etype263;
            xfer += iprot->readListBegin(_etype263, _size260);
            this->column_vectors.resize(_size260);
            uint32_t _i264;
            for (_i264 = 0; _i264 < _size260; ++_i264)
            {
              xfer += iprot->readBinary(this->column_vectors[_i264]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_vectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ColumnField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnField");

  xfer += oprot->writeFieldBegin("column_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->column_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_vectors", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_vectors.size()));
    std::vector<std::string> ::const_iterator _iter265;
    for (_iter265 = this->column_vectors.begin(); _iter265 != this->column_vectors.end(); ++_iter265)
    {
      xfer += oprot->writeBinary((*_iter265));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnField &a, ColumnField &b) {
  using ::std::swap;
  swap(a.column_type, b.column_type);
  swap(a.column_vectors, b.column_vectors);
  swap(a.column_name, b.column_name);
  swap(a.__isset, b.__isset);
}

ColumnField::ColumnField(const ColumnField& other266) {
  column_type = other266.column_type;
  column_vectors = other266.column_vectors;
  column_name = other266.column_name;
  __isset = other266.__isset;
}
ColumnField& ColumnField::operator=(const ColumnField& other267) {
  column_type = other267.column_type;
  column_vectors = other267.column_vectors;
  column_name = other267.column_name;
  __isset = other267.__isset;
  return *this;
}
void ColumnField::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnField(";
  out << "column_type=" << to_string(column_type);
  out << ", " << "column_vectors=" << to_string(column_vectors);
  out << ", " << "column_name=" << to_string(column_name);
  out << ")";
}


ImportOption::~ImportOption() noexcept {
}


void ImportOption::__set_delimiter(const std::string& val) {
  this->delimiter = val;
}

void ImportOption::__set_has_header(const bool val) {
  this->has_header = val;
}

void ImportOption::__set_copy_file_type(const CopyFileType::type val) {
  this->copy_file_type = val;
}
std::ostream& operator<<(std::ostream& out, const ImportOption& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ImportOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->delimiter);
          this->__isset.delimiter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_header);
          this->__isset.has_header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast268;
          xfer += iprot->readI32(ecast268);
          this->copy_file_type = static_cast<CopyFileType::type>(ecast268);
          this->__isset.copy_file_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ImportOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ImportOption");

  xfer += oprot->writeFieldBegin("delimiter", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->delimiter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_header", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_header);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("copy_file_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(static_cast<int32_t>(this->copy_file_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ImportOption &a, ImportOption &b) {
  using ::std::swap;
  swap(a.delimiter, b.delimiter);
  swap(a.has_header, b.has_header);
  swap(a.copy_file_type, b.copy_file_type);
  swap(a.__isset, b.__isset);
}

ImportOption::ImportOption(const ImportOption& other269) {
  delimiter = other269.delimiter;
  has_header = other269.has_header;
  copy_file_type = other269.copy_file_type;
  __isset = other269.__isset;
}
ImportOption& ImportOption::operator=(const ImportOption& other270) {
  delimiter = other270.delimiter;
  has_header = other270.has_header;
  copy_file_type = other270.copy_file_type;
  __isset = other270.__isset;
  return *this;
}
void ImportOption::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ImportOption(";
  out << "delimiter=" << to_string(delimiter);
  out << ", " << "has_header=" << to_string(has_header);
  out << ", " << "copy_file_type=" << to_string(copy_file_type);
  out << ")";
}


ExportOption::~ExportOption() noexcept {
}


void ExportOption::__set_delimiter(const std::string& val) {
  this->delimiter = val;
}

void ExportOption::__set_has_header(const bool val) {
  this->has_header = val;
}

void ExportOption::__set_copy_file_type(const CopyFileType::type val) {
  this->copy_file_type = val;
}

void ExportOption::__set_offset(const int64_t val) {
  this->offset = val;
}

void ExportOption::__set_limit(const int64_t val) {
  this->limit = val;
}

void ExportOption::__set_row_limit(const int64_t val) {
  this->row_limit = val;
}
std::ostream& operator<<(std::ostream& out, const ExportOption& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExportOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->delimiter);
          this->__isset.delimiter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_header);
          this->__isset.has_header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast271;
          xfer += iprot->readI32(ecast271);
          this->copy_file_type = static_cast<CopyFileType::type>(ecast271);
          this->__isset.copy_file_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->offset);
          this->__isset.offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->row_limit);
          this->__isset.row_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExportOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExportOption");

  xfer += oprot->writeFieldBegin("delimiter", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->delimiter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_header", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_header);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("copy_file_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(static_cast<int32_t>(this->copy_file_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_limit", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->row_limit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExportOption &a, ExportOption &b) {
  using ::std::swap;
  swap(a.delimiter, b.delimiter);
  swap(a.has_header, b.has_header);
  swap(a.copy_file_type, b.copy_file_type);
  swap(a.offset, b.offset);
  swap(a.limit, b.limit);
  swap(a.row_limit, b.row_limit);
  swap(a.__isset, b.__isset);
}

ExportOption::ExportOption(const ExportOption& other272) {
  delimiter = other272.delimiter;
  has_header = other272.has_header;
  copy_file_type = other272.copy_file_type;
  offset = other272.offset;
  limit = other272.limit;
  row_limit = other272.row_limit;
  __isset = other272.__isset;
}
ExportOption& ExportOption::operator=(const ExportOption& other273) {
  delimiter = other273.delimiter;
  has_header = other273.has_header;
  copy_file_type = other273.copy_file_type;
  offset = other273.offset;
  limit = other273.limit;
  row_limit = other273.row_limit;
  __isset = other273.__isset;
  return *this;
}
void ExportOption::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExportOption(";
  out << "delimiter=" << to_string(delimiter);
  out << ", " << "has_header=" << to_string(has_header);
  out << ", " << "copy_file_type=" << to_string(copy_file_type);
  out << ", " << "offset=" << to_string(offset);
  out << ", " << "limit=" << to_string(limit);
  out << ", " << "row_limit=" << to_string(row_limit);
  out << ")";
}


OptimizeOptions::~OptimizeOptions() noexcept {
}


void OptimizeOptions::__set_index_name(const std::string& val) {
  this->index_name = val;
}

void OptimizeOptions::__set_opt_params(const std::vector<InitParameter> & val) {
  this->opt_params = val;
}
std::ostream& operator<<(std::ostream& out, const OptimizeOptions& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t OptimizeOptions::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_name);
          this->__isset.index_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->opt_params.clear();
            uint32_t _size274;
            ::apache::thrift::protocol::TType _etype277;
            xfer += iprot->readListBegin(_etype277, _size274);
            this->opt_params.resize(_size274);
            uint32_t _i278;
            for (_i278 = 0; _i278 < _size274; ++_i278)
            {
              xfer += this->opt_params[_i278].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.opt_params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OptimizeOptions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OptimizeOptions");

  xfer += oprot->writeFieldBegin("index_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->index_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("opt_params", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->opt_params.size()));
    std::vector<InitParameter> ::const_iterator _iter279;
    for (_iter279 = this->opt_params.begin(); _iter279 != this->opt_params.end(); ++_iter279)
    {
      xfer += (*_iter279).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OptimizeOptions &a, OptimizeOptions &b) {
  using ::std::swap;
  swap(a.index_name, b.index_name);
  swap(a.opt_params, b.opt_params);
  swap(a.__isset, b.__isset);
}

OptimizeOptions::OptimizeOptions(const OptimizeOptions& other280) {
  index_name = other280.index_name;
  opt_params = other280.opt_params;
  __isset = other280.__isset;
}
OptimizeOptions& OptimizeOptions::operator=(const OptimizeOptions& other281) {
  index_name = other281.index_name;
  opt_params = other281.opt_params;
  __isset = other281.__isset;
  return *this;
}
void OptimizeOptions::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OptimizeOptions(";
  out << "index_name=" << to_string(index_name);
  out << ", " << "opt_params=" << to_string(opt_params);
  out << ")";
}


ConnectRequest::~ConnectRequest() noexcept {
}


void ConnectRequest::__set_client_version(const int64_t val) {
  this->client_version = val;
}
std::ostream& operator<<(std::ostream& out, const ConnectRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ConnectRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->client_version);
          this->__isset.client_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConnectRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ConnectRequest");

  xfer += oprot->writeFieldBegin("client_version", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->client_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConnectRequest &a, ConnectRequest &b) {
  using ::std::swap;
  swap(a.client_version, b.client_version);
  swap(a.__isset, b.__isset);
}

ConnectRequest::ConnectRequest(const ConnectRequest& other282) noexcept {
  client_version = other282.client_version;
  __isset = other282.__isset;
}
ConnectRequest& ConnectRequest::operator=(const ConnectRequest& other283) noexcept {
  client_version = other283.client_version;
  __isset = other283.__isset;
  return *this;
}
void ConnectRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ConnectRequest(";
  out << "client_version=" << to_string(client_version);
  out << ")";
}


CommonRequest::~CommonRequest() noexcept {
}


void CommonRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const CommonRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CommonRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommonRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommonRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommonRequest &a, CommonRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

CommonRequest::CommonRequest(const CommonRequest& other284) noexcept {
  session_id = other284.session_id;
  __isset = other284.__isset;
}
CommonRequest& CommonRequest::operator=(const CommonRequest& other285) noexcept {
  session_id = other285.session_id;
  __isset = other285.__isset;
  return *this;
}
void CommonRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommonRequest(";
  out << "session_id=" << to_string(session_id);
  out << ")";
}


CommonResponse::~CommonResponse() noexcept {
}


void CommonResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void CommonResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void CommonResponse::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const CommonResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CommonResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommonResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommonResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommonResponse &a, CommonResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

CommonResponse::CommonResponse(const CommonResponse& other286) {
  error_code = other286.error_code;
  error_msg = other286.error_msg;
  session_id = other286.session_id;
  __isset = other286.__isset;
}
CommonResponse& CommonResponse::operator=(const CommonResponse& other287) {
  error_code = other287.error_code;
  error_msg = other287.error_msg;
  session_id = other287.session_id;
  __isset = other287.__isset;
  return *this;
}
void CommonResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommonResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ListDatabaseRequest::~ListDatabaseRequest() noexcept {
}


void ListDatabaseRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ListDatabaseRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ListDatabaseRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListDatabaseRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListDatabaseRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListDatabaseRequest &a, ListDatabaseRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ListDatabaseRequest::ListDatabaseRequest(const ListDatabaseRequest& other288) noexcept {
  session_id = other288.session_id;
  __isset = other288.__isset;
}
ListDatabaseRequest& ListDatabaseRequest::operator=(const ListDatabaseRequest& other289) noexcept {
  session_id = other289.session_id;
  __isset = other289.__isset;
  return *this;
}
void ListDatabaseRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListDatabaseRequest(";
  out << "session_id=" << to_string(session_id);
  out << ")";
}


ListDatabaseResponse::~ListDatabaseResponse() noexcept {
}


void ListDatabaseResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ListDatabaseResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ListDatabaseResponse::__set_db_names(const std::vector<std::string> & val) {
  this->db_names = val;
}
std::ostream& operator<<(std::ostream& out, const ListDatabaseResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ListDatabaseResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->db_names.clear();
            uint32_t _size290;
            ::apache::thrift::protocol::TType _etype293;
            xfer += iprot->readListBegin(_etype293, _size290);
            this->db_names.resize(_size290);
            uint32_t _i294;
            for (_i294 = 0; _i294 < _size290; ++_i294)
            {
              xfer += iprot->readString(this->db_names[_i294]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.db_names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListDatabaseResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListDatabaseResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_names", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->db_names.size()));
    std::vector<std::string> ::const_iterator _iter295;
    for (_iter295 = this->db_names.begin(); _iter295 != this->db_names.end(); ++_iter295)
    {
      xfer += oprot->writeString((*_iter295));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListDatabaseResponse &a, ListDatabaseResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.db_names, b.db_names);
  swap(a.__isset, b.__isset);
}

ListDatabaseResponse::ListDatabaseResponse(const ListDatabaseResponse& other296) {
  error_code = other296.error_code;
  error_msg = other296.error_msg;
  db_names = other296.db_names;
  __isset = other296.__isset;
}
ListDatabaseResponse& ListDatabaseResponse::operator=(const ListDatabaseResponse& other297) {
  error_code = other297.error_code;
  error_msg = other297.error_msg;
  db_names = other297.db_names;
  __isset = other297.__isset;
  return *this;
}
void ListDatabaseResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListDatabaseResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "db_names=" << to_string(db_names);
  out << ")";
}


ListTableRequest::~ListTableRequest() noexcept {
}


void ListTableRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ListTableRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ListTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ListTableRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListTableRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListTableRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListTableRequest &a, ListTableRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ListTableRequest::ListTableRequest(const ListTableRequest& other298) {
  db_name = other298.db_name;
  session_id = other298.session_id;
  __isset = other298.__isset;
}
ListTableRequest& ListTableRequest::operator=(const ListTableRequest& other299) {
  db_name = other299.db_name;
  session_id = other299.session_id;
  __isset = other299.__isset;
  return *this;
}
void ListTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListTableRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ListTableResponse::~ListTableResponse() noexcept {
}


void ListTableResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ListTableResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ListTableResponse::__set_table_names(const std::vector<std::string> & val) {
  this->table_names = val;
}
std::ostream& operator<<(std::ostream& out, const ListTableResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ListTableResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->table_names.clear();
            uint32_t _size300;
            ::apache::thrift::protocol::TType _etype303;
            xfer += iprot->readListBegin(_etype303, _size300);
            this->table_names.resize(_size300);
            uint32_t _i304;
            for (_i304 = 0; _i304 < _size300; ++_i304)
            {
              xfer += iprot->readString(this->table_names[_i304]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.table_names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListTableResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListTableResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_names", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->table_names.size()));
    std::vector<std::string> ::const_iterator _iter305;
    for (_iter305 = this->table_names.begin(); _iter305 != this->table_names.end(); ++_iter305)
    {
      xfer += oprot->writeString((*_iter305));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListTableResponse &a, ListTableResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.table_names, b.table_names);
  swap(a.__isset, b.__isset);
}

ListTableResponse::ListTableResponse(const ListTableResponse& other306) {
  error_code = other306.error_code;
  error_msg = other306.error_msg;
  table_names = other306.table_names;
  __isset = other306.__isset;
}
ListTableResponse& ListTableResponse::operator=(const ListTableResponse& other307) {
  error_code = other307.error_code;
  error_msg = other307.error_msg;
  table_names = other307.table_names;
  __isset = other307.__isset;
  return *this;
}
void ListTableResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListTableResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "table_names=" << to_string(table_names);
  out << ")";
}


ListIndexRequest::~ListIndexRequest() noexcept {
}


void ListIndexRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ListIndexRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ListIndexRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ListIndexRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ListIndexRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListIndexRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListIndexRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListIndexRequest &a, ListIndexRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ListIndexRequest::ListIndexRequest(const ListIndexRequest& other308) {
  db_name = other308.db_name;
  table_name = other308.table_name;
  session_id = other308.session_id;
  __isset = other308.__isset;
}
ListIndexRequest& ListIndexRequest::operator=(const ListIndexRequest& other309) {
  db_name = other309.db_name;
  table_name = other309.table_name;
  session_id = other309.session_id;
  __isset = other309.__isset;
  return *this;
}
void ListIndexRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListIndexRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ListIndexResponse::~ListIndexResponse() noexcept {
}


void ListIndexResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ListIndexResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ListIndexResponse::__set_index_names(const std::vector<std::string> & val) {
  this->index_names = val;
}
std::ostream& operator<<(std::ostream& out, const ListIndexResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ListIndexResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->index_names.clear();
            uint32_t _size310;
            ::apache::thrift::protocol::TType _etype313;
            xfer += iprot->readListBegin(_etype313, _size310);
            this->index_names.resize(_size310);
            uint32_t _i314;
            for (_i314 = 0; _i314 < _size310; ++_i314)
            {
              xfer += iprot->readString(this->index_names[_i314]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.index_names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListIndexResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListIndexResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_names", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->index_names.size()));
    std::vector<std::string> ::const_iterator _iter315;
    for (_iter315 = this->index_names.begin(); _iter315 != this->index_names.end(); ++_iter315)
    {
      xfer += oprot->writeString((*_iter315));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListIndexResponse &a, ListIndexResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.index_names, b.index_names);
  swap(a.__isset, b.__isset);
}

ListIndexResponse::ListIndexResponse(const ListIndexResponse& other316) {
  error_code = other316.error_code;
  error_msg = other316.error_msg;
  index_names = other316.index_names;
  __isset = other316.__isset;
}
ListIndexResponse& ListIndexResponse::operator=(const ListIndexResponse& other317) {
  error_code = other317.error_code;
  error_msg = other317.error_msg;
  index_names = other317.index_names;
  __isset = other317.__isset;
  return *this;
}
void ListIndexResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListIndexResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "index_names=" << to_string(index_names);
  out << ")";
}


ShowDatabaseRequest::~ShowDatabaseRequest() noexcept {
}


void ShowDatabaseRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowDatabaseRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowDatabaseRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowDatabaseRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowDatabaseRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowDatabaseRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowDatabaseRequest &a, ShowDatabaseRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ShowDatabaseRequest::ShowDatabaseRequest(const ShowDatabaseRequest& other318) {
  db_name = other318.db_name;
  session_id = other318.session_id;
  __isset = other318.__isset;
}
ShowDatabaseRequest& ShowDatabaseRequest::operator=(const ShowDatabaseRequest& other319) {
  db_name = other319.db_name;
  session_id = other319.session_id;
  __isset = other319.__isset;
  return *this;
}
void ShowDatabaseRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowDatabaseRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ShowDatabaseResponse::~ShowDatabaseResponse() noexcept {
}


void ShowDatabaseResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ShowDatabaseResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ShowDatabaseResponse::__set_database_name(const std::string& val) {
  this->database_name = val;
}

void ShowDatabaseResponse::__set_store_dir(const std::string& val) {
  this->store_dir = val;
}

void ShowDatabaseResponse::__set_table_count(const int64_t val) {
  this->table_count = val;
}
std::ostream& operator<<(std::ostream& out, const ShowDatabaseResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowDatabaseResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->database_name);
          this->__isset.database_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->store_dir);
          this->__isset.store_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->table_count);
          this->__isset.table_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowDatabaseResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowDatabaseResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("database_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->database_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("store_dir", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->store_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_count", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->table_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowDatabaseResponse &a, ShowDatabaseResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.database_name, b.database_name);
  swap(a.store_dir, b.store_dir);
  swap(a.table_count, b.table_count);
  swap(a.__isset, b.__isset);
}

ShowDatabaseResponse::ShowDatabaseResponse(const ShowDatabaseResponse& other320) {
  error_code = other320.error_code;
  error_msg = other320.error_msg;
  database_name = other320.database_name;
  store_dir = other320.store_dir;
  table_count = other320.table_count;
  __isset = other320.__isset;
}
ShowDatabaseResponse& ShowDatabaseResponse::operator=(const ShowDatabaseResponse& other321) {
  error_code = other321.error_code;
  error_msg = other321.error_msg;
  database_name = other321.database_name;
  store_dir = other321.store_dir;
  table_count = other321.table_count;
  __isset = other321.__isset;
  return *this;
}
void ShowDatabaseResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowDatabaseResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "database_name=" << to_string(database_name);
  out << ", " << "store_dir=" << to_string(store_dir);
  out << ", " << "table_count=" << to_string(table_count);
  out << ")";
}


ShowTableRequest::~ShowTableRequest() noexcept {
}


void ShowTableRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowTableRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowTableRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowTableRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowTableRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowTableRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowTableRequest &a, ShowTableRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ShowTableRequest::ShowTableRequest(const ShowTableRequest& other322) {
  db_name = other322.db_name;
  table_name = other322.table_name;
  session_id = other322.session_id;
  __isset = other322.__isset;
}
ShowTableRequest& ShowTableRequest::operator=(const ShowTableRequest& other323) {
  db_name = other323.db_name;
  table_name = other323.table_name;
  session_id = other323.session_id;
  __isset = other323.__isset;
  return *this;
}
void ShowTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowTableRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ShowTableResponse::~ShowTableResponse() noexcept {
}


void ShowTableResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ShowTableResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ShowTableResponse::__set_database_name(const std::string& val) {
  this->database_name = val;
}

void ShowTableResponse::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowTableResponse::__set_store_dir(const std::string& val) {
  this->store_dir = val;
}

void ShowTableResponse::__set_column_count(const int64_t val) {
  this->column_count = val;
}

void ShowTableResponse::__set_segment_count(const int64_t val) {
  this->segment_count = val;
}

void ShowTableResponse::__set_row_count(const int64_t val) {
  this->row_count = val;
}
std::ostream& operator<<(std::ostream& out, const ShowTableResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowTableResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->database_name);
          this->__isset.database_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->store_dir);
          this->__isset.store_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->column_count);
          this->__isset.column_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->segment_count);
          this->__isset.segment_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->row_count);
          this->__isset.row_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowTableResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowTableResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("database_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->database_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("store_dir", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->store_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_count", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->column_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_count", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->segment_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_count", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->row_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowTableResponse &a, ShowTableResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.database_name, b.database_name);
  swap(a.table_name, b.table_name);
  swap(a.store_dir, b.store_dir);
  swap(a.column_count, b.column_count);
  swap(a.segment_count, b.segment_count);
  swap(a.row_count, b.row_count);
  swap(a.__isset, b.__isset);
}

ShowTableResponse::ShowTableResponse(const ShowTableResponse& other324) {
  error_code = other324.error_code;
  error_msg = other324.error_msg;
  database_name = other324.database_name;
  table_name = other324.table_name;
  store_dir = other324.store_dir;
  column_count = other324.column_count;
  segment_count = other324.segment_count;
  row_count = other324.row_count;
  __isset = other324.__isset;
}
ShowTableResponse& ShowTableResponse::operator=(const ShowTableResponse& other325) {
  error_code = other325.error_code;
  error_msg = other325.error_msg;
  database_name = other325.database_name;
  table_name = other325.table_name;
  store_dir = other325.store_dir;
  column_count = other325.column_count;
  segment_count = other325.segment_count;
  row_count = other325.row_count;
  __isset = other325.__isset;
  return *this;
}
void ShowTableResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowTableResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "database_name=" << to_string(database_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "store_dir=" << to_string(store_dir);
  out << ", " << "column_count=" << to_string(column_count);
  out << ", " << "segment_count=" << to_string(segment_count);
  out << ", " << "row_count=" << to_string(row_count);
  out << ")";
}


ShowColumnsRequest::~ShowColumnsRequest() noexcept {
}


void ShowColumnsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowColumnsRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowColumnsRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowColumnsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowColumnsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowColumnsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowColumnsRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowColumnsRequest &a, ShowColumnsRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ShowColumnsRequest::ShowColumnsRequest(const ShowColumnsRequest& other326) {
  db_name = other326.db_name;
  table_name = other326.table_name;
  session_id = other326.session_id;
  __isset = other326.__isset;
}
ShowColumnsRequest& ShowColumnsRequest::operator=(const ShowColumnsRequest& other327) {
  db_name = other327.db_name;
  table_name = other327.table_name;
  session_id = other327.session_id;
  __isset = other327.__isset;
  return *this;
}
void ShowColumnsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowColumnsRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


GetTableRequest::~GetTableRequest() noexcept {
}


void GetTableRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void GetTableRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void GetTableRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const GetTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetTableRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetTableRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTableRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTableRequest &a, GetTableRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

GetTableRequest::GetTableRequest(const GetTableRequest& other328) {
  db_name = other328.db_name;
  table_name = other328.table_name;
  session_id = other328.session_id;
  __isset = other328.__isset;
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other329) {
  db_name = other329.db_name;
  table_name = other329.table_name;
  session_id = other329.session_id;
  __isset = other329.__isset;
  return *this;
}
void GetTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTableRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


IndexInfo::~IndexInfo() noexcept {
}


void IndexInfo::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void IndexInfo::__set_index_type(const IndexType::type val) {
  this->index_type = val;
}

void IndexInfo::__set_index_param_list(const std::vector<InitParameter> & val) {
  this->index_param_list = val;
}
std::ostream& operator<<(std::ostream& out, const IndexInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IndexInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast330;
          xfer += iprot->readI32(ecast330);
          this->index_type = static_cast<IndexType::type>(ecast330);
          this->__isset.index_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->index_param_list.clear();
            uint32_t _size331;
            ::apache::thrift::protocol::TType _etype334;
            xfer += iprot->readListBegin(_etype334, _size331);
            this->index_param_list.resize(_size331);
            uint32_t _i335;
            for (_i335 = 0; _i335 < _size331; ++_i335)
            {
              xfer += this->index_param_list[_i335].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.index_param_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IndexInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IndexInfo");

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->index_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_param_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->index_param_list.size()));
    std::vector<InitParameter> ::const_iterator _iter336;
    for (_iter336 = this->index_param_list.begin(); _iter336 != this->index_param_list.end(); ++_iter336)
    {
      xfer += (*_iter336).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IndexInfo &a, IndexInfo &b) {
  using ::std::swap;
  swap(a.column_name, b.column_name);
  swap(a.index_type, b.index_type);
  swap(a.index_param_list, b.index_param_list);
  swap(a.__isset, b.__isset);
}

IndexInfo::IndexInfo(const IndexInfo& other337) {
  column_name = other337.column_name;
  index_type = other337.index_type;
  index_param_list = other337.index_param_list;
  __isset = other337.__isset;
}
IndexInfo& IndexInfo::operator=(const IndexInfo& other338) {
  column_name = other338.column_name;
  index_type = other338.index_type;
  index_param_list = other338.index_param_list;
  __isset = other338.__isset;
  return *this;
}
void IndexInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IndexInfo(";
  out << "column_name=" << to_string(column_name);
  out << ", " << "index_type=" << to_string(index_type);
  out << ", " << "index_param_list=" << to_string(index_param_list);
  out << ")";
}


CreateIndexRequest::~CreateIndexRequest() noexcept {
}


void CreateIndexRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void CreateIndexRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void CreateIndexRequest::__set_index_name(const std::string& val) {
  this->index_name = val;
}

void CreateIndexRequest::__set_index_info(const IndexInfo& val) {
  this->index_info = val;
}

void CreateIndexRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void CreateIndexRequest::__set_create_option(const CreateOption& val) {
  this->create_option = val;
}
std::ostream& operator<<(std::ostream& out, const CreateIndexRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateIndexRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_name);
          this->__isset.index_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->index_info.read(iprot);
          this->__isset.index_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->create_option.read(iprot);
          this->__isset.create_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateIndexRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateIndexRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->index_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_info", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->index_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_option", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->create_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateIndexRequest &a, CreateIndexRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.index_name, b.index_name);
  swap(a.index_info, b.index_info);
  swap(a.session_id, b.session_id);
  swap(a.create_option, b.create_option);
  swap(a.__isset, b.__isset);
}

CreateIndexRequest::CreateIndexRequest(const CreateIndexRequest& other339) {
  db_name = other339.db_name;
  table_name = other339.table_name;
  index_name = other339.index_name;
  index_info = other339.index_info;
  session_id = other339.session_id;
  create_option = other339.create_option;
  __isset = other339.__isset;
}
CreateIndexRequest& CreateIndexRequest::operator=(const CreateIndexRequest& other340) {
  db_name = other340.db_name;
  table_name = other340.table_name;
  index_name = other340.index_name;
  index_info = other340.index_info;
  session_id = other340.session_id;
  create_option = other340.create_option;
  __isset = other340.__isset;
  return *this;
}
void CreateIndexRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateIndexRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "index_name=" << to_string(index_name);
  out << ", " << "index_info=" << to_string(index_info);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "create_option=" << to_string(create_option);
  out << ")";
}


DropIndexRequest::~DropIndexRequest() noexcept {
}


void DropIndexRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void DropIndexRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void DropIndexRequest::__set_index_name(const std::string& val) {
  this->index_name = val;
}

void DropIndexRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void DropIndexRequest::__set_drop_option(const DropOption& val) {
  this->drop_option = val;
}
std::ostream& operator<<(std::ostream& out, const DropIndexRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DropIndexRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_name);
          this->__isset.index_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->drop_option.read(iprot);
          this->__isset.drop_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DropIndexRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropIndexRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->index_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drop_option", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->drop_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropIndexRequest &a, DropIndexRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.index_name, b.index_name);
  swap(a.session_id, b.session_id);
  swap(a.drop_option, b.drop_option);
  swap(a.__isset, b.__isset);
}

DropIndexRequest::DropIndexRequest(const DropIndexRequest& other341) {
  db_name = other341.db_name;
  table_name = other341.table_name;
  index_name = other341.index_name;
  session_id = other341.session_id;
  drop_option = other341.drop_option;
  __isset = other341.__isset;
}
DropIndexRequest& DropIndexRequest::operator=(const DropIndexRequest& other342) {
  db_name = other342.db_name;
  table_name = other342.table_name;
  index_name = other342.index_name;
  session_id = other342.session_id;
  drop_option = other342.drop_option;
  __isset = other342.__isset;
  return *this;
}
void DropIndexRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropIndexRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "index_name=" << to_string(index_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "drop_option=" << to_string(drop_option);
  out << ")";
}


ShowIndexRequest::~ShowIndexRequest() noexcept {
}


void ShowIndexRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowIndexRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowIndexRequest::__set_index_name(const std::string& val) {
  this->index_name = val;
}

void ShowIndexRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowIndexRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowIndexRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_name);
          this->__isset.index_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowIndexRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowIndexRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->index_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowIndexRequest &a, ShowIndexRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.index_name, b.index_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ShowIndexRequest::ShowIndexRequest(const ShowIndexRequest& other343) {
  db_name = other343.db_name;
  table_name = other343.table_name;
  index_name = other343.index_name;
  session_id = other343.session_id;
  __isset = other343.__isset;
}
ShowIndexRequest& ShowIndexRequest::operator=(const ShowIndexRequest& other344) {
  db_name = other344.db_name;
  table_name = other344.table_name;
  index_name = other344.index_name;
  session_id = other344.session_id;
  __isset = other344.__isset;
  return *this;
}
void ShowIndexRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowIndexRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "index_name=" << to_string(index_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ShowIndexResponse::~ShowIndexResponse() noexcept {
}


void ShowIndexResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ShowIndexResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ShowIndexResponse::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowIndexResponse::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowIndexResponse::__set_index_name(const std::string& val) {
  this->index_name = val;
}

void ShowIndexResponse::__set_index_type(const std::string& val) {
  this->index_type = val;
}

void ShowIndexResponse::__set_index_column_names(const std::string& val) {
  this->index_column_names = val;
}

void ShowIndexResponse::__set_index_column_ids(const std::string& val) {
  this->index_column_ids = val;
}

void ShowIndexResponse::__set_other_parameters(const std::string& val) {
  this->other_parameters = val;
}

void ShowIndexResponse::__set_store_dir(const std::string& val) {
  this->store_dir = val;
}

void ShowIndexResponse::__set_store_size(const std::string& val) {
  this->store_size = val;
}

void ShowIndexResponse::__set_segment_index_count(const std::string& val) {
  this->segment_index_count = val;
}
std::ostream& operator<<(std::ostream& out, const ShowIndexResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowIndexResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_name);
          this->__isset.index_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_type);
          this->__isset.index_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_column_names);
          this->__isset.index_column_names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_column_ids);
          this->__isset.index_column_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->other_parameters);
          this->__isset.other_parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->store_dir);
          this->__isset.store_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->store_size);
          this->__isset.store_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->segment_index_count);
          this->__isset.segment_index_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowIndexResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowIndexResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->index_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_type", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->index_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_column_names", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->index_column_names);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_column_ids", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->index_column_ids);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("other_parameters", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->other_parameters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("store_dir", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->store_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("store_size", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->store_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_index_count", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->segment_index_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowIndexResponse &a, ShowIndexResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.index_name, b.index_name);
  swap(a.index_type, b.index_type);
  swap(a.index_column_names, b.index_column_names);
  swap(a.index_column_ids, b.index_column_ids);
  swap(a.other_parameters, b.other_parameters);
  swap(a.store_dir, b.store_dir);
  swap(a.store_size, b.store_size);
  swap(a.segment_index_count, b.segment_index_count);
  swap(a.__isset, b.__isset);
}

ShowIndexResponse::ShowIndexResponse(const ShowIndexResponse& other345) {
  error_code = other345.error_code;
  error_msg = other345.error_msg;
  db_name = other345.db_name;
  table_name = other345.table_name;
  index_name = other345.index_name;
  index_type = other345.index_type;
  index_column_names = other345.index_column_names;
  index_column_ids = other345.index_column_ids;
  other_parameters = other345.other_parameters;
  store_dir = other345.store_dir;
  store_size = other345.store_size;
  segment_index_count = other345.segment_index_count;
  __isset = other345.__isset;
}
ShowIndexResponse& ShowIndexResponse::operator=(const ShowIndexResponse& other346) {
  error_code = other346.error_code;
  error_msg = other346.error_msg;
  db_name = other346.db_name;
  table_name = other346.table_name;
  index_name = other346.index_name;
  index_type = other346.index_type;
  index_column_names = other346.index_column_names;
  index_column_ids = other346.index_column_ids;
  other_parameters = other346.other_parameters;
  store_dir = other346.store_dir;
  store_size = other346.store_size;
  segment_index_count = other346.segment_index_count;
  __isset = other346.__isset;
  return *this;
}
void ShowIndexResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowIndexResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "index_name=" << to_string(index_name);
  out << ", " << "index_type=" << to_string(index_type);
  out << ", " << "index_column_names=" << to_string(index_column_names);
  out << ", " << "index_column_ids=" << to_string(index_column_ids);
  out << ", " << "other_parameters=" << to_string(other_parameters);
  out << ", " << "store_dir=" << to_string(store_dir);
  out << ", " << "store_size=" << to_string(store_size);
  out << ", " << "segment_index_count=" << to_string(segment_index_count);
  out << ")";
}


OptimizeRequest::~OptimizeRequest() noexcept {
}


void OptimizeRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void OptimizeRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void OptimizeRequest::__set_optimize_options(const OptimizeOptions& val) {
  this->optimize_options = val;
}

void OptimizeRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const OptimizeRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t OptimizeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->optimize_options.read(iprot);
          this->__isset.optimize_options = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OptimizeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OptimizeRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("optimize_options", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->optimize_options.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OptimizeRequest &a, OptimizeRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.optimize_options, b.optimize_options);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

OptimizeRequest::OptimizeRequest(const OptimizeRequest& other347) {
  db_name = other347.db_name;
  table_name = other347.table_name;
  optimize_options = other347.optimize_options;
  session_id = other347.session_id;
  __isset = other347.__isset;
}
OptimizeRequest& OptimizeRequest::operator=(const OptimizeRequest& other348) {
  db_name = other348.db_name;
  table_name = other348.table_name;
  optimize_options = other348.optimize_options;
  session_id = other348.session_id;
  __isset = other348.__isset;
  return *this;
}
void OptimizeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OptimizeRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "optimize_options=" << to_string(optimize_options);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


GetDatabaseRequest::~GetDatabaseRequest() noexcept {
}


void GetDatabaseRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void GetDatabaseRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const GetDatabaseRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetDatabaseRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetDatabaseRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetDatabaseRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetDatabaseRequest &a, GetDatabaseRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

GetDatabaseRequest::GetDatabaseRequest(const GetDatabaseRequest& other349) {
  db_name = other349.db_name;
  session_id = other349.session_id;
  __isset = other349.__isset;
}
GetDatabaseRequest& GetDatabaseRequest::operator=(const GetDatabaseRequest& other350) {
  db_name = other350.db_name;
  session_id = other350.session_id;
  __isset = other350.__isset;
  return *this;
}
void GetDatabaseRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetDatabaseRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


CreateDatabaseRequest::~CreateDatabaseRequest() noexcept {
}


void CreateDatabaseRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void CreateDatabaseRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void CreateDatabaseRequest::__set_create_option(const CreateOption& val) {
  this->create_option = val;
}
std::ostream& operator<<(std::ostream& out, const CreateDatabaseRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateDatabaseRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->create_option.read(iprot);
          this->__isset.create_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateDatabaseRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateDatabaseRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_option", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->create_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateDatabaseRequest &a, CreateDatabaseRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.session_id, b.session_id);
  swap(a.create_option, b.create_option);
  swap(a.__isset, b.__isset);
}

CreateDatabaseRequest::CreateDatabaseRequest(const CreateDatabaseRequest& other351) {
  db_name = other351.db_name;
  session_id = other351.session_id;
  create_option = other351.create_option;
  __isset = other351.__isset;
}
CreateDatabaseRequest& CreateDatabaseRequest::operator=(const CreateDatabaseRequest& other352) {
  db_name = other352.db_name;
  session_id = other352.session_id;
  create_option = other352.create_option;
  __isset = other352.__isset;
  return *this;
}
void CreateDatabaseRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateDatabaseRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "create_option=" << to_string(create_option);
  out << ")";
}


DropDatabaseRequest::~DropDatabaseRequest() noexcept {
}


void DropDatabaseRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void DropDatabaseRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void DropDatabaseRequest::__set_drop_option(const DropOption& val) {
  this->drop_option = val;
}
std::ostream& operator<<(std::ostream& out, const DropDatabaseRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DropDatabaseRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->drop_option.read(iprot);
          this->__isset.drop_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DropDatabaseRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropDatabaseRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drop_option", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->drop_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropDatabaseRequest &a, DropDatabaseRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.session_id, b.session_id);
  swap(a.drop_option, b.drop_option);
  swap(a.__isset, b.__isset);
}

DropDatabaseRequest::DropDatabaseRequest(const DropDatabaseRequest& other353) {
  db_name = other353.db_name;
  session_id = other353.session_id;
  drop_option = other353.drop_option;
  __isset = other353.__isset;
}
DropDatabaseRequest& DropDatabaseRequest::operator=(const DropDatabaseRequest& other354) {
  db_name = other354.db_name;
  session_id = other354.session_id;
  drop_option = other354.drop_option;
  __isset = other354.__isset;
  return *this;
}
void DropDatabaseRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropDatabaseRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "drop_option=" << to_string(drop_option);
  out << ")";
}


CreateTableRequest::~CreateTableRequest() noexcept {
}


void CreateTableRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void CreateTableRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void CreateTableRequest::__set_column_defs(const std::vector<ColumnDef> & val) {
  this->column_defs = val;
}

void CreateTableRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void CreateTableRequest::__set_create_option(const CreateOption& val) {
  this->create_option = val;
}
std::ostream& operator<<(std::ostream& out, const CreateTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateTableRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_defs.clear();
            uint32_t _size355;
            ::apache::thrift::protocol::TType _etype358;
            xfer += iprot->readListBegin(_etype358, _size355);
            this->column_defs.resize(_size355);
            uint32_t _i359;
            for (_i359 = 0; _i359 < _size355; ++_i359)
            {
              xfer += this->column_defs[_i359].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_defs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->create_option.read(iprot);
          this->__isset.create_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateTableRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateTableRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_defs", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->column_defs.size()));
    std::vector<ColumnDef> ::const_iterator _iter360;
    for (_iter360 = this->column_defs.begin(); _iter360 != this->column_defs.end(); ++_iter360)
    {
      xfer += (*_iter360).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_option", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->create_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateTableRequest &a, CreateTableRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.column_defs, b.column_defs);
  swap(a.session_id, b.session_id);
  swap(a.create_option, b.create_option);
  swap(a.__isset, b.__isset);
}

CreateTableRequest::CreateTableRequest(const CreateTableRequest& other361) {
  db_name = other361.db_name;
  table_name = other361.table_name;
  column_defs = other361.column_defs;
  session_id = other361.session_id;
  create_option = other361.create_option;
  __isset = other361.__isset;
}
CreateTableRequest& CreateTableRequest::operator=(const CreateTableRequest& other362) {
  db_name = other362.db_name;
  table_name = other362.table_name;
  column_defs = other362.column_defs;
  session_id = other362.session_id;
  create_option = other362.create_option;
  __isset = other362.__isset;
  return *this;
}
void CreateTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateTableRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_defs=" << to_string(column_defs);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "create_option=" << to_string(create_option);
  out << ")";
}


DropTableRequest::~DropTableRequest() noexcept {
}


void DropTableRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void DropTableRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void DropTableRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void DropTableRequest::__set_drop_option(const DropOption& val) {
  this->drop_option = val;
}
std::ostream& operator<<(std::ostream& out, const DropTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DropTableRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->drop_option.read(iprot);
          this->__isset.drop_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DropTableRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropTableRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drop_option", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->drop_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropTableRequest &a, DropTableRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.session_id, b.session_id);
  swap(a.drop_option, b.drop_option);
  swap(a.__isset, b.__isset);
}

DropTableRequest::DropTableRequest(const DropTableRequest& other363) {
  db_name = other363.db_name;
  table_name = other363.table_name;
  session_id = other363.session_id;
  drop_option = other363.drop_option;
  __isset = other363.__isset;
}
DropTableRequest& DropTableRequest::operator=(const DropTableRequest& other364) {
  db_name = other364.db_name;
  table_name = other364.table_name;
  session_id = other364.session_id;
  drop_option = other364.drop_option;
  __isset = other364.__isset;
  return *this;
}
void DropTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropTableRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "drop_option=" << to_string(drop_option);
  out << ")";
}


InsertRequest::~InsertRequest() noexcept {
}


void InsertRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void InsertRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void InsertRequest::__set_column_names(const std::vector<std::string> & val) {
  this->column_names = val;
}

void InsertRequest::__set_fields(const std::vector<Field> & val) {
  this->fields = val;
}

void InsertRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const InsertRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InsertRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_names.clear();
            uint32_t _size365;
            ::apache::thrift::protocol::TType _etype368;
            xfer += iprot->readListBegin(_etype368, _size365);
            this->column_names.resize(_size365);
            uint32_t _i369;
            for (_i369 = 0; _i369 < _size365; ++_i369)
            {
              xfer += iprot->readString(this->column_names[_i369]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fields.clear();
            uint32_t _size370;
            ::apache::thrift::protocol::TType _etype373;
            xfer += iprot->readListBegin(_etype373, _size370);
            this->fields.resize(_size370);
            uint32_t _i374;
            for (_i374 = 0; _i374 < _size370; ++_i374)
            {
              xfer += this->fields[_i374].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InsertRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InsertRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_names", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_names.size()));
    std::vector<std::string> ::const_iterator _iter375;
    for (_iter375 = this->column_names.begin(); _iter375 != this->column_names.end(); ++_iter375)
    {
      xfer += oprot->writeString((*_iter375));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fields", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fields.size()));
    std::vector<Field> ::const_iterator _iter376;
    for (_iter376 = this->fields.begin(); _iter376 != this->fields.end(); ++_iter376)
    {
      xfer += (*_iter376).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InsertRequest &a, InsertRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.column_names, b.column_names);
  swap(a.fields, b.fields);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

InsertRequest::InsertRequest(const InsertRequest& other377) {
  db_name = other377.db_name;
  table_name = other377.table_name;
  column_names = other377.column_names;
  fields = other377.fields;
  session_id = other377.session_id;
  __isset = other377.__isset;
}
InsertRequest& InsertRequest::operator=(const InsertRequest& other378) {
  db_name = other378.db_name;
  table_name = other378.table_name;
  column_names = other378.column_names;
  fields = other378.fields;
  session_id = other378.session_id;
  __isset = other378.__isset;
  return *this;
}
void InsertRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InsertRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_names=" << to_string(column_names);
  out << ", " << "fields=" << to_string(fields);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ImportRequest::~ImportRequest() noexcept {
}


void ImportRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ImportRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ImportRequest::__set_file_name(const std::string& val) {
  this->file_name = val;
}

void ImportRequest::__set_import_option(const ImportOption& val) {
  this->import_option = val;
}

void ImportRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ImportRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ImportRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_name);
          this->__isset.file_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->import_option.read(iprot);
          this->__isset.import_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ImportRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ImportRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->file_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("import_option", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->import_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ImportRequest &a, ImportRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.file_name, b.file_name);
  swap(a.import_option, b.import_option);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ImportRequest::ImportRequest(const ImportRequest& other379) {
  db_name = other379.db_name;
  table_name = other379.table_name;
  file_name = other379.file_name;
  import_option = other379.import_option;
  session_id = other379.session_id;
  __isset = other379.__isset;
}
ImportRequest& ImportRequest::operator=(const ImportRequest& other380) {
  db_name = other380.db_name;
  table_name = other380.table_name;
  file_name = other380.file_name;
  import_option = other380.import_option;
  session_id = other380.session_id;
  __isset = other380.__isset;
  return *this;
}
void ImportRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ImportRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "file_name=" << to_string(file_name);
  out << ", " << "import_option=" << to_string(import_option);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ExportRequest::~ExportRequest() noexcept {
}


void ExportRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ExportRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ExportRequest::__set_columns(const std::vector<std::string> & val) {
  this->columns = val;
}

void ExportRequest::__set_file_name(const std::string& val) {
  this->file_name = val;
}

void ExportRequest::__set_export_option(const ExportOption& val) {
  this->export_option = val;
}

void ExportRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ExportRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExportRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->columns.clear();
            uint32_t _size381;
            ::apache::thrift::protocol::TType _etype384;
            xfer += iprot->readListBegin(_etype384, _size381);
            this->columns.resize(_size381);
            uint32_t _i385;
            for (_i385 = 0; _i385 < _size381; ++_i385)
            {
              xfer += iprot->readString(this->columns[_i385]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.columns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_name);
          this->__isset.file_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->export_option.read(iprot);
          this->__isset.export_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExportRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExportRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("columns", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->columns.size()));
    std::vector<std::string> ::const_iterator _iter386;
    for (_iter386 = this->columns.begin(); _iter386 != this->columns.end(); ++_iter386)
    {
      xfer += oprot->writeString((*_iter386));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->file_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("export_option", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->export_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExportRequest &a, ExportRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.columns, b.columns);
  swap(a.file_name, b.file_name);
  swap(a.export_option, b.export_option);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ExportRequest::ExportRequest(const ExportRequest& other387) {
  db_name = other387.db_name;
  table_name = other387.table_name;
  columns = other387.columns;
  file_name = other387.file_name;
  export_option = other387.export_option;
  session_id = other387.session_id;
  __isset = other387.__isset;
}
ExportRequest& ExportRequest::operator=(const ExportRequest& other388) {
  db_name = other388.db_name;
  table_name = other388.table_name;
  columns = other388.columns;
  file_name = other388.file_name;
  export_option = other388.export_option;
  session_id = other388.session_id;
  __isset = other388.__isset;
  return *this;
}
void ExportRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExportRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "columns=" << to_string(columns);
  out << ", " << "file_name=" << to_string(file_name);
  out << ", " << "export_option=" << to_string(export_option);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ExplainRequest::~ExplainRequest() noexcept {
}


void ExplainRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ExplainRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ExplainRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ExplainRequest::__set_select_list(const std::vector<ParsedExpr> & val) {
  this->select_list = val;
}

void ExplainRequest::__set_search_expr(const SearchExpr& val) {
  this->search_expr = val;
__isset.search_expr = true;
}

void ExplainRequest::__set_where_expr(const ParsedExpr& val) {
  this->where_expr = val;
__isset.where_expr = true;
}

void ExplainRequest::__set_group_by_list(const std::vector<ParsedExpr> & val) {
  this->group_by_list = val;
__isset.group_by_list = true;
}

void ExplainRequest::__set_having_expr(const ParsedExpr& val) {
  this->having_expr = val;
__isset.having_expr = true;
}

void ExplainRequest::__set_limit_expr(const ParsedExpr& val) {
  this->limit_expr = val;
__isset.limit_expr = true;
}

void ExplainRequest::__set_offset_expr(const ParsedExpr& val) {
  this->offset_expr = val;
__isset.offset_expr = true;
}

void ExplainRequest::__set_order_by_list(const std::vector<OrderByExpr> & val) {
  this->order_by_list = val;
__isset.order_by_list = true;
}

void ExplainRequest::__set_explain_type(const ExplainType::type val) {
  this->explain_type = val;
}
std::ostream& operator<<(std::ostream& out, const ExplainRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExplainRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->select_list.clear();
            uint32_t _size389;
            ::apache::thrift::protocol::TType _etype392;
            xfer += iprot->readListBegin(_etype392, _size389);
            this->select_list.resize(_size389);
            uint32_t _i393;
            for (_i393 = 0; _i393 < _size389; ++_i393)
            {
              xfer += this->select_list[_i393].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.select_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->search_expr.read(iprot);
          this->__isset.search_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->where_expr.read(iprot);
          this->__isset.where_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->group_by_list.clear();
            uint32_t _size394;
            ::apache::thrift::protocol::TType _etype397;
            xfer += iprot->readListBegin(_etype397, _size394);
            this->group_by_list.resize(_size394);
            uint32_t _i398;
            for (_i398 = 0; _i398 < _size394; ++_i398)
            {
              xfer += this->group_by_list[_i398].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.group_by_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->having_expr.read(iprot);
          this->__isset.having_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->limit_expr.read(iprot);
          this->__isset.limit_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->offset_expr.read(iprot);
          this->__isset.offset_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->order_by_list.clear();
            uint32_t _size399;
            ::apache::thrift::protocol::TType _etype402;
            xfer += iprot->readListBegin(_etype402, _size399);
            this->order_by_list.resize(_size399);
            uint32_t _i403;
            for (_i403 = 0; _i403 < _size399; ++_i403)
            {
              xfer += this->order_by_list[_i403].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.order_by_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast404;
          xfer += iprot->readI32(ecast404);
          this->explain_type = static_cast<ExplainType::type>(ecast404);
          this->__isset.explain_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExplainRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExplainRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("select_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->select_list.size()));
    std::vector<ParsedExpr> ::const_iterator _iter405;
    for (_iter405 = this->select_list.begin(); _iter405 != this->select_list.end(); ++_iter405)
    {
      xfer += (*_iter405).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.search_expr) {
    xfer += oprot->writeFieldBegin("search_expr", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->search_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.where_expr) {
    xfer += oprot->writeFieldBegin("where_expr", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->where_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_by_list) {
    xfer += oprot->writeFieldBegin("group_by_list", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->group_by_list.size()));
      std::vector<ParsedExpr> ::const_iterator _iter406;
      for (_iter406 = this->group_by_list.begin(); _iter406 != this->group_by_list.end(); ++_iter406)
      {
        xfer += (*_iter406).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.having_expr) {
    xfer += oprot->writeFieldBegin("having_expr", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->having_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.limit_expr) {
    xfer += oprot->writeFieldBegin("limit_expr", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->limit_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offset_expr) {
    xfer += oprot->writeFieldBegin("offset_expr", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->offset_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.order_by_list) {
    xfer += oprot->writeFieldBegin("order_by_list", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->order_by_list.size()));
      std::vector<OrderByExpr> ::const_iterator _iter407;
      for (_iter407 = this->order_by_list.begin(); _iter407 != this->order_by_list.end(); ++_iter407)
      {
        xfer += (*_iter407).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("explain_type", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(static_cast<int32_t>(this->explain_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExplainRequest &a, ExplainRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.select_list, b.select_list);
  swap(a.search_expr, b.search_expr);
  swap(a.where_expr, b.where_expr);
  swap(a.group_by_list, b.group_by_list);
  swap(a.having_expr, b.having_expr);
  swap(a.limit_expr, b.limit_expr);
  swap(a.offset_expr, b.offset_expr);
  swap(a.order_by_list, b.order_by_list);
  swap(a.explain_type, b.explain_type);
  swap(a.__isset, b.__isset);
}

ExplainRequest::ExplainRequest(const ExplainRequest& other408) {
  session_id = other408.session_id;
  db_name = other408.db_name;
  table_name = other408.table_name;
  select_list = other408.select_list;
  search_expr = other408.search_expr;
  where_expr = other408.where_expr;
  group_by_list = other408.group_by_list;
  having_expr = other408.having_expr;
  limit_expr = other408.limit_expr;
  offset_expr = other408.offset_expr;
  order_by_list = other408.order_by_list;
  explain_type = other408.explain_type;
  __isset = other408.__isset;
}
ExplainRequest& ExplainRequest::operator=(const ExplainRequest& other409) {
  session_id = other409.session_id;
  db_name = other409.db_name;
  table_name = other409.table_name;
  select_list = other409.select_list;
  search_expr = other409.search_expr;
  where_expr = other409.where_expr;
  group_by_list = other409.group_by_list;
  having_expr = other409.having_expr;
  limit_expr = other409.limit_expr;
  offset_expr = other409.offset_expr;
  order_by_list = other409.order_by_list;
  explain_type = other409.explain_type;
  __isset = other409.__isset;
  return *this;
}
void ExplainRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExplainRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "select_list=" << to_string(select_list);
  out << ", " << "search_expr="; (__isset.search_expr ? (out << to_string(search_expr)) : (out << "<null>"));
  out << ", " << "where_expr="; (__isset.where_expr ? (out << to_string(where_expr)) : (out << "<null>"));
  out << ", " << "group_by_list="; (__isset.group_by_list ? (out << to_string(group_by_list)) : (out << "<null>"));
  out << ", " << "having_expr="; (__isset.having_expr ? (out << to_string(having_expr)) : (out << "<null>"));
  out << ", " << "limit_expr="; (__isset.limit_expr ? (out << to_string(limit_expr)) : (out << "<null>"));
  out << ", " << "offset_expr="; (__isset.offset_expr ? (out << to_string(offset_expr)) : (out << "<null>"));
  out << ", " << "order_by_list="; (__isset.order_by_list ? (out << to_string(order_by_list)) : (out << "<null>"));
  out << ", " << "explain_type=" << to_string(explain_type);
  out << ")";
}


ExplainResponse::~ExplainResponse() noexcept {
}


void ExplainResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ExplainResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ExplainResponse::__set_column_defs(const std::vector<ColumnDef> & val) {
  this->column_defs = val;
}

void ExplainResponse::__set_column_fields(const std::vector<ColumnField> & val) {
  this->column_fields = val;
}
std::ostream& operator<<(std::ostream& out, const ExplainResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExplainResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_defs.clear();
            uint32_t _size410;
            ::apache::thrift::protocol::TType _etype413;
            xfer += iprot->readListBegin(_etype413, _size410);
            this->column_defs.resize(_size410);
            uint32_t _i414;
            for (_i414 = 0; _i414 < _size410; ++_i414)
            {
              xfer += this->column_defs[_i414].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_defs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_fields.clear();
            uint32_t _size415;
            ::apache::thrift::protocol::TType _etype418;
            xfer += iprot->readListBegin(_etype418, _size415);
            this->column_fields.resize(_size415);
            uint32_t _i419;
            for (_i419 = 0; _i419 < _size415; ++_i419)
            {
              xfer += this->column_fields[_i419].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExplainResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExplainResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_defs", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->column_defs.size()));
    std::vector<ColumnDef> ::const_iterator _iter420;
    for (_iter420 = this->column_defs.begin(); _iter420 != this->column_defs.end(); ++_iter420)
    {
      xfer += (*_iter420).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_fields", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->column_fields.size()));
    std::vector<ColumnField> ::const_iterator _iter421;
    for (_iter421 = this->column_fields.begin(); _iter421 != this->column_fields.end(); ++_iter421)
    {
      xfer += (*_iter421).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExplainResponse &a, ExplainResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.column_defs, b.column_defs);
  swap(a.column_fields, b.column_fields);
  swap(a.__isset, b.__isset);
}

ExplainResponse::ExplainResponse(const ExplainResponse& other422) {
  error_code = other422.error_code;
  error_msg = other422.error_msg;
  column_defs = other422.column_defs;
  column_fields = other422.column_fields;
  __isset = other422.__isset;
}
ExplainResponse& ExplainResponse::operator=(const ExplainResponse& other423) {
  error_code = other423.error_code;
  error_msg = other423.error_msg;
  column_defs = other423.column_defs;
  column_fields = other423.column_fields;
  __isset = other423.__isset;
  return *this;
}
void ExplainResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExplainResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "column_defs=" << to_string(column_defs);
  out << ", " << "column_fields=" << to_string(column_fields);
  out << ")";
}


SelectRequest::~SelectRequest() noexcept {
}


void SelectRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void SelectRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void SelectRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SelectRequest::__set_select_list(const std::vector<ParsedExpr> & val) {
  this->select_list = val;
}

void SelectRequest::__set_search_expr(const SearchExpr& val) {
  this->search_expr = val;
__isset.search_expr = true;
}

void SelectRequest::__set_where_expr(const ParsedExpr& val) {
  this->where_expr = val;
__isset.where_expr = true;
}

void SelectRequest::__set_group_by_list(const std::vector<ParsedExpr> & val) {
  this->group_by_list = val;
__isset.group_by_list = true;
}

void SelectRequest::__set_having_expr(const ParsedExpr& val) {
  this->having_expr = val;
__isset.having_expr = true;
}

void SelectRequest::__set_limit_expr(const ParsedExpr& val) {
  this->limit_expr = val;
__isset.limit_expr = true;
}

void SelectRequest::__set_offset_expr(const ParsedExpr& val) {
  this->offset_expr = val;
__isset.offset_expr = true;
}

void SelectRequest::__set_order_by_list(const std::vector<OrderByExpr> & val) {
  this->order_by_list = val;
__isset.order_by_list = true;
}
std::ostream& operator<<(std::ostream& out, const SelectRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SelectRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->select_list.clear();
            uint32_t _size424;
            ::apache::thrift::protocol::TType _etype427;
            xfer += iprot->readListBegin(_etype427, _size424);
            this->select_list.resize(_size424);
            uint32_t _i428;
            for (_i428 = 0; _i428 < _size424; ++_i428)
            {
              xfer += this->select_list[_i428].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.select_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->search_expr.read(iprot);
          this->__isset.search_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->where_expr.read(iprot);
          this->__isset.where_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->group_by_list.clear();
            uint32_t _size429;
            ::apache::thrift::protocol::TType _etype432;
            xfer += iprot->readListBegin(_etype432, _size429);
            this->group_by_list.resize(_size429);
            uint32_t _i433;
            for (_i433 = 0; _i433 < _size429; ++_i433)
            {
              xfer += this->group_by_list[_i433].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.group_by_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->having_expr.read(iprot);
          this->__isset.having_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->limit_expr.read(iprot);
          this->__isset.limit_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->offset_expr.read(iprot);
          this->__isset.offset_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->order_by_list.clear();
            uint32_t _size434;
            ::apache::thrift::protocol::TType _etype437;
            xfer += iprot->readListBegin(_etype437, _size434);
            this->order_by_list.resize(_size434);
            uint32_t _i438;
            for (_i438 = 0; _i438 < _size434; ++_i438)
            {
              xfer += this->order_by_list[_i438].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.order_by_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SelectRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SelectRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("select_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->select_list.size()));
    std::vector<ParsedExpr> ::const_iterator _iter439;
    for (_iter439 = this->select_list.begin(); _iter439 != this->select_list.end(); ++_iter439)
    {
      xfer += (*_iter439).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.search_expr) {
    xfer += oprot->writeFieldBegin("search_expr", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->search_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.where_expr) {
    xfer += oprot->writeFieldBegin("where_expr", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->where_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_by_list) {
    xfer += oprot->writeFieldBegin("group_by_list", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->group_by_list.size()));
      std::vector<ParsedExpr> ::const_iterator _iter440;
      for (_iter440 = this->group_by_list.begin(); _iter440 != this->group_by_list.end(); ++_iter440)
      {
        xfer += (*_iter440).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.having_expr) {
    xfer += oprot->writeFieldBegin("having_expr", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->having_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.limit_expr) {
    xfer += oprot->writeFieldBegin("limit_expr", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->limit_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offset_expr) {
    xfer += oprot->writeFieldBegin("offset_expr", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->offset_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.order_by_list) {
    xfer += oprot->writeFieldBegin("order_by_list", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->order_by_list.size()));
      std::vector<OrderByExpr> ::const_iterator _iter441;
      for (_iter441 = this->order_by_list.begin(); _iter441 != this->order_by_list.end(); ++_iter441)
      {
        xfer += (*_iter441).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SelectRequest &a, SelectRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.select_list, b.select_list);
  swap(a.search_expr, b.search_expr);
  swap(a.where_expr, b.where_expr);
  swap(a.group_by_list, b.group_by_list);
  swap(a.having_expr, b.having_expr);
  swap(a.limit_expr, b.limit_expr);
  swap(a.offset_expr, b.offset_expr);
  swap(a.order_by_list, b.order_by_list);
  swap(a.__isset, b.__isset);
}

SelectRequest::SelectRequest(const SelectRequest& other442) {
  session_id = other442.session_id;
  db_name = other442.db_name;
  table_name = other442.table_name;
  select_list = other442.select_list;
  search_expr = other442.search_expr;
  where_expr = other442.where_expr;
  group_by_list = other442.group_by_list;
  having_expr = other442.having_expr;
  limit_expr = other442.limit_expr;
  offset_expr = other442.offset_expr;
  order_by_list = other442.order_by_list;
  __isset = other442.__isset;
}
SelectRequest& SelectRequest::operator=(const SelectRequest& other443) {
  session_id = other443.session_id;
  db_name = other443.db_name;
  table_name = other443.table_name;
  select_list = other443.select_list;
  search_expr = other443.search_expr;
  where_expr = other443.where_expr;
  group_by_list = other443.group_by_list;
  having_expr = other443.having_expr;
  limit_expr = other443.limit_expr;
  offset_expr = other443.offset_expr;
  order_by_list = other443.order_by_list;
  __isset = other443.__isset;
  return *this;
}
void SelectRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SelectRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "select_list=" << to_string(select_list);
  out << ", " << "search_expr="; (__isset.search_expr ? (out << to_string(search_expr)) : (out << "<null>"));
  out << ", " << "where_expr="; (__isset.where_expr ? (out << to_string(where_expr)) : (out << "<null>"));
  out << ", " << "group_by_list="; (__isset.group_by_list ? (out << to_string(group_by_list)) : (out << "<null>"));
  out << ", " << "having_expr="; (__isset.having_expr ? (out << to_string(having_expr)) : (out << "<null>"));
  out << ", " << "limit_expr="; (__isset.limit_expr ? (out << to_string(limit_expr)) : (out << "<null>"));
  out << ", " << "offset_expr="; (__isset.offset_expr ? (out << to_string(offset_expr)) : (out << "<null>"));
  out << ", " << "order_by_list="; (__isset.order_by_list ? (out << to_string(order_by_list)) : (out << "<null>"));
  out << ")";
}


SelectResponse::~SelectResponse() noexcept {
}


void SelectResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void SelectResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void SelectResponse::__set_column_defs(const std::vector<ColumnDef> & val) {
  this->column_defs = val;
}

void SelectResponse::__set_column_fields(const std::vector<ColumnField> & val) {
  this->column_fields = val;
}
std::ostream& operator<<(std::ostream& out, const SelectResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SelectResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_defs.clear();
            uint32_t _size444;
            ::apache::thrift::protocol::TType _etype447;
            xfer += iprot->readListBegin(_etype447, _size444);
            this->column_defs.resize(_size444);
            uint32_t _i448;
            for (_i448 = 0; _i448 < _size444; ++_i448)
            {
              xfer += this->column_defs[_i448].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_defs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_fields.clear();
            uint32_t _size449;
            ::apache::thrift::protocol::TType _etype452;
            xfer += iprot->readListBegin(_etype452, _size449);
            this->column_fields.resize(_size449);
            uint32_t _i453;
            for (_i453 = 0; _i453 < _size449; ++_i453)
            {
              xfer += this->column_fields[_i453].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SelectResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SelectResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_defs", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->column_defs.size()));
    std::vector<ColumnDef> ::const_iterator _iter454;
    for (_iter454 = this->column_defs.begin(); _iter454 != this->column_defs.end(); ++_iter454)
    {
      xfer += (*_iter454).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_fields", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->column_fields.size()));
    std::vector<ColumnField> ::const_iterator _iter455;
    for (_iter455 = this->column_fields.begin(); _iter455 != this->column_fields.end(); ++_iter455)
    {
      xfer += (*_iter455).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SelectResponse &a, SelectResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.column_defs, b.column_defs);
  swap(a.column_fields, b.column_fields);
  swap(a.__isset, b.__isset);
}

SelectResponse::SelectResponse(const SelectResponse& other456) {
  error_code = other456.error_code;
  error_msg = other456.error_msg;
  column_defs = other456.column_defs;
  column_fields = other456.column_fields;
  __isset = other456.__isset;
}
SelectResponse& SelectResponse::operator=(const SelectResponse& other457) {
  error_code = other457.error_code;
  error_msg = other457.error_msg;
  column_defs = other457.column_defs;
  column_fields = other457.column_fields;
  __isset = other457.__isset;
  return *this;
}
void SelectResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SelectResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "column_defs=" << to_string(column_defs);
  out << ", " << "column_fields=" << to_string(column_fields);
  out << ")";
}


DeleteRequest::~DeleteRequest() noexcept {
}


void DeleteRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void DeleteRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void DeleteRequest::__set_where_expr(const ParsedExpr& val) {
  this->where_expr = val;
}

void DeleteRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const DeleteRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeleteRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->where_expr.read(iprot);
          this->__isset.where_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("where_expr", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->where_expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteRequest &a, DeleteRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.where_expr, b.where_expr);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

DeleteRequest::DeleteRequest(const DeleteRequest& other458) {
  db_name = other458.db_name;
  table_name = other458.table_name;
  where_expr = other458.where_expr;
  session_id = other458.session_id;
  __isset = other458.__isset;
}
DeleteRequest& DeleteRequest::operator=(const DeleteRequest& other459) {
  db_name = other459.db_name;
  table_name = other459.table_name;
  where_expr = other459.where_expr;
  session_id = other459.session_id;
  __isset = other459.__isset;
  return *this;
}
void DeleteRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "where_expr=" << to_string(where_expr);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


UpdateRequest::~UpdateRequest() noexcept {
}


void UpdateRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void UpdateRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void UpdateRequest::__set_where_expr(const ParsedExpr& val) {
  this->where_expr = val;
}

void UpdateRequest::__set_update_expr_array(const std::vector<UpdateExpr> & val) {
  this->update_expr_array = val;
}

void UpdateRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->where_expr.read(iprot);
          this->__isset.where_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->update_expr_array.clear();
            uint32_t _size460;
            ::apache::thrift::protocol::TType _etype463;
            xfer += iprot->readListBegin(_etype463, _size460);
            this->update_expr_array.resize(_size460);
            uint32_t _i464;
            for (_i464 = 0; _i464 < _size460; ++_i464)
            {
              xfer += this->update_expr_array[_i464].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.update_expr_array = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("where_expr", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->where_expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("update_expr_array", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->update_expr_array.size()));
    std::vector<UpdateExpr> ::const_iterator _iter465;
    for (_iter465 = this->update_expr_array.begin(); _iter465 != this->update_expr_array.end(); ++_iter465)
    {
      xfer += (*_iter465).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateRequest &a, UpdateRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.where_expr, b.where_expr);
  swap(a.update_expr_array, b.update_expr_array);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

UpdateRequest::UpdateRequest(const UpdateRequest& other466) {
  db_name = other466.db_name;
  table_name = other466.table_name;
  where_expr = other466.where_expr;
  update_expr_array = other466.update_expr_array;
  session_id = other466.session_id;
  __isset = other466.__isset;
}
UpdateRequest& UpdateRequest::operator=(const UpdateRequest& other467) {
  db_name = other467.db_name;
  table_name = other467.table_name;
  where_expr = other467.where_expr;
  update_expr_array = other467.update_expr_array;
  session_id = other467.session_id;
  __isset = other467.__isset;
  return *this;
}
void UpdateRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "where_expr=" << to_string(where_expr);
  out << ", " << "update_expr_array=" << to_string(update_expr_array);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ShowTablesRequest::~ShowTablesRequest() noexcept {
}


void ShowTablesRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ShowTablesRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}
std::ostream& operator<<(std::ostream& out, const ShowTablesRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowTablesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowTablesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowTablesRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowTablesRequest &a, ShowTablesRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.__isset, b.__isset);
}

ShowTablesRequest::ShowTablesRequest(const ShowTablesRequest& other468) {
  session_id = other468.session_id;
  db_name = other468.db_name;
  __isset = other468.__isset;
}
ShowTablesRequest& ShowTablesRequest::operator=(const ShowTablesRequest& other469) {
  session_id = other469.session_id;
  db_name = other469.db_name;
  __isset = other469.__isset;
  return *this;
}
void ShowTablesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowTablesRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ")";
}


ShowSegmentsRequest::~ShowSegmentsRequest() noexcept {
}


void ShowSegmentsRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ShowSegmentsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowSegmentsRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}
std::ostream& operator<<(std::ostream& out, const ShowSegmentsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowSegmentsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowSegmentsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowSegmentsRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowSegmentsRequest &a, ShowSegmentsRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.__isset, b.__isset);
}

ShowSegmentsRequest::ShowSegmentsRequest(const ShowSegmentsRequest& other470) {
  session_id = other470.session_id;
  db_name = other470.db_name;
  table_name = other470.table_name;
  __isset = other470.__isset;
}
ShowSegmentsRequest& ShowSegmentsRequest::operator=(const ShowSegmentsRequest& other471) {
  session_id = other471.session_id;
  db_name = other471.db_name;
  table_name = other471.table_name;
  __isset = other471.__isset;
  return *this;
}
void ShowSegmentsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowSegmentsRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ")";
}


ShowSegmentRequest::~ShowSegmentRequest() noexcept {
}


void ShowSegmentRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ShowSegmentRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowSegmentRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowSegmentRequest::__set_segment_id(const int64_t val) {
  this->segment_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowSegmentRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowSegmentRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->segment_id);
          this->__isset.segment_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowSegmentRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowSegmentRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->segment_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowSegmentRequest &a, ShowSegmentRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.segment_id, b.segment_id);
  swap(a.__isset, b.__isset);
}

ShowSegmentRequest::ShowSegmentRequest(const ShowSegmentRequest& other472) {
  session_id = other472.session_id;
  db_name = other472.db_name;
  table_name = other472.table_name;
  segment_id = other472.segment_id;
  __isset = other472.__isset;
}
ShowSegmentRequest& ShowSegmentRequest::operator=(const ShowSegmentRequest& other473) {
  session_id = other473.session_id;
  db_name = other473.db_name;
  table_name = other473.table_name;
  segment_id = other473.segment_id;
  __isset = other473.__isset;
  return *this;
}
void ShowSegmentRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowSegmentRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "segment_id=" << to_string(segment_id);
  out << ")";
}


ShowSegmentResponse::~ShowSegmentResponse() noexcept {
}


void ShowSegmentResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ShowSegmentResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ShowSegmentResponse::__set_segment_id(const int64_t val) {
  this->segment_id = val;
}

void ShowSegmentResponse::__set_status(const std::string& val) {
  this->status = val;
}

void ShowSegmentResponse::__set_path(const std::string& val) {
  this->path = val;
}

void ShowSegmentResponse::__set_size(const std::string& val) {
  this->size = val;
}

void ShowSegmentResponse::__set_block_count(const int64_t val) {
  this->block_count = val;
}

void ShowSegmentResponse::__set_row_capacity(const int64_t val) {
  this->row_capacity = val;
}

void ShowSegmentResponse::__set_row_count(const int64_t val) {
  this->row_count = val;
}

void ShowSegmentResponse::__set_room(const int64_t val) {
  this->room = val;
}

void ShowSegmentResponse::__set_column_count(const int64_t val) {
  this->column_count = val;
}
std::ostream& operator<<(std::ostream& out, const ShowSegmentResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowSegmentResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->segment_id);
          this->__isset.segment_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->block_count);
          this->__isset.block_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->row_capacity);
          this->__isset.row_capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->row_count);
          this->__isset.row_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->room);
          this->__isset.room = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->column_count);
          this->__isset.column_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowSegmentResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowSegmentResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->segment_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("block_count", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->block_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_capacity", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->row_capacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_count", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->row_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->room);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_count", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->column_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowSegmentResponse &a, ShowSegmentResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.segment_id, b.segment_id);
  swap(a.status, b.status);
  swap(a.path, b.path);
  swap(a.size, b.size);
  swap(a.block_count, b.block_count);
  swap(a.row_capacity, b.row_capacity);
  swap(a.row_count, b.row_count);
  swap(a.room, b.room);
  swap(a.column_count, b.column_count);
  swap(a.__isset, b.__isset);
}

ShowSegmentResponse::ShowSegmentResponse(const ShowSegmentResponse& other474) {
  error_code = other474.error_code;
  error_msg = other474.error_msg;
  segment_id = other474.segment_id;
  status = other474.status;
  path = other474.path;
  size = other474.size;
  block_count = other474.block_count;
  row_capacity = other474.row_capacity;
  row_count = other474.row_count;
  room = other474.room;
  column_count = other474.column_count;
  __isset = other474.__isset;
}
ShowSegmentResponse& ShowSegmentResponse::operator=(const ShowSegmentResponse& other475) {
  error_code = other475.error_code;
  error_msg = other475.error_msg;
  segment_id = other475.segment_id;
  status = other475.status;
  path = other475.path;
  size = other475.size;
  block_count = other475.block_count;
  row_capacity = other475.row_capacity;
  row_count = other475.row_count;
  room = other475.room;
  column_count = other475.column_count;
  __isset = other475.__isset;
  return *this;
}
void ShowSegmentResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowSegmentResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "segment_id=" << to_string(segment_id);
  out << ", " << "status=" << to_string(status);
  out << ", " << "path=" << to_string(path);
  out << ", " << "size=" << to_string(size);
  out << ", " << "block_count=" << to_string(block_count);
  out << ", " << "row_capacity=" << to_string(row_capacity);
  out << ", " << "row_count=" << to_string(row_count);
  out << ", " << "room=" << to_string(room);
  out << ", " << "column_count=" << to_string(column_count);
  out << ")";
}


ShowBlocksRequest::~ShowBlocksRequest() noexcept {
}


void ShowBlocksRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ShowBlocksRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowBlocksRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowBlocksRequest::__set_segment_id(const int64_t val) {
  this->segment_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowBlocksRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowBlocksRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->segment_id);
          this->__isset.segment_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowBlocksRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowBlocksRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->segment_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowBlocksRequest &a, ShowBlocksRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.segment_id, b.segment_id);
  swap(a.__isset, b.__isset);
}

ShowBlocksRequest::ShowBlocksRequest(const ShowBlocksRequest& other476) {
  session_id = other476.session_id;
  db_name = other476.db_name;
  table_name = other476.table_name;
  segment_id = other476.segment_id;
  __isset = other476.__isset;
}
ShowBlocksRequest& ShowBlocksRequest::operator=(const ShowBlocksRequest& other477) {
  session_id = other477.session_id;
  db_name = other477.db_name;
  table_name = other477.table_name;
  segment_id = other477.segment_id;
  __isset = other477.__isset;
  return *this;
}
void ShowBlocksRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowBlocksRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "segment_id=" << to_string(segment_id);
  out << ")";
}


ShowBlockRequest::~ShowBlockRequest() noexcept {
}


void ShowBlockRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ShowBlockRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowBlockRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowBlockRequest::__set_segment_id(const int64_t val) {
  this->segment_id = val;
}

void ShowBlockRequest::__set_block_id(const int64_t val) {
  this->block_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowBlockRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowBlockRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->segment_id);
          this->__isset.segment_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->block_id);
          this->__isset.block_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowBlockRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowBlockRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->segment_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->block_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowBlockRequest &a, ShowBlockRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.segment_id, b.segment_id);
  swap(a.block_id, b.block_id);
  swap(a.__isset, b.__isset);
}

ShowBlockRequest::ShowBlockRequest(const ShowBlockRequest& other478) {
  session_id = other478.session_id;
  db_name = other478.db_name;
  table_name = other478.table_name;
  segment_id = other478.segment_id;
  block_id = other478.block_id;
  __isset = other478.__isset;
}
ShowBlockRequest& ShowBlockRequest::operator=(const ShowBlockRequest& other479) {
  session_id = other479.session_id;
  db_name = other479.db_name;
  table_name = other479.table_name;
  segment_id = other479.segment_id;
  block_id = other479.block_id;
  __isset = other479.__isset;
  return *this;
}
void ShowBlockRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowBlockRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "segment_id=" << to_string(segment_id);
  out << ", " << "block_id=" << to_string(block_id);
  out << ")";
}


ShowBlockResponse::~ShowBlockResponse() noexcept {
}


void ShowBlockResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ShowBlockResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ShowBlockResponse::__set_block_id(const int64_t val) {
  this->block_id = val;
}

void ShowBlockResponse::__set_path(const std::string& val) {
  this->path = val;
}

void ShowBlockResponse::__set_size(const std::string& val) {
  this->size = val;
}

void ShowBlockResponse::__set_row_capacity(const int64_t val) {
  this->row_capacity = val;
}

void ShowBlockResponse::__set_row_count(const int64_t val) {
  this->row_count = val;
}

void ShowBlockResponse::__set_column_count(const int64_t val) {
  this->column_count = val;
}
std::ostream& operator<<(std::ostream& out, const ShowBlockResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowBlockResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->block_id);
          this->__isset.block_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->row_capacity);
          this->__isset.row_capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->row_count);
          this->__isset.row_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->column_count);
          this->__isset.column_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowBlockResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowBlockResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->block_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_capacity", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->row_capacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_count", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->row_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_count", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->column_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowBlockResponse &a, ShowBlockResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.block_id, b.block_id);
  swap(a.path, b.path);
  swap(a.size, b.size);
  swap(a.row_capacity, b.row_capacity);
  swap(a.row_count, b.row_count);
  swap(a.column_count, b.column_count);
  swap(a.__isset, b.__isset);
}

ShowBlockResponse::ShowBlockResponse(const ShowBlockResponse& other480) {
  error_code = other480.error_code;
  error_msg = other480.error_msg;
  block_id = other480.block_id;
  path = other480.path;
  size = other480.size;
  row_capacity = other480.row_capacity;
  row_count = other480.row_count;
  column_count = other480.column_count;
  __isset = other480.__isset;
}
ShowBlockResponse& ShowBlockResponse::operator=(const ShowBlockResponse& other481) {
  error_code = other481.error_code;
  error_msg = other481.error_msg;
  block_id = other481.block_id;
  path = other481.path;
  size = other481.size;
  row_capacity = other481.row_capacity;
  row_count = other481.row_count;
  column_count = other481.column_count;
  __isset = other481.__isset;
  return *this;
}
void ShowBlockResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowBlockResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "block_id=" << to_string(block_id);
  out << ", " << "path=" << to_string(path);
  out << ", " << "size=" << to_string(size);
  out << ", " << "row_capacity=" << to_string(row_capacity);
  out << ", " << "row_count=" << to_string(row_count);
  out << ", " << "column_count=" << to_string(column_count);
  out << ")";
}


ShowBlockColumnRequest::~ShowBlockColumnRequest() noexcept {
}


void ShowBlockColumnRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ShowBlockColumnRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowBlockColumnRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowBlockColumnRequest::__set_segment_id(const int64_t val) {
  this->segment_id = val;
}

void ShowBlockColumnRequest::__set_block_id(const int64_t val) {
  this->block_id = val;
}

void ShowBlockColumnRequest::__set_column_id(const int64_t val) {
  this->column_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowBlockColumnRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowBlockColumnRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->segment_id);
          this->__isset.segment_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->block_id);
          this->__isset.block_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->column_id);
          this->__isset.column_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowBlockColumnRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowBlockColumnRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->segment_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->block_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_id", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->column_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowBlockColumnRequest &a, ShowBlockColumnRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.segment_id, b.segment_id);
  swap(a.block_id, b.block_id);
  swap(a.column_id, b.column_id);
  swap(a.__isset, b.__isset);
}

ShowBlockColumnRequest::ShowBlockColumnRequest(const ShowBlockColumnRequest& other482) {
  session_id = other482.session_id;
  db_name = other482.db_name;
  table_name = other482.table_name;
  segment_id = other482.segment_id;
  block_id = other482.block_id;
  column_id = other482.column_id;
  __isset = other482.__isset;
}
ShowBlockColumnRequest& ShowBlockColumnRequest::operator=(const ShowBlockColumnRequest& other483) {
  session_id = other483.session_id;
  db_name = other483.db_name;
  table_name = other483.table_name;
  segment_id = other483.segment_id;
  block_id = other483.block_id;
  column_id = other483.column_id;
  __isset = other483.__isset;
  return *this;
}
void ShowBlockColumnRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowBlockColumnRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "segment_id=" << to_string(segment_id);
  out << ", " << "block_id=" << to_string(block_id);
  out << ", " << "column_id=" << to_string(column_id);
  out << ")";
}


ShowBlockColumnResponse::~ShowBlockColumnResponse() noexcept {
}


void ShowBlockColumnResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ShowBlockColumnResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ShowBlockColumnResponse::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void ShowBlockColumnResponse::__set_column_id(const int64_t val) {
  this->column_id = val;
}

void ShowBlockColumnResponse::__set_data_type(const std::string& val) {
  this->data_type = val;
}

void ShowBlockColumnResponse::__set_path(const std::string& val) {
  this->path = val;
}

void ShowBlockColumnResponse::__set_extra_file_count(const int64_t val) {
  this->extra_file_count = val;
}

void ShowBlockColumnResponse::__set_extra_file_names(const std::string& val) {
  this->extra_file_names = val;
}
std::ostream& operator<<(std::ostream& out, const ShowBlockColumnResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowBlockColumnResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->column_id);
          this->__isset.column_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data_type);
          this->__isset.data_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->extra_file_count);
          this->__isset.extra_file_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extra_file_names);
          this->__isset.extra_file_names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowBlockColumnResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowBlockColumnResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->column_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_type", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->data_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra_file_count", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->extra_file_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra_file_names", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->extra_file_names);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowBlockColumnResponse &a, ShowBlockColumnResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.column_name, b.column_name);
  swap(a.column_id, b.column_id);
  swap(a.data_type, b.data_type);
  swap(a.path, b.path);
  swap(a.extra_file_count, b.extra_file_count);
  swap(a.extra_file_names, b.extra_file_names);
  swap(a.__isset, b.__isset);
}

ShowBlockColumnResponse::ShowBlockColumnResponse(const ShowBlockColumnResponse& other484) {
  error_code = other484.error_code;
  error_msg = other484.error_msg;
  column_name = other484.column_name;
  column_id = other484.column_id;
  data_type = other484.data_type;
  path = other484.path;
  extra_file_count = other484.extra_file_count;
  extra_file_names = other484.extra_file_names;
  __isset = other484.__isset;
}
ShowBlockColumnResponse& ShowBlockColumnResponse::operator=(const ShowBlockColumnResponse& other485) {
  error_code = other485.error_code;
  error_msg = other485.error_msg;
  column_name = other485.column_name;
  column_id = other485.column_id;
  data_type = other485.data_type;
  path = other485.path;
  extra_file_count = other485.extra_file_count;
  extra_file_names = other485.extra_file_names;
  __isset = other485.__isset;
  return *this;
}
void ShowBlockColumnResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowBlockColumnResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "column_id=" << to_string(column_id);
  out << ", " << "data_type=" << to_string(data_type);
  out << ", " << "path=" << to_string(path);
  out << ", " << "extra_file_count=" << to_string(extra_file_count);
  out << ", " << "extra_file_names=" << to_string(extra_file_names);
  out << ")";
}

} // namespace
