/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "infinity_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace infinity_thrift_rpc {

int _kLogicTypeValues[] = {
  LogicType::Boolean,
  LogicType::TinyInt,
  LogicType::SmallInt,
  LogicType::Integer,
  LogicType::BigInt,
  LogicType::HugeInt,
  LogicType::Decimal,
  LogicType::Float,
  LogicType::Double,
  LogicType::Varchar,
  LogicType::Embedding,
  LogicType::Tensor,
  LogicType::TensorArray,
  LogicType::Invalid
};
const char* _kLogicTypeNames[] = {
  "Boolean",
  "TinyInt",
  "SmallInt",
  "Integer",
  "BigInt",
  "HugeInt",
  "Decimal",
  "Float",
  "Double",
  "Varchar",
  "Embedding",
  "Tensor",
  "TensorArray",
  "Invalid"
};
const std::map<int, const char*> _LogicType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(14, _kLogicTypeValues, _kLogicTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const LogicType::type& val) {
  std::map<int, const char*>::const_iterator it = _LogicType_VALUES_TO_NAMES.find(val);
  if (it != _LogicType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const LogicType::type& val) {
  std::map<int, const char*>::const_iterator it = _LogicType_VALUES_TO_NAMES.find(val);
  if (it != _LogicType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kCreateConflictValues[] = {
  CreateConflict::Ignore,
  CreateConflict::Error,
  CreateConflict::Replace
};
const char* _kCreateConflictNames[] = {
  "Ignore",
  "Error",
  "Replace"
};
const std::map<int, const char*> _CreateConflict_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCreateConflictValues, _kCreateConflictNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const CreateConflict::type& val) {
  std::map<int, const char*>::const_iterator it = _CreateConflict_VALUES_TO_NAMES.find(val);
  if (it != _CreateConflict_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const CreateConflict::type& val) {
  std::map<int, const char*>::const_iterator it = _CreateConflict_VALUES_TO_NAMES.find(val);
  if (it != _CreateConflict_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kDropConflictValues[] = {
  DropConflict::Ignore,
  DropConflict::Error
};
const char* _kDropConflictNames[] = {
  "Ignore",
  "Error"
};
const std::map<int, const char*> _DropConflict_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kDropConflictValues, _kDropConflictNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const DropConflict::type& val) {
  std::map<int, const char*>::const_iterator it = _DropConflict_VALUES_TO_NAMES.find(val);
  if (it != _DropConflict_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const DropConflict::type& val) {
  std::map<int, const char*>::const_iterator it = _DropConflict_VALUES_TO_NAMES.find(val);
  if (it != _DropConflict_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kElementTypeValues[] = {
  ElementType::ElementBit,
  ElementType::ElementInt8,
  ElementType::ElementInt16,
  ElementType::ElementInt32,
  ElementType::ElementInt64,
  ElementType::ElementFloat32,
  ElementType::ElementFloat64
};
const char* _kElementTypeNames[] = {
  "ElementBit",
  "ElementInt8",
  "ElementInt16",
  "ElementInt32",
  "ElementInt64",
  "ElementFloat32",
  "ElementFloat64"
};
const std::map<int, const char*> _ElementType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kElementTypeValues, _kElementTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const ElementType::type& val) {
  std::map<int, const char*>::const_iterator it = _ElementType_VALUES_TO_NAMES.find(val);
  if (it != _ElementType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ElementType::type& val) {
  std::map<int, const char*>::const_iterator it = _ElementType_VALUES_TO_NAMES.find(val);
  if (it != _ElementType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kConstraintValues[] = {
  Constraint::PrimaryKey,
  Constraint::NotNull,
  Constraint::Null,
  Constraint::Unique
};
const char* _kConstraintNames[] = {
  "PrimaryKey",
  "NotNull",
  "Null",
  "Unique"
};
const std::map<int, const char*> _Constraint_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kConstraintValues, _kConstraintNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const Constraint::type& val) {
  std::map<int, const char*>::const_iterator it = _Constraint_VALUES_TO_NAMES.find(val);
  if (it != _Constraint_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const Constraint::type& val) {
  std::map<int, const char*>::const_iterator it = _Constraint_VALUES_TO_NAMES.find(val);
  if (it != _Constraint_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kLiteralTypeValues[] = {
  LiteralType::Boolean,
  LiteralType::Double,
  LiteralType::String,
  LiteralType::Int64,
  LiteralType::Null,
  LiteralType::IntegerArray,
  LiteralType::DoubleArray,
  LiteralType::IntegerTensorArray,
  LiteralType::DoubleTensorArray
};
const char* _kLiteralTypeNames[] = {
  "Boolean",
  "Double",
  "String",
  "Int64",
  "Null",
  "IntegerArray",
  "DoubleArray",
  "IntegerTensorArray",
  "DoubleTensorArray"
};
const std::map<int, const char*> _LiteralType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kLiteralTypeValues, _kLiteralTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const LiteralType::type& val) {
  std::map<int, const char*>::const_iterator it = _LiteralType_VALUES_TO_NAMES.find(val);
  if (it != _LiteralType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const LiteralType::type& val) {
  std::map<int, const char*>::const_iterator it = _LiteralType_VALUES_TO_NAMES.find(val);
  if (it != _LiteralType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kKnnDistanceTypeValues[] = {
  KnnDistanceType::L2,
  KnnDistanceType::Cosine,
  KnnDistanceType::InnerProduct,
  KnnDistanceType::Hamming
};
const char* _kKnnDistanceTypeNames[] = {
  "L2",
  "Cosine",
  "InnerProduct",
  "Hamming"
};
const std::map<int, const char*> _KnnDistanceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kKnnDistanceTypeValues, _kKnnDistanceTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const KnnDistanceType::type& val) {
  std::map<int, const char*>::const_iterator it = _KnnDistanceType_VALUES_TO_NAMES.find(val);
  if (it != _KnnDistanceType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const KnnDistanceType::type& val) {
  std::map<int, const char*>::const_iterator it = _KnnDistanceType_VALUES_TO_NAMES.find(val);
  if (it != _KnnDistanceType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kCopyFileTypeValues[] = {
  CopyFileType::CSV,
  CopyFileType::JSON,
  CopyFileType::JSONL,
  CopyFileType::FVECS,
  CopyFileType::CSR,
  CopyFileType::BVECS
};
const char* _kCopyFileTypeNames[] = {
  "CSV",
  "JSON",
  "JSONL",
  "FVECS",
  "CSR",
  "BVECS"
};
const std::map<int, const char*> _CopyFileType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kCopyFileTypeValues, _kCopyFileTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const CopyFileType::type& val) {
  std::map<int, const char*>::const_iterator it = _CopyFileType_VALUES_TO_NAMES.find(val);
  if (it != _CopyFileType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const CopyFileType::type& val) {
  std::map<int, const char*>::const_iterator it = _CopyFileType_VALUES_TO_NAMES.find(val);
  if (it != _CopyFileType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kColumnTypeValues[] = {
  ColumnType::ColumnBool,
  ColumnType::ColumnInt8,
  ColumnType::ColumnInt16,
  ColumnType::ColumnInt32,
  ColumnType::ColumnInt64,
  ColumnType::ColumnFloat32,
  ColumnType::ColumnFloat64,
  ColumnType::ColumnVarchar,
  ColumnType::ColumnEmbedding,
  ColumnType::ColumnTensor,
  ColumnType::ColumnTensorArray,
  ColumnType::ColumnRowID,
  ColumnType::ColumnInvalid
};
const char* _kColumnTypeNames[] = {
  "ColumnBool",
  "ColumnInt8",
  "ColumnInt16",
  "ColumnInt32",
  "ColumnInt64",
  "ColumnFloat32",
  "ColumnFloat64",
  "ColumnVarchar",
  "ColumnEmbedding",
  "ColumnTensor",
  "ColumnTensorArray",
  "ColumnRowID",
  "ColumnInvalid"
};
const std::map<int, const char*> _ColumnType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kColumnTypeValues, _kColumnTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const ColumnType::type& val) {
  std::map<int, const char*>::const_iterator it = _ColumnType_VALUES_TO_NAMES.find(val);
  if (it != _ColumnType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ColumnType::type& val) {
  std::map<int, const char*>::const_iterator it = _ColumnType_VALUES_TO_NAMES.find(val);
  if (it != _ColumnType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kIndexTypeValues[] = {
  IndexType::IVFFlat,
  IndexType::HnswLVQ,
  IndexType::Hnsw,
  IndexType::FullText,
  IndexType::Secondary,
  IndexType::EMVB
};
const char* _kIndexTypeNames[] = {
  "IVFFlat",
  "HnswLVQ",
  "Hnsw",
  "FullText",
  "Secondary",
  "EMVB"
};
const std::map<int, const char*> _IndexType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kIndexTypeValues, _kIndexTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const IndexType::type& val) {
  std::map<int, const char*>::const_iterator it = _IndexType_VALUES_TO_NAMES.find(val);
  if (it != _IndexType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const IndexType::type& val) {
  std::map<int, const char*>::const_iterator it = _IndexType_VALUES_TO_NAMES.find(val);
  if (it != _IndexType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kExplainTypeValues[] = {
  ExplainType::Analyze,
  ExplainType::Ast,
  ExplainType::UnOpt,
  ExplainType::Opt,
  ExplainType::Physical,
  ExplainType::Pipeline,
  ExplainType::Fragment
};
const char* _kExplainTypeNames[] = {
  "Analyze",
  "Ast",
  "UnOpt",
  "Opt",
  "Physical",
  "Pipeline",
  "Fragment"
};
const std::map<int, const char*> _ExplainType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kExplainTypeValues, _kExplainTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const ExplainType::type& val) {
  std::map<int, const char*>::const_iterator it = _ExplainType_VALUES_TO_NAMES.find(val);
  if (it != _ExplainType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ExplainType::type& val) {
  std::map<int, const char*>::const_iterator it = _ExplainType_VALUES_TO_NAMES.find(val);
  if (it != _ExplainType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


Property::~Property() noexcept {
}


void Property::__set_key(const std::string& val) {
  this->key = val;
}

void Property::__set_value(const std::string& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const Property& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Property::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Property::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Property");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Property &a, Property &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

Property::Property(const Property& other0) {
  key = other0.key;
  value = other0.value;
  __isset = other0.__isset;
}
Property& Property::operator=(const Property& other1) {
  key = other1.key;
  value = other1.value;
  __isset = other1.__isset;
  return *this;
}
void Property::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Property(";
  out << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


CreateOption::~CreateOption() noexcept {
}


void CreateOption::__set_conflict_type(const CreateConflict::type val) {
  this->conflict_type = val;
}

void CreateOption::__set_properties(const std::vector<Property> & val) {
  this->properties = val;
}
std::ostream& operator<<(std::ostream& out, const CreateOption& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->conflict_type = static_cast<CreateConflict::type>(ecast2);
          this->__isset.conflict_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->properties.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readListBegin(_etype6, _size3);
            this->properties.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += this->properties[_i7].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.properties = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateOption");

  xfer += oprot->writeFieldBegin("conflict_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->conflict_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("properties", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->properties.size()));
    std::vector<Property> ::const_iterator _iter8;
    for (_iter8 = this->properties.begin(); _iter8 != this->properties.end(); ++_iter8)
    {
      xfer += (*_iter8).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateOption &a, CreateOption &b) {
  using ::std::swap;
  swap(a.conflict_type, b.conflict_type);
  swap(a.properties, b.properties);
  swap(a.__isset, b.__isset);
}

CreateOption::CreateOption(const CreateOption& other9) {
  conflict_type = other9.conflict_type;
  properties = other9.properties;
  __isset = other9.__isset;
}
CreateOption& CreateOption::operator=(const CreateOption& other10) {
  conflict_type = other10.conflict_type;
  properties = other10.properties;
  __isset = other10.__isset;
  return *this;
}
void CreateOption::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateOption(";
  out << "conflict_type=" << to_string(conflict_type);
  out << ", " << "properties=" << to_string(properties);
  out << ")";
}


DropOption::~DropOption() noexcept {
}


void DropOption::__set_conflict_type(const DropConflict::type val) {
  this->conflict_type = val;
}
std::ostream& operator<<(std::ostream& out, const DropOption& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DropOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->conflict_type = static_cast<DropConflict::type>(ecast11);
          this->__isset.conflict_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DropOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropOption");

  xfer += oprot->writeFieldBegin("conflict_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->conflict_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropOption &a, DropOption &b) {
  using ::std::swap;
  swap(a.conflict_type, b.conflict_type);
  swap(a.__isset, b.__isset);
}

DropOption::DropOption(const DropOption& other12) noexcept {
  conflict_type = other12.conflict_type;
  __isset = other12.__isset;
}
DropOption& DropOption::operator=(const DropOption& other13) noexcept {
  conflict_type = other13.conflict_type;
  __isset = other13.__isset;
  return *this;
}
void DropOption::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropOption(";
  out << "conflict_type=" << to_string(conflict_type);
  out << ")";
}


NumberType::~NumberType() noexcept {
}

std::ostream& operator<<(std::ostream& out, const NumberType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NumberType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NumberType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NumberType");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NumberType &a, NumberType &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

NumberType::NumberType(const NumberType& other14) noexcept {
  (void) other14;
}
NumberType& NumberType::operator=(const NumberType& other15) noexcept {
  (void) other15;
  return *this;
}
void NumberType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NumberType(";
  out << ")";
}


VarcharType::~VarcharType() noexcept {
}

std::ostream& operator<<(std::ostream& out, const VarcharType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t VarcharType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VarcharType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VarcharType");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VarcharType &a, VarcharType &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

VarcharType::VarcharType(const VarcharType& other16) noexcept {
  (void) other16;
}
VarcharType& VarcharType::operator=(const VarcharType& other17) noexcept {
  (void) other17;
  return *this;
}
void VarcharType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VarcharType(";
  out << ")";
}


EmbeddingType::~EmbeddingType() noexcept {
}


void EmbeddingType::__set_dimension(const int32_t val) {
  this->dimension = val;
}

void EmbeddingType::__set_element_type(const ElementType::type val) {
  this->element_type = val;
}
std::ostream& operator<<(std::ostream& out, const EmbeddingType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EmbeddingType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dimension);
          this->__isset.dimension = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->element_type = static_cast<ElementType::type>(ecast18);
          this->__isset.element_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EmbeddingType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EmbeddingType");

  xfer += oprot->writeFieldBegin("dimension", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->dimension);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("element_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->element_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EmbeddingType &a, EmbeddingType &b) {
  using ::std::swap;
  swap(a.dimension, b.dimension);
  swap(a.element_type, b.element_type);
  swap(a.__isset, b.__isset);
}

EmbeddingType::EmbeddingType(const EmbeddingType& other19) noexcept {
  dimension = other19.dimension;
  element_type = other19.element_type;
  __isset = other19.__isset;
}
EmbeddingType& EmbeddingType::operator=(const EmbeddingType& other20) noexcept {
  dimension = other20.dimension;
  element_type = other20.element_type;
  __isset = other20.__isset;
  return *this;
}
void EmbeddingType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EmbeddingType(";
  out << "dimension=" << to_string(dimension);
  out << ", " << "element_type=" << to_string(element_type);
  out << ")";
}


PhysicalType::~PhysicalType() noexcept {
}


void PhysicalType::__set_number_type(const NumberType& val) {
  this->number_type = val;
__isset.number_type = true;
}

void PhysicalType::__set_varchar_type(const VarcharType& val) {
  this->varchar_type = val;
__isset.varchar_type = true;
}

void PhysicalType::__set_embedding_type(const EmbeddingType& val) {
  this->embedding_type = val;
__isset.embedding_type = true;
}
std::ostream& operator<<(std::ostream& out, const PhysicalType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PhysicalType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->number_type.read(iprot);
          this->__isset.number_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->varchar_type.read(iprot);
          this->__isset.varchar_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->embedding_type.read(iprot);
          this->__isset.embedding_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PhysicalType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PhysicalType");

  if (this->__isset.number_type) {
    xfer += oprot->writeFieldBegin("number_type", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->number_type.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.varchar_type) {
    xfer += oprot->writeFieldBegin("varchar_type", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->varchar_type.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.embedding_type) {
    xfer += oprot->writeFieldBegin("embedding_type", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->embedding_type.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PhysicalType &a, PhysicalType &b) {
  using ::std::swap;
  swap(a.number_type, b.number_type);
  swap(a.varchar_type, b.varchar_type);
  swap(a.embedding_type, b.embedding_type);
  swap(a.__isset, b.__isset);
}

PhysicalType::PhysicalType(const PhysicalType& other21) noexcept {
  number_type = other21.number_type;
  varchar_type = other21.varchar_type;
  embedding_type = other21.embedding_type;
  __isset = other21.__isset;
}
PhysicalType& PhysicalType::operator=(const PhysicalType& other22) noexcept {
  number_type = other22.number_type;
  varchar_type = other22.varchar_type;
  embedding_type = other22.embedding_type;
  __isset = other22.__isset;
  return *this;
}
void PhysicalType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PhysicalType(";
  out << "number_type="; (__isset.number_type ? (out << to_string(number_type)) : (out << "<null>"));
  out << ", " << "varchar_type="; (__isset.varchar_type ? (out << to_string(varchar_type)) : (out << "<null>"));
  out << ", " << "embedding_type="; (__isset.embedding_type ? (out << to_string(embedding_type)) : (out << "<null>"));
  out << ")";
}


DataType::~DataType() noexcept {
}


void DataType::__set_logic_type(const LogicType::type val) {
  this->logic_type = val;
}

void DataType::__set_physical_type(const PhysicalType& val) {
  this->physical_type = val;
}
std::ostream& operator<<(std::ostream& out, const DataType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DataType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast23;
          xfer += iprot->readI32(ecast23);
          this->logic_type = static_cast<LogicType::type>(ecast23);
          this->__isset.logic_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->physical_type.read(iprot);
          this->__isset.physical_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DataType");

  xfer += oprot->writeFieldBegin("logic_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->logic_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("physical_type", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->physical_type.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DataType &a, DataType &b) {
  using ::std::swap;
  swap(a.logic_type, b.logic_type);
  swap(a.physical_type, b.physical_type);
  swap(a.__isset, b.__isset);
}

DataType::DataType(const DataType& other24) noexcept {
  logic_type = other24.logic_type;
  physical_type = other24.physical_type;
  __isset = other24.__isset;
}
DataType& DataType::operator=(const DataType& other25) noexcept {
  logic_type = other25.logic_type;
  physical_type = other25.physical_type;
  __isset = other25.__isset;
  return *this;
}
void DataType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DataType(";
  out << "logic_type=" << to_string(logic_type);
  out << ", " << "physical_type=" << to_string(physical_type);
  out << ")";
}


ParsedExprType::~ParsedExprType() noexcept {
}


void ParsedExprType::__set_constant_expr(::std::shared_ptr<ConstantExpr> val) {
  this->constant_expr = val;
__isset.constant_expr = true;
}

void ParsedExprType::__set_column_expr(::std::shared_ptr<ColumnExpr> val) {
  this->column_expr = val;
__isset.column_expr = true;
}

void ParsedExprType::__set_function_expr(::std::shared_ptr<FunctionExpr> val) {
  this->function_expr = val;
__isset.function_expr = true;
}

void ParsedExprType::__set_between_expr(::std::shared_ptr<BetweenExpr> val) {
  this->between_expr = val;
__isset.between_expr = true;
}

void ParsedExprType::__set_knn_expr(::std::shared_ptr<KnnExpr> val) {
  this->knn_expr = val;
__isset.knn_expr = true;
}

void ParsedExprType::__set_match_expr(::std::shared_ptr<MatchExpr> val) {
  this->match_expr = val;
__isset.match_expr = true;
}

void ParsedExprType::__set_fusion_expr(::std::shared_ptr<FusionExpr> val) {
  this->fusion_expr = val;
__isset.fusion_expr = true;
}

void ParsedExprType::__set_search_expr(::std::shared_ptr<SearchExpr> val) {
  this->search_expr = val;
__isset.search_expr = true;
}
std::ostream& operator<<(std::ostream& out, const ParsedExprType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ParsedExprType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->constant_expr) { 
            this->constant_expr = ::std::shared_ptr<ConstantExpr>(new ConstantExpr);
          }
          xfer += this->constant_expr->read(iprot);
          bool wasSet = false;
          if (this->constant_expr->__isset.literal_type) { wasSet = true; }
          if (this->constant_expr->__isset.bool_value) { wasSet = true; }
          if (this->constant_expr->__isset.i64_value) { wasSet = true; }
          if (this->constant_expr->__isset.f64_value) { wasSet = true; }
          if (this->constant_expr->__isset.str_value) { wasSet = true; }
          if (this->constant_expr->__isset.i64_array_value) { wasSet = true; }
          if (this->constant_expr->__isset.f64_array_value) { wasSet = true; }
          if (this->constant_expr->__isset.i64_tensor_array_value) { wasSet = true; }
          if (this->constant_expr->__isset.f64_tensor_array_value) { wasSet = true; }
          if (!wasSet) { this->constant_expr.reset(); }
          this->__isset.constant_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->column_expr) { 
            this->column_expr = ::std::shared_ptr<ColumnExpr>(new ColumnExpr);
          }
          xfer += this->column_expr->read(iprot);
          bool wasSet = false;
          if (this->column_expr->__isset.column_name) { wasSet = true; }
          if (this->column_expr->__isset.star) { wasSet = true; }
          if (!wasSet) { this->column_expr.reset(); }
          this->__isset.column_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->function_expr) { 
            this->function_expr = ::std::shared_ptr<FunctionExpr>(new FunctionExpr);
          }
          xfer += this->function_expr->read(iprot);
          bool wasSet = false;
          if (this->function_expr->__isset.function_name) { wasSet = true; }
          if (this->function_expr->__isset.arguments) { wasSet = true; }
          if (!wasSet) { this->function_expr.reset(); }
          this->__isset.function_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->between_expr) { 
            this->between_expr = ::std::shared_ptr<BetweenExpr>(new BetweenExpr);
          }
          xfer += this->between_expr->read(iprot);
          bool wasSet = false;
          if (this->between_expr->__isset.value) { wasSet = true; }
          if (this->between_expr->__isset.upper_bound) { wasSet = true; }
          if (this->between_expr->__isset.lower_bound) { wasSet = true; }
          if (!wasSet) { this->between_expr.reset(); }
          this->__isset.between_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->knn_expr) { 
            this->knn_expr = ::std::shared_ptr<KnnExpr>(new KnnExpr);
          }
          xfer += this->knn_expr->read(iprot);
          bool wasSet = false;
          if (this->knn_expr->__isset.column_expr) { wasSet = true; }
          if (this->knn_expr->__isset.embedding_data) { wasSet = true; }
          if (this->knn_expr->__isset.embedding_data_type) { wasSet = true; }
          if (this->knn_expr->__isset.distance_type) { wasSet = true; }
          if (this->knn_expr->__isset.topn) { wasSet = true; }
          if (this->knn_expr->__isset.opt_params) { wasSet = true; }
          if (!wasSet) { this->knn_expr.reset(); }
          this->__isset.knn_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->match_expr) { 
            this->match_expr = ::std::shared_ptr<MatchExpr>(new MatchExpr);
          }
          xfer += this->match_expr->read(iprot);
          bool wasSet = false;
          if (this->match_expr->__isset.fields) { wasSet = true; }
          if (this->match_expr->__isset.matching_text) { wasSet = true; }
          if (this->match_expr->__isset.options_text) { wasSet = true; }
          if (!wasSet) { this->match_expr.reset(); }
          this->__isset.match_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->fusion_expr) { 
            this->fusion_expr = ::std::shared_ptr<FusionExpr>(new FusionExpr);
          }
          xfer += this->fusion_expr->read(iprot);
          bool wasSet = false;
          if (this->fusion_expr->__isset.method) { wasSet = true; }
          if (this->fusion_expr->__isset.options_text) { wasSet = true; }
          if (this->fusion_expr->__isset.optional_match_tensor_expr) { wasSet = true; }
          if (!wasSet) { this->fusion_expr.reset(); }
          this->__isset.fusion_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          if (!this->search_expr) { 
            this->search_expr = ::std::shared_ptr<SearchExpr>(new SearchExpr);
          }
          xfer += this->search_expr->read(iprot);
          bool wasSet = false;
          if (this->search_expr->__isset.match_exprs) { wasSet = true; }
          if (this->search_expr->__isset.knn_exprs) { wasSet = true; }
          if (this->search_expr->__isset.match_tensor_exprs) { wasSet = true; }
          if (this->search_expr->__isset.fusion_exprs) { wasSet = true; }
          if (!wasSet) { this->search_expr.reset(); }
          this->__isset.search_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ParsedExprType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ParsedExprType");

  if (this->__isset.constant_expr) {
    xfer += oprot->writeFieldBegin("constant_expr", ::apache::thrift::protocol::T_STRUCT, 1);
    if (this->constant_expr) {
      xfer += this->constant_expr->write(oprot); 
    } else {oprot->writeStructBegin("ConstantExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.column_expr) {
    xfer += oprot->writeFieldBegin("column_expr", ::apache::thrift::protocol::T_STRUCT, 2);
    if (this->column_expr) {
      xfer += this->column_expr->write(oprot); 
    } else {oprot->writeStructBegin("ColumnExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.function_expr) {
    xfer += oprot->writeFieldBegin("function_expr", ::apache::thrift::protocol::T_STRUCT, 3);
    if (this->function_expr) {
      xfer += this->function_expr->write(oprot); 
    } else {oprot->writeStructBegin("FunctionExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.between_expr) {
    xfer += oprot->writeFieldBegin("between_expr", ::apache::thrift::protocol::T_STRUCT, 4);
    if (this->between_expr) {
      xfer += this->between_expr->write(oprot); 
    } else {oprot->writeStructBegin("BetweenExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.knn_expr) {
    xfer += oprot->writeFieldBegin("knn_expr", ::apache::thrift::protocol::T_STRUCT, 5);
    if (this->knn_expr) {
      xfer += this->knn_expr->write(oprot); 
    } else {oprot->writeStructBegin("KnnExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.match_expr) {
    xfer += oprot->writeFieldBegin("match_expr", ::apache::thrift::protocol::T_STRUCT, 6);
    if (this->match_expr) {
      xfer += this->match_expr->write(oprot); 
    } else {oprot->writeStructBegin("MatchExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fusion_expr) {
    xfer += oprot->writeFieldBegin("fusion_expr", ::apache::thrift::protocol::T_STRUCT, 7);
    if (this->fusion_expr) {
      xfer += this->fusion_expr->write(oprot); 
    } else {oprot->writeStructBegin("FusionExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.search_expr) {
    xfer += oprot->writeFieldBegin("search_expr", ::apache::thrift::protocol::T_STRUCT, 8);
    if (this->search_expr) {
      xfer += this->search_expr->write(oprot); 
    } else {oprot->writeStructBegin("SearchExpr"); 
      oprot->writeStructEnd();
      oprot->writeFieldStop();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ParsedExprType &a, ParsedExprType &b) {
  using ::std::swap;
  swap(a.constant_expr, b.constant_expr);
  swap(a.column_expr, b.column_expr);
  swap(a.function_expr, b.function_expr);
  swap(a.between_expr, b.between_expr);
  swap(a.knn_expr, b.knn_expr);
  swap(a.match_expr, b.match_expr);
  swap(a.fusion_expr, b.fusion_expr);
  swap(a.search_expr, b.search_expr);
  swap(a.__isset, b.__isset);
}

ParsedExprType::ParsedExprType(const ParsedExprType& other26) {
  constant_expr = other26.constant_expr;
  column_expr = other26.column_expr;
  function_expr = other26.function_expr;
  between_expr = other26.between_expr;
  knn_expr = other26.knn_expr;
  match_expr = other26.match_expr;
  fusion_expr = other26.fusion_expr;
  search_expr = other26.search_expr;
  __isset = other26.__isset;
}
ParsedExprType& ParsedExprType::operator=(const ParsedExprType& other27) {
  constant_expr = other27.constant_expr;
  column_expr = other27.column_expr;
  function_expr = other27.function_expr;
  between_expr = other27.between_expr;
  knn_expr = other27.knn_expr;
  match_expr = other27.match_expr;
  fusion_expr = other27.fusion_expr;
  search_expr = other27.search_expr;
  __isset = other27.__isset;
  return *this;
}
void ParsedExprType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ParsedExprType(";
  out << "constant_expr="; (__isset.constant_expr ? (out << to_string(constant_expr)) : (out << "<null>"));
  out << ", " << "column_expr="; (__isset.column_expr ? (out << to_string(column_expr)) : (out << "<null>"));
  out << ", " << "function_expr="; (__isset.function_expr ? (out << to_string(function_expr)) : (out << "<null>"));
  out << ", " << "between_expr="; (__isset.between_expr ? (out << to_string(between_expr)) : (out << "<null>"));
  out << ", " << "knn_expr="; (__isset.knn_expr ? (out << to_string(knn_expr)) : (out << "<null>"));
  out << ", " << "match_expr="; (__isset.match_expr ? (out << to_string(match_expr)) : (out << "<null>"));
  out << ", " << "fusion_expr="; (__isset.fusion_expr ? (out << to_string(fusion_expr)) : (out << "<null>"));
  out << ", " << "search_expr="; (__isset.search_expr ? (out << to_string(search_expr)) : (out << "<null>"));
  out << ")";
}


ParsedExpr::~ParsedExpr() noexcept {
}


void ParsedExpr::__set_type(const ParsedExprType& val) {
  this->type = val;
}

void ParsedExpr::__set_alias_name(const std::string& val) {
  this->alias_name = val;
}
std::ostream& operator<<(std::ostream& out, const ParsedExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ParsedExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->type.read(iprot);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->alias_name);
          this->__isset.alias_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ParsedExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ParsedExpr");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->type.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alias_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->alias_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ParsedExpr &a, ParsedExpr &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.alias_name, b.alias_name);
  swap(a.__isset, b.__isset);
}

ParsedExpr::ParsedExpr(const ParsedExpr& other28) {
  type = other28.type;
  alias_name = other28.alias_name;
  __isset = other28.__isset;
}
ParsedExpr& ParsedExpr::operator=(const ParsedExpr& other29) {
  type = other29.type;
  alias_name = other29.alias_name;
  __isset = other29.__isset;
  return *this;
}
void ParsedExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ParsedExpr(";
  out << "type=" << to_string(type);
  out << ", " << "alias_name=" << to_string(alias_name);
  out << ")";
}


ColumnExpr::~ColumnExpr() noexcept {
}


void ColumnExpr::__set_column_name(const std::vector<std::string> & val) {
  this->column_name = val;
}

void ColumnExpr::__set_star(const bool val) {
  this->star = val;
}
std::ostream& operator<<(std::ostream& out, const ColumnExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ColumnExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_name.clear();
            uint32_t _size30;
            ::apache::thrift::protocol::TType _etype33;
            xfer += iprot->readListBegin(_etype33, _size30);
            this->column_name.resize(_size30);
            uint32_t _i34;
            for (_i34 = 0; _i34 < _size30; ++_i34)
            {
              xfer += iprot->readString(this->column_name[_i34]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->star);
          this->__isset.star = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ColumnExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnExpr");

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_name.size()));
    std::vector<std::string> ::const_iterator _iter35;
    for (_iter35 = this->column_name.begin(); _iter35 != this->column_name.end(); ++_iter35)
    {
      xfer += oprot->writeString((*_iter35));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("star", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->star);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnExpr &a, ColumnExpr &b) {
  using ::std::swap;
  swap(a.column_name, b.column_name);
  swap(a.star, b.star);
  swap(a.__isset, b.__isset);
}

ColumnExpr::ColumnExpr(const ColumnExpr& other36) {
  column_name = other36.column_name;
  star = other36.star;
  __isset = other36.__isset;
}
ColumnExpr& ColumnExpr::operator=(const ColumnExpr& other37) {
  column_name = other37.column_name;
  star = other37.star;
  __isset = other37.__isset;
  return *this;
}
void ColumnExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnExpr(";
  out << "column_name=" << to_string(column_name);
  out << ", " << "star=" << to_string(star);
  out << ")";
}


EmbeddingData::~EmbeddingData() noexcept {
}


void EmbeddingData::__set_bool_array_value(const std::vector<bool> & val) {
  this->bool_array_value = val;
__isset.bool_array_value = true;
}

void EmbeddingData::__set_i8_array_value(const std::vector<std::string> & val) {
  this->i8_array_value = val;
__isset.i8_array_value = true;
}

void EmbeddingData::__set_i16_array_value(const std::vector<int16_t> & val) {
  this->i16_array_value = val;
__isset.i16_array_value = true;
}

void EmbeddingData::__set_i32_array_value(const std::vector<int32_t> & val) {
  this->i32_array_value = val;
__isset.i32_array_value = true;
}

void EmbeddingData::__set_i64_array_value(const std::vector<int64_t> & val) {
  this->i64_array_value = val;
__isset.i64_array_value = true;
}

void EmbeddingData::__set_f32_array_value(const std::vector<double> & val) {
  this->f32_array_value = val;
__isset.f32_array_value = true;
}

void EmbeddingData::__set_f64_array_value(const std::vector<double> & val) {
  this->f64_array_value = val;
__isset.f64_array_value = true;
}
std::ostream& operator<<(std::ostream& out, const EmbeddingData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t EmbeddingData::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bool_array_value.clear();
            uint32_t _size38;
            ::apache::thrift::protocol::TType _etype41;
            xfer += iprot->readListBegin(_etype41, _size38);
            this->bool_array_value.resize(_size38);
            uint32_t _i42;
            for (_i42 = 0; _i42 < _size38; ++_i42)
            {
              xfer += iprot->readBool(this->bool_array_value[_i42]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.bool_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i8_array_value.clear();
            uint32_t _size43;
            ::apache::thrift::protocol::TType _etype46;
            xfer += iprot->readListBegin(_etype46, _size43);
            this->i8_array_value.resize(_size43);
            uint32_t _i47;
            for (_i47 = 0; _i47 < _size43; ++_i47)
            {
              xfer += iprot->readBinary(this->i8_array_value[_i47]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i8_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i16_array_value.clear();
            uint32_t _size48;
            ::apache::thrift::protocol::TType _etype51;
            xfer += iprot->readListBegin(_etype51, _size48);
            this->i16_array_value.resize(_size48);
            uint32_t _i52;
            for (_i52 = 0; _i52 < _size48; ++_i52)
            {
              xfer += iprot->readI16(this->i16_array_value[_i52]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i16_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i32_array_value.clear();
            uint32_t _size53;
            ::apache::thrift::protocol::TType _etype56;
            xfer += iprot->readListBegin(_etype56, _size53);
            this->i32_array_value.resize(_size53);
            uint32_t _i57;
            for (_i57 = 0; _i57 < _size53; ++_i57)
            {
              xfer += iprot->readI32(this->i32_array_value[_i57]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i32_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i64_array_value.clear();
            uint32_t _size58;
            ::apache::thrift::protocol::TType _etype61;
            xfer += iprot->readListBegin(_etype61, _size58);
            this->i64_array_value.resize(_size58);
            uint32_t _i62;
            for (_i62 = 0; _i62 < _size58; ++_i62)
            {
              xfer += iprot->readI64(this->i64_array_value[_i62]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i64_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->f32_array_value.clear();
            uint32_t _size63;
            ::apache::thrift::protocol::TType _etype66;
            xfer += iprot->readListBegin(_etype66, _size63);
            this->f32_array_value.resize(_size63);
            uint32_t _i67;
            for (_i67 = 0; _i67 < _size63; ++_i67)
            {
              xfer += iprot->readDouble(this->f32_array_value[_i67]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.f32_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->f64_array_value.clear();
            uint32_t _size68;
            ::apache::thrift::protocol::TType _etype71;
            xfer += iprot->readListBegin(_etype71, _size68);
            this->f64_array_value.resize(_size68);
            uint32_t _i72;
            for (_i72 = 0; _i72 < _size68; ++_i72)
            {
              xfer += iprot->readDouble(this->f64_array_value[_i72]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.f64_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EmbeddingData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EmbeddingData");

  if (this->__isset.bool_array_value) {
    xfer += oprot->writeFieldBegin("bool_array_value", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->bool_array_value.size()));
      std::vector<bool> ::const_iterator _iter73;
      for (_iter73 = this->bool_array_value.begin(); _iter73 != this->bool_array_value.end(); ++_iter73)
      {
        xfer += oprot->writeBool((*_iter73));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i8_array_value) {
    xfer += oprot->writeFieldBegin("i8_array_value", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->i8_array_value.size()));
      std::vector<std::string> ::const_iterator _iter74;
      for (_iter74 = this->i8_array_value.begin(); _iter74 != this->i8_array_value.end(); ++_iter74)
      {
        xfer += oprot->writeBinary((*_iter74));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i16_array_value) {
    xfer += oprot->writeFieldBegin("i16_array_value", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->i16_array_value.size()));
      std::vector<int16_t> ::const_iterator _iter75;
      for (_iter75 = this->i16_array_value.begin(); _iter75 != this->i16_array_value.end(); ++_iter75)
      {
        xfer += oprot->writeI16((*_iter75));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i32_array_value) {
    xfer += oprot->writeFieldBegin("i32_array_value", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->i32_array_value.size()));
      std::vector<int32_t> ::const_iterator _iter76;
      for (_iter76 = this->i32_array_value.begin(); _iter76 != this->i32_array_value.end(); ++_iter76)
      {
        xfer += oprot->writeI32((*_iter76));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i64_array_value) {
    xfer += oprot->writeFieldBegin("i64_array_value", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->i64_array_value.size()));
      std::vector<int64_t> ::const_iterator _iter77;
      for (_iter77 = this->i64_array_value.begin(); _iter77 != this->i64_array_value.end(); ++_iter77)
      {
        xfer += oprot->writeI64((*_iter77));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.f32_array_value) {
    xfer += oprot->writeFieldBegin("f32_array_value", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->f32_array_value.size()));
      std::vector<double> ::const_iterator _iter78;
      for (_iter78 = this->f32_array_value.begin(); _iter78 != this->f32_array_value.end(); ++_iter78)
      {
        xfer += oprot->writeDouble((*_iter78));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.f64_array_value) {
    xfer += oprot->writeFieldBegin("f64_array_value", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->f64_array_value.size()));
      std::vector<double> ::const_iterator _iter79;
      for (_iter79 = this->f64_array_value.begin(); _iter79 != this->f64_array_value.end(); ++_iter79)
      {
        xfer += oprot->writeDouble((*_iter79));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EmbeddingData &a, EmbeddingData &b) {
  using ::std::swap;
  swap(a.bool_array_value, b.bool_array_value);
  swap(a.i8_array_value, b.i8_array_value);
  swap(a.i16_array_value, b.i16_array_value);
  swap(a.i32_array_value, b.i32_array_value);
  swap(a.i64_array_value, b.i64_array_value);
  swap(a.f32_array_value, b.f32_array_value);
  swap(a.f64_array_value, b.f64_array_value);
  swap(a.__isset, b.__isset);
}

EmbeddingData::EmbeddingData(const EmbeddingData& other80) {
  bool_array_value = other80.bool_array_value;
  i8_array_value = other80.i8_array_value;
  i16_array_value = other80.i16_array_value;
  i32_array_value = other80.i32_array_value;
  i64_array_value = other80.i64_array_value;
  f32_array_value = other80.f32_array_value;
  f64_array_value = other80.f64_array_value;
  __isset = other80.__isset;
}
EmbeddingData& EmbeddingData::operator=(const EmbeddingData& other81) {
  bool_array_value = other81.bool_array_value;
  i8_array_value = other81.i8_array_value;
  i16_array_value = other81.i16_array_value;
  i32_array_value = other81.i32_array_value;
  i64_array_value = other81.i64_array_value;
  f32_array_value = other81.f32_array_value;
  f64_array_value = other81.f64_array_value;
  __isset = other81.__isset;
  return *this;
}
void EmbeddingData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EmbeddingData(";
  out << "bool_array_value="; (__isset.bool_array_value ? (out << to_string(bool_array_value)) : (out << "<null>"));
  out << ", " << "i8_array_value="; (__isset.i8_array_value ? (out << to_string(i8_array_value)) : (out << "<null>"));
  out << ", " << "i16_array_value="; (__isset.i16_array_value ? (out << to_string(i16_array_value)) : (out << "<null>"));
  out << ", " << "i32_array_value="; (__isset.i32_array_value ? (out << to_string(i32_array_value)) : (out << "<null>"));
  out << ", " << "i64_array_value="; (__isset.i64_array_value ? (out << to_string(i64_array_value)) : (out << "<null>"));
  out << ", " << "f32_array_value="; (__isset.f32_array_value ? (out << to_string(f32_array_value)) : (out << "<null>"));
  out << ", " << "f64_array_value="; (__isset.f64_array_value ? (out << to_string(f64_array_value)) : (out << "<null>"));
  out << ")";
}


InitParameter::~InitParameter() noexcept {
}


void InitParameter::__set_param_name(const std::string& val) {
  this->param_name = val;
}

void InitParameter::__set_param_value(const std::string& val) {
  this->param_value = val;
}
std::ostream& operator<<(std::ostream& out, const InitParameter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InitParameter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param_name);
          this->__isset.param_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->param_value);
          this->__isset.param_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InitParameter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InitParameter");

  xfer += oprot->writeFieldBegin("param_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->param_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("param_value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->param_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InitParameter &a, InitParameter &b) {
  using ::std::swap;
  swap(a.param_name, b.param_name);
  swap(a.param_value, b.param_value);
  swap(a.__isset, b.__isset);
}

InitParameter::InitParameter(const InitParameter& other82) {
  param_name = other82.param_name;
  param_value = other82.param_value;
  __isset = other82.__isset;
}
InitParameter& InitParameter::operator=(const InitParameter& other83) {
  param_name = other83.param_name;
  param_value = other83.param_value;
  __isset = other83.__isset;
  return *this;
}
void InitParameter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InitParameter(";
  out << "param_name=" << to_string(param_name);
  out << ", " << "param_value=" << to_string(param_value);
  out << ")";
}


ConstantExpr::~ConstantExpr() noexcept {
}


void ConstantExpr::__set_literal_type(const LiteralType::type val) {
  this->literal_type = val;
}

void ConstantExpr::__set_bool_value(const bool val) {
  this->bool_value = val;
__isset.bool_value = true;
}

void ConstantExpr::__set_i64_value(const int64_t val) {
  this->i64_value = val;
__isset.i64_value = true;
}

void ConstantExpr::__set_f64_value(const double val) {
  this->f64_value = val;
__isset.f64_value = true;
}

void ConstantExpr::__set_str_value(const std::string& val) {
  this->str_value = val;
__isset.str_value = true;
}

void ConstantExpr::__set_i64_array_value(const std::vector<int64_t> & val) {
  this->i64_array_value = val;
__isset.i64_array_value = true;
}

void ConstantExpr::__set_f64_array_value(const std::vector<double> & val) {
  this->f64_array_value = val;
__isset.f64_array_value = true;
}

void ConstantExpr::__set_i64_tensor_array_value(const std::vector<std::vector<std::vector<int64_t> > > & val) {
  this->i64_tensor_array_value = val;
__isset.i64_tensor_array_value = true;
}

void ConstantExpr::__set_f64_tensor_array_value(const std::vector<std::vector<std::vector<double> > > & val) {
  this->f64_tensor_array_value = val;
__isset.f64_tensor_array_value = true;
}
std::ostream& operator<<(std::ostream& out, const ConstantExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ConstantExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast84;
          xfer += iprot->readI32(ecast84);
          this->literal_type = static_cast<LiteralType::type>(ecast84);
          this->__isset.literal_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bool_value);
          this->__isset.bool_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->i64_value);
          this->__isset.i64_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->f64_value);
          this->__isset.f64_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str_value);
          this->__isset.str_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i64_array_value.clear();
            uint32_t _size85;
            ::apache::thrift::protocol::TType _etype88;
            xfer += iprot->readListBegin(_etype88, _size85);
            this->i64_array_value.resize(_size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              xfer += iprot->readI64(this->i64_array_value[_i89]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i64_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->f64_array_value.clear();
            uint32_t _size90;
            ::apache::thrift::protocol::TType _etype93;
            xfer += iprot->readListBegin(_etype93, _size90);
            this->f64_array_value.resize(_size90);
            uint32_t _i94;
            for (_i94 = 0; _i94 < _size90; ++_i94)
            {
              xfer += iprot->readDouble(this->f64_array_value[_i94]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.f64_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->i64_tensor_array_value.clear();
            uint32_t _size95;
            ::apache::thrift::protocol::TType _etype98;
            xfer += iprot->readListBegin(_etype98, _size95);
            this->i64_tensor_array_value.resize(_size95);
            uint32_t _i99;
            for (_i99 = 0; _i99 < _size95; ++_i99)
            {
              {
                this->i64_tensor_array_value[_i99].clear();
                uint32_t _size100;
                ::apache::thrift::protocol::TType _etype103;
                xfer += iprot->readListBegin(_etype103, _size100);
                this->i64_tensor_array_value[_i99].resize(_size100);
                uint32_t _i104;
                for (_i104 = 0; _i104 < _size100; ++_i104)
                {
                  {
                    this->i64_tensor_array_value[_i99][_i104].clear();
                    uint32_t _size105;
                    ::apache::thrift::protocol::TType _etype108;
                    xfer += iprot->readListBegin(_etype108, _size105);
                    this->i64_tensor_array_value[_i99][_i104].resize(_size105);
                    uint32_t _i109;
                    for (_i109 = 0; _i109 < _size105; ++_i109)
                    {
                      xfer += iprot->readI64(this->i64_tensor_array_value[_i99][_i104][_i109]);
                    }
                    xfer += iprot->readListEnd();
                  }
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.i64_tensor_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->f64_tensor_array_value.clear();
            uint32_t _size110;
            ::apache::thrift::protocol::TType _etype113;
            xfer += iprot->readListBegin(_etype113, _size110);
            this->f64_tensor_array_value.resize(_size110);
            uint32_t _i114;
            for (_i114 = 0; _i114 < _size110; ++_i114)
            {
              {
                this->f64_tensor_array_value[_i114].clear();
                uint32_t _size115;
                ::apache::thrift::protocol::TType _etype118;
                xfer += iprot->readListBegin(_etype118, _size115);
                this->f64_tensor_array_value[_i114].resize(_size115);
                uint32_t _i119;
                for (_i119 = 0; _i119 < _size115; ++_i119)
                {
                  {
                    this->f64_tensor_array_value[_i114][_i119].clear();
                    uint32_t _size120;
                    ::apache::thrift::protocol::TType _etype123;
                    xfer += iprot->readListBegin(_etype123, _size120);
                    this->f64_tensor_array_value[_i114][_i119].resize(_size120);
                    uint32_t _i124;
                    for (_i124 = 0; _i124 < _size120; ++_i124)
                    {
                      xfer += iprot->readDouble(this->f64_tensor_array_value[_i114][_i119][_i124]);
                    }
                    xfer += iprot->readListEnd();
                  }
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.f64_tensor_array_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConstantExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ConstantExpr");

  xfer += oprot->writeFieldBegin("literal_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->literal_type));
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bool_value) {
    xfer += oprot->writeFieldBegin("bool_value", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->bool_value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i64_value) {
    xfer += oprot->writeFieldBegin("i64_value", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->i64_value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.f64_value) {
    xfer += oprot->writeFieldBegin("f64_value", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->f64_value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.str_value) {
    xfer += oprot->writeFieldBegin("str_value", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->str_value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i64_array_value) {
    xfer += oprot->writeFieldBegin("i64_array_value", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->i64_array_value.size()));
      std::vector<int64_t> ::const_iterator _iter125;
      for (_iter125 = this->i64_array_value.begin(); _iter125 != this->i64_array_value.end(); ++_iter125)
      {
        xfer += oprot->writeI64((*_iter125));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.f64_array_value) {
    xfer += oprot->writeFieldBegin("f64_array_value", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->f64_array_value.size()));
      std::vector<double> ::const_iterator _iter126;
      for (_iter126 = this->f64_array_value.begin(); _iter126 != this->f64_array_value.end(); ++_iter126)
      {
        xfer += oprot->writeDouble((*_iter126));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i64_tensor_array_value) {
    xfer += oprot->writeFieldBegin("i64_tensor_array_value", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->i64_tensor_array_value.size()));
      std::vector<std::vector<std::vector<int64_t> > > ::const_iterator _iter127;
      for (_iter127 = this->i64_tensor_array_value.begin(); _iter127 != this->i64_tensor_array_value.end(); ++_iter127)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*_iter127).size()));
          std::vector<std::vector<int64_t> > ::const_iterator _iter128;
          for (_iter128 = (*_iter127).begin(); _iter128 != (*_iter127).end(); ++_iter128)
          {
            {
              xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter128).size()));
              std::vector<int64_t> ::const_iterator _iter129;
              for (_iter129 = (*_iter128).begin(); _iter129 != (*_iter128).end(); ++_iter129)
              {
                xfer += oprot->writeI64((*_iter129));
              }
              xfer += oprot->writeListEnd();
            }
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.f64_tensor_array_value) {
    xfer += oprot->writeFieldBegin("f64_tensor_array_value", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->f64_tensor_array_value.size()));
      std::vector<std::vector<std::vector<double> > > ::const_iterator _iter130;
      for (_iter130 = this->f64_tensor_array_value.begin(); _iter130 != this->f64_tensor_array_value.end(); ++_iter130)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*_iter130).size()));
          std::vector<std::vector<double> > ::const_iterator _iter131;
          for (_iter131 = (*_iter130).begin(); _iter131 != (*_iter130).end(); ++_iter131)
          {
            {
              xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>((*_iter131).size()));
              std::vector<double> ::const_iterator _iter132;
              for (_iter132 = (*_iter131).begin(); _iter132 != (*_iter131).end(); ++_iter132)
              {
                xfer += oprot->writeDouble((*_iter132));
              }
              xfer += oprot->writeListEnd();
            }
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConstantExpr &a, ConstantExpr &b) {
  using ::std::swap;
  swap(a.literal_type, b.literal_type);
  swap(a.bool_value, b.bool_value);
  swap(a.i64_value, b.i64_value);
  swap(a.f64_value, b.f64_value);
  swap(a.str_value, b.str_value);
  swap(a.i64_array_value, b.i64_array_value);
  swap(a.f64_array_value, b.f64_array_value);
  swap(a.i64_tensor_array_value, b.i64_tensor_array_value);
  swap(a.f64_tensor_array_value, b.f64_tensor_array_value);
  swap(a.__isset, b.__isset);
}

ConstantExpr::ConstantExpr(const ConstantExpr& other133) {
  literal_type = other133.literal_type;
  bool_value = other133.bool_value;
  i64_value = other133.i64_value;
  f64_value = other133.f64_value;
  str_value = other133.str_value;
  i64_array_value = other133.i64_array_value;
  f64_array_value = other133.f64_array_value;
  i64_tensor_array_value = other133.i64_tensor_array_value;
  f64_tensor_array_value = other133.f64_tensor_array_value;
  __isset = other133.__isset;
}
ConstantExpr& ConstantExpr::operator=(const ConstantExpr& other134) {
  literal_type = other134.literal_type;
  bool_value = other134.bool_value;
  i64_value = other134.i64_value;
  f64_value = other134.f64_value;
  str_value = other134.str_value;
  i64_array_value = other134.i64_array_value;
  f64_array_value = other134.f64_array_value;
  i64_tensor_array_value = other134.i64_tensor_array_value;
  f64_tensor_array_value = other134.f64_tensor_array_value;
  __isset = other134.__isset;
  return *this;
}
void ConstantExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ConstantExpr(";
  out << "literal_type=" << to_string(literal_type);
  out << ", " << "bool_value="; (__isset.bool_value ? (out << to_string(bool_value)) : (out << "<null>"));
  out << ", " << "i64_value="; (__isset.i64_value ? (out << to_string(i64_value)) : (out << "<null>"));
  out << ", " << "f64_value="; (__isset.f64_value ? (out << to_string(f64_value)) : (out << "<null>"));
  out << ", " << "str_value="; (__isset.str_value ? (out << to_string(str_value)) : (out << "<null>"));
  out << ", " << "i64_array_value="; (__isset.i64_array_value ? (out << to_string(i64_array_value)) : (out << "<null>"));
  out << ", " << "f64_array_value="; (__isset.f64_array_value ? (out << to_string(f64_array_value)) : (out << "<null>"));
  out << ", " << "i64_tensor_array_value="; (__isset.i64_tensor_array_value ? (out << to_string(i64_tensor_array_value)) : (out << "<null>"));
  out << ", " << "f64_tensor_array_value="; (__isset.f64_tensor_array_value ? (out << to_string(f64_tensor_array_value)) : (out << "<null>"));
  out << ")";
}


KnnExpr::~KnnExpr() noexcept {
}


void KnnExpr::__set_column_expr(const ColumnExpr& val) {
  this->column_expr = val;
}

void KnnExpr::__set_embedding_data(const EmbeddingData& val) {
  this->embedding_data = val;
}

void KnnExpr::__set_embedding_data_type(const ElementType::type val) {
  this->embedding_data_type = val;
}

void KnnExpr::__set_distance_type(const KnnDistanceType::type val) {
  this->distance_type = val;
}

void KnnExpr::__set_topn(const int64_t val) {
  this->topn = val;
}

void KnnExpr::__set_opt_params(const std::vector<InitParameter> & val) {
  this->opt_params = val;
}
std::ostream& operator<<(std::ostream& out, const KnnExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t KnnExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->column_expr.read(iprot);
          this->__isset.column_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->embedding_data.read(iprot);
          this->__isset.embedding_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast135;
          xfer += iprot->readI32(ecast135);
          this->embedding_data_type = static_cast<ElementType::type>(ecast135);
          this->__isset.embedding_data_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast136;
          xfer += iprot->readI32(ecast136);
          this->distance_type = static_cast<KnnDistanceType::type>(ecast136);
          this->__isset.distance_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->topn);
          this->__isset.topn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->opt_params.clear();
            uint32_t _size137;
            ::apache::thrift::protocol::TType _etype140;
            xfer += iprot->readListBegin(_etype140, _size137);
            this->opt_params.resize(_size137);
            uint32_t _i141;
            for (_i141 = 0; _i141 < _size137; ++_i141)
            {
              xfer += this->opt_params[_i141].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.opt_params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t KnnExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("KnnExpr");

  xfer += oprot->writeFieldBegin("column_expr", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->column_expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("embedding_data", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->embedding_data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("embedding_data_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(static_cast<int32_t>(this->embedding_data_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("distance_type", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(static_cast<int32_t>(this->distance_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topn", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->topn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("opt_params", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->opt_params.size()));
    std::vector<InitParameter> ::const_iterator _iter142;
    for (_iter142 = this->opt_params.begin(); _iter142 != this->opt_params.end(); ++_iter142)
    {
      xfer += (*_iter142).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(KnnExpr &a, KnnExpr &b) {
  using ::std::swap;
  swap(a.column_expr, b.column_expr);
  swap(a.embedding_data, b.embedding_data);
  swap(a.embedding_data_type, b.embedding_data_type);
  swap(a.distance_type, b.distance_type);
  swap(a.topn, b.topn);
  swap(a.opt_params, b.opt_params);
  swap(a.__isset, b.__isset);
}

KnnExpr::KnnExpr(const KnnExpr& other143) {
  column_expr = other143.column_expr;
  embedding_data = other143.embedding_data;
  embedding_data_type = other143.embedding_data_type;
  distance_type = other143.distance_type;
  topn = other143.topn;
  opt_params = other143.opt_params;
  __isset = other143.__isset;
}
KnnExpr& KnnExpr::operator=(const KnnExpr& other144) {
  column_expr = other144.column_expr;
  embedding_data = other144.embedding_data;
  embedding_data_type = other144.embedding_data_type;
  distance_type = other144.distance_type;
  topn = other144.topn;
  opt_params = other144.opt_params;
  __isset = other144.__isset;
  return *this;
}
void KnnExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "KnnExpr(";
  out << "column_expr=" << to_string(column_expr);
  out << ", " << "embedding_data=" << to_string(embedding_data);
  out << ", " << "embedding_data_type=" << to_string(embedding_data_type);
  out << ", " << "distance_type=" << to_string(distance_type);
  out << ", " << "topn=" << to_string(topn);
  out << ", " << "opt_params=" << to_string(opt_params);
  out << ")";
}


MatchTensorExpr::~MatchTensorExpr() noexcept {
}


void MatchTensorExpr::__set_search_method(const std::string& val) {
  this->search_method = val;
}

void MatchTensorExpr::__set_column_expr(const ColumnExpr& val) {
  this->column_expr = val;
}

void MatchTensorExpr::__set_embedding_data_type(const ElementType::type val) {
  this->embedding_data_type = val;
}

void MatchTensorExpr::__set_embedding_data(const EmbeddingData& val) {
  this->embedding_data = val;
}

void MatchTensorExpr::__set_extra_options(const std::string& val) {
  this->extra_options = val;
}
std::ostream& operator<<(std::ostream& out, const MatchTensorExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MatchTensorExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->search_method);
          this->__isset.search_method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->column_expr.read(iprot);
          this->__isset.column_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast145;
          xfer += iprot->readI32(ecast145);
          this->embedding_data_type = static_cast<ElementType::type>(ecast145);
          this->__isset.embedding_data_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->embedding_data.read(iprot);
          this->__isset.embedding_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extra_options);
          this->__isset.extra_options = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MatchTensorExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MatchTensorExpr");

  xfer += oprot->writeFieldBegin("search_method", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->search_method);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_expr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->column_expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("embedding_data_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(static_cast<int32_t>(this->embedding_data_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("embedding_data", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->embedding_data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra_options", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->extra_options);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MatchTensorExpr &a, MatchTensorExpr &b) {
  using ::std::swap;
  swap(a.search_method, b.search_method);
  swap(a.column_expr, b.column_expr);
  swap(a.embedding_data_type, b.embedding_data_type);
  swap(a.embedding_data, b.embedding_data);
  swap(a.extra_options, b.extra_options);
  swap(a.__isset, b.__isset);
}

MatchTensorExpr::MatchTensorExpr(const MatchTensorExpr& other146) {
  search_method = other146.search_method;
  column_expr = other146.column_expr;
  embedding_data_type = other146.embedding_data_type;
  embedding_data = other146.embedding_data;
  extra_options = other146.extra_options;
  __isset = other146.__isset;
}
MatchTensorExpr& MatchTensorExpr::operator=(const MatchTensorExpr& other147) {
  search_method = other147.search_method;
  column_expr = other147.column_expr;
  embedding_data_type = other147.embedding_data_type;
  embedding_data = other147.embedding_data;
  extra_options = other147.extra_options;
  __isset = other147.__isset;
  return *this;
}
void MatchTensorExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MatchTensorExpr(";
  out << "search_method=" << to_string(search_method);
  out << ", " << "column_expr=" << to_string(column_expr);
  out << ", " << "embedding_data_type=" << to_string(embedding_data_type);
  out << ", " << "embedding_data=" << to_string(embedding_data);
  out << ", " << "extra_options=" << to_string(extra_options);
  out << ")";
}


MatchExpr::~MatchExpr() noexcept {
}


void MatchExpr::__set_fields(const std::string& val) {
  this->fields = val;
}

void MatchExpr::__set_matching_text(const std::string& val) {
  this->matching_text = val;
}

void MatchExpr::__set_options_text(const std::string& val) {
  this->options_text = val;
}
std::ostream& operator<<(std::ostream& out, const MatchExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MatchExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fields);
          this->__isset.fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->matching_text);
          this->__isset.matching_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->options_text);
          this->__isset.options_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MatchExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MatchExpr");

  xfer += oprot->writeFieldBegin("fields", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->fields);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("matching_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->matching_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("options_text", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->options_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MatchExpr &a, MatchExpr &b) {
  using ::std::swap;
  swap(a.fields, b.fields);
  swap(a.matching_text, b.matching_text);
  swap(a.options_text, b.options_text);
  swap(a.__isset, b.__isset);
}

MatchExpr::MatchExpr(const MatchExpr& other148) {
  fields = other148.fields;
  matching_text = other148.matching_text;
  options_text = other148.options_text;
  __isset = other148.__isset;
}
MatchExpr& MatchExpr::operator=(const MatchExpr& other149) {
  fields = other149.fields;
  matching_text = other149.matching_text;
  options_text = other149.options_text;
  __isset = other149.__isset;
  return *this;
}
void MatchExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MatchExpr(";
  out << "fields=" << to_string(fields);
  out << ", " << "matching_text=" << to_string(matching_text);
  out << ", " << "options_text=" << to_string(options_text);
  out << ")";
}


FusionExpr::~FusionExpr() noexcept {
}


void FusionExpr::__set_method(const std::string& val) {
  this->method = val;
}

void FusionExpr::__set_options_text(const std::string& val) {
  this->options_text = val;
}

void FusionExpr::__set_optional_match_tensor_expr(const MatchTensorExpr& val) {
  this->optional_match_tensor_expr = val;
__isset.optional_match_tensor_expr = true;
}
std::ostream& operator<<(std::ostream& out, const FusionExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FusionExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->method);
          this->__isset.method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->options_text);
          this->__isset.options_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->optional_match_tensor_expr.read(iprot);
          this->__isset.optional_match_tensor_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FusionExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FusionExpr");

  xfer += oprot->writeFieldBegin("method", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->method);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("options_text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->options_text);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.optional_match_tensor_expr) {
    xfer += oprot->writeFieldBegin("optional_match_tensor_expr", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->optional_match_tensor_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FusionExpr &a, FusionExpr &b) {
  using ::std::swap;
  swap(a.method, b.method);
  swap(a.options_text, b.options_text);
  swap(a.optional_match_tensor_expr, b.optional_match_tensor_expr);
  swap(a.__isset, b.__isset);
}

FusionExpr::FusionExpr(const FusionExpr& other150) {
  method = other150.method;
  options_text = other150.options_text;
  optional_match_tensor_expr = other150.optional_match_tensor_expr;
  __isset = other150.__isset;
}
FusionExpr& FusionExpr::operator=(const FusionExpr& other151) {
  method = other151.method;
  options_text = other151.options_text;
  optional_match_tensor_expr = other151.optional_match_tensor_expr;
  __isset = other151.__isset;
  return *this;
}
void FusionExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FusionExpr(";
  out << "method=" << to_string(method);
  out << ", " << "options_text=" << to_string(options_text);
  out << ", " << "optional_match_tensor_expr="; (__isset.optional_match_tensor_expr ? (out << to_string(optional_match_tensor_expr)) : (out << "<null>"));
  out << ")";
}


SearchExpr::~SearchExpr() noexcept {
}


void SearchExpr::__set_match_exprs(const std::vector<MatchExpr> & val) {
  this->match_exprs = val;
__isset.match_exprs = true;
}

void SearchExpr::__set_knn_exprs(const std::vector<KnnExpr> & val) {
  this->knn_exprs = val;
__isset.knn_exprs = true;
}

void SearchExpr::__set_match_tensor_exprs(const std::vector<MatchTensorExpr> & val) {
  this->match_tensor_exprs = val;
__isset.match_tensor_exprs = true;
}

void SearchExpr::__set_fusion_exprs(const std::vector<FusionExpr> & val) {
  this->fusion_exprs = val;
__isset.fusion_exprs = true;
}
std::ostream& operator<<(std::ostream& out, const SearchExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SearchExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->match_exprs.clear();
            uint32_t _size152;
            ::apache::thrift::protocol::TType _etype155;
            xfer += iprot->readListBegin(_etype155, _size152);
            this->match_exprs.resize(_size152);
            uint32_t _i156;
            for (_i156 = 0; _i156 < _size152; ++_i156)
            {
              xfer += this->match_exprs[_i156].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.match_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->knn_exprs.clear();
            uint32_t _size157;
            ::apache::thrift::protocol::TType _etype160;
            xfer += iprot->readListBegin(_etype160, _size157);
            this->knn_exprs.resize(_size157);
            uint32_t _i161;
            for (_i161 = 0; _i161 < _size157; ++_i161)
            {
              xfer += this->knn_exprs[_i161].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.knn_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->match_tensor_exprs.clear();
            uint32_t _size162;
            ::apache::thrift::protocol::TType _etype165;
            xfer += iprot->readListBegin(_etype165, _size162);
            this->match_tensor_exprs.resize(_size162);
            uint32_t _i166;
            for (_i166 = 0; _i166 < _size162; ++_i166)
            {
              xfer += this->match_tensor_exprs[_i166].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.match_tensor_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fusion_exprs.clear();
            uint32_t _size167;
            ::apache::thrift::protocol::TType _etype170;
            xfer += iprot->readListBegin(_etype170, _size167);
            this->fusion_exprs.resize(_size167);
            uint32_t _i171;
            for (_i171 = 0; _i171 < _size167; ++_i171)
            {
              xfer += this->fusion_exprs[_i171].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.fusion_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SearchExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SearchExpr");

  if (this->__isset.match_exprs) {
    xfer += oprot->writeFieldBegin("match_exprs", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->match_exprs.size()));
      std::vector<MatchExpr> ::const_iterator _iter172;
      for (_iter172 = this->match_exprs.begin(); _iter172 != this->match_exprs.end(); ++_iter172)
      {
        xfer += (*_iter172).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.knn_exprs) {
    xfer += oprot->writeFieldBegin("knn_exprs", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->knn_exprs.size()));
      std::vector<KnnExpr> ::const_iterator _iter173;
      for (_iter173 = this->knn_exprs.begin(); _iter173 != this->knn_exprs.end(); ++_iter173)
      {
        xfer += (*_iter173).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.match_tensor_exprs) {
    xfer += oprot->writeFieldBegin("match_tensor_exprs", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->match_tensor_exprs.size()));
      std::vector<MatchTensorExpr> ::const_iterator _iter174;
      for (_iter174 = this->match_tensor_exprs.begin(); _iter174 != this->match_tensor_exprs.end(); ++_iter174)
      {
        xfer += (*_iter174).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fusion_exprs) {
    xfer += oprot->writeFieldBegin("fusion_exprs", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fusion_exprs.size()));
      std::vector<FusionExpr> ::const_iterator _iter175;
      for (_iter175 = this->fusion_exprs.begin(); _iter175 != this->fusion_exprs.end(); ++_iter175)
      {
        xfer += (*_iter175).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SearchExpr &a, SearchExpr &b) {
  using ::std::swap;
  swap(a.match_exprs, b.match_exprs);
  swap(a.knn_exprs, b.knn_exprs);
  swap(a.match_tensor_exprs, b.match_tensor_exprs);
  swap(a.fusion_exprs, b.fusion_exprs);
  swap(a.__isset, b.__isset);
}

SearchExpr::SearchExpr(const SearchExpr& other176) {
  match_exprs = other176.match_exprs;
  knn_exprs = other176.knn_exprs;
  match_tensor_exprs = other176.match_tensor_exprs;
  fusion_exprs = other176.fusion_exprs;
  __isset = other176.__isset;
}
SearchExpr& SearchExpr::operator=(const SearchExpr& other177) {
  match_exprs = other177.match_exprs;
  knn_exprs = other177.knn_exprs;
  match_tensor_exprs = other177.match_tensor_exprs;
  fusion_exprs = other177.fusion_exprs;
  __isset = other177.__isset;
  return *this;
}
void SearchExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SearchExpr(";
  out << "match_exprs="; (__isset.match_exprs ? (out << to_string(match_exprs)) : (out << "<null>"));
  out << ", " << "knn_exprs="; (__isset.knn_exprs ? (out << to_string(knn_exprs)) : (out << "<null>"));
  out << ", " << "match_tensor_exprs="; (__isset.match_tensor_exprs ? (out << to_string(match_tensor_exprs)) : (out << "<null>"));
  out << ", " << "fusion_exprs="; (__isset.fusion_exprs ? (out << to_string(fusion_exprs)) : (out << "<null>"));
  out << ")";
}


FunctionExpr::~FunctionExpr() noexcept {
}


void FunctionExpr::__set_function_name(const std::string& val) {
  this->function_name = val;
}

void FunctionExpr::__set_arguments(const std::vector<ParsedExpr> & val) {
  this->arguments = val;
}
std::ostream& operator<<(std::ostream& out, const FunctionExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FunctionExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->function_name);
          this->__isset.function_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->arguments.clear();
            uint32_t _size178;
            ::apache::thrift::protocol::TType _etype181;
            xfer += iprot->readListBegin(_etype181, _size178);
            this->arguments.resize(_size178);
            uint32_t _i182;
            for (_i182 = 0; _i182 < _size178; ++_i182)
            {
              xfer += this->arguments[_i182].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.arguments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FunctionExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FunctionExpr");

  xfer += oprot->writeFieldBegin("function_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->function_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->arguments.size()));
    std::vector<ParsedExpr> ::const_iterator _iter183;
    for (_iter183 = this->arguments.begin(); _iter183 != this->arguments.end(); ++_iter183)
    {
      xfer += (*_iter183).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FunctionExpr &a, FunctionExpr &b) {
  using ::std::swap;
  swap(a.function_name, b.function_name);
  swap(a.arguments, b.arguments);
  swap(a.__isset, b.__isset);
}

FunctionExpr::FunctionExpr(const FunctionExpr& other184) {
  function_name = other184.function_name;
  arguments = other184.arguments;
  __isset = other184.__isset;
}
FunctionExpr& FunctionExpr::operator=(const FunctionExpr& other185) {
  function_name = other185.function_name;
  arguments = other185.arguments;
  __isset = other185.__isset;
  return *this;
}
void FunctionExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FunctionExpr(";
  out << "function_name=" << to_string(function_name);
  out << ", " << "arguments=" << to_string(arguments);
  out << ")";
}


BetweenExpr::~BetweenExpr() noexcept {
}


void BetweenExpr::__set_value(const ParsedExpr& val) {
  this->value = val;
}

void BetweenExpr::__set_upper_bound(const ParsedExpr& val) {
  this->upper_bound = val;
}

void BetweenExpr::__set_lower_bound(const ParsedExpr& val) {
  this->lower_bound = val;
}
std::ostream& operator<<(std::ostream& out, const BetweenExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BetweenExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->upper_bound.read(iprot);
          this->__isset.upper_bound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lower_bound.read(iprot);
          this->__isset.lower_bound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BetweenExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BetweenExpr");

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("upper_bound", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->upper_bound.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lower_bound", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->lower_bound.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BetweenExpr &a, BetweenExpr &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.upper_bound, b.upper_bound);
  swap(a.lower_bound, b.lower_bound);
  swap(a.__isset, b.__isset);
}

BetweenExpr::BetweenExpr(const BetweenExpr& other186) {
  value = other186.value;
  upper_bound = other186.upper_bound;
  lower_bound = other186.lower_bound;
  __isset = other186.__isset;
}
BetweenExpr& BetweenExpr::operator=(const BetweenExpr& other187) {
  value = other187.value;
  upper_bound = other187.upper_bound;
  lower_bound = other187.lower_bound;
  __isset = other187.__isset;
  return *this;
}
void BetweenExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BetweenExpr(";
  out << "value=" << to_string(value);
  out << ", " << "upper_bound=" << to_string(upper_bound);
  out << ", " << "lower_bound=" << to_string(lower_bound);
  out << ")";
}


UpdateExpr::~UpdateExpr() noexcept {
}


void UpdateExpr::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void UpdateExpr::__set_value(const ParsedExpr& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateExpr");

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateExpr &a, UpdateExpr &b) {
  using ::std::swap;
  swap(a.column_name, b.column_name);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

UpdateExpr::UpdateExpr(const UpdateExpr& other188) {
  column_name = other188.column_name;
  value = other188.value;
  __isset = other188.__isset;
}
UpdateExpr& UpdateExpr::operator=(const UpdateExpr& other189) {
  column_name = other189.column_name;
  value = other189.value;
  __isset = other189.__isset;
  return *this;
}
void UpdateExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateExpr(";
  out << "column_name=" << to_string(column_name);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


OrderByExpr::~OrderByExpr() noexcept {
}


void OrderByExpr::__set_expr(const ParsedExpr& val) {
  this->expr = val;
}

void OrderByExpr::__set_asc(const bool val) {
  this->asc = val;
}
std::ostream& operator<<(std::ostream& out, const OrderByExpr& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t OrderByExpr::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->expr.read(iprot);
          this->__isset.expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->asc);
          this->__isset.asc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OrderByExpr::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OrderByExpr");

  xfer += oprot->writeFieldBegin("expr", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("asc", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->asc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OrderByExpr &a, OrderByExpr &b) {
  using ::std::swap;
  swap(a.expr, b.expr);
  swap(a.asc, b.asc);
  swap(a.__isset, b.__isset);
}

OrderByExpr::OrderByExpr(const OrderByExpr& other190) {
  expr = other190.expr;
  asc = other190.asc;
  __isset = other190.__isset;
}
OrderByExpr& OrderByExpr::operator=(const OrderByExpr& other191) {
  expr = other191.expr;
  asc = other191.asc;
  __isset = other191.__isset;
  return *this;
}
void OrderByExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OrderByExpr(";
  out << "expr=" << to_string(expr);
  out << ", " << "asc=" << to_string(asc);
  out << ")";
}


ColumnDef::~ColumnDef() noexcept {
}


void ColumnDef::__set_id(const int32_t val) {
  this->id = val;
}

void ColumnDef::__set_name(const std::string& val) {
  this->name = val;
}

void ColumnDef::__set_data_type(const DataType& val) {
  this->data_type = val;
}

void ColumnDef::__set_constraints(const std::vector<Constraint::type> & val) {
  this->constraints = val;
}

void ColumnDef::__set_constant_expr(const ConstantExpr& val) {
  this->constant_expr = val;
}
std::ostream& operator<<(std::ostream& out, const ColumnDef& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ColumnDef::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data_type.read(iprot);
          this->__isset.data_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->constraints.clear();
            uint32_t _size192;
            ::apache::thrift::protocol::TType _etype195;
            xfer += iprot->readListBegin(_etype195, _size192);
            this->constraints.resize(_size192);
            uint32_t _i196;
            for (_i196 = 0; _i196 < _size192; ++_i196)
            {
              int32_t ecast197;
              xfer += iprot->readI32(ecast197);
              this->constraints[_i196] = static_cast<Constraint::type>(ecast197);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.constraints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->constant_expr.read(iprot);
          this->__isset.constant_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ColumnDef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnDef");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_type", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->data_type.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("constraints", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->constraints.size()));
    std::vector<Constraint::type> ::const_iterator _iter198;
    for (_iter198 = this->constraints.begin(); _iter198 != this->constraints.end(); ++_iter198)
    {
      xfer += oprot->writeI32(static_cast<int32_t>((*_iter198)));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("constant_expr", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->constant_expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnDef &a, ColumnDef &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.data_type, b.data_type);
  swap(a.constraints, b.constraints);
  swap(a.constant_expr, b.constant_expr);
  swap(a.__isset, b.__isset);
}

ColumnDef::ColumnDef(const ColumnDef& other199) {
  id = other199.id;
  name = other199.name;
  data_type = other199.data_type;
  constraints = other199.constraints;
  constant_expr = other199.constant_expr;
  __isset = other199.__isset;
}
ColumnDef& ColumnDef::operator=(const ColumnDef& other200) {
  id = other200.id;
  name = other200.name;
  data_type = other200.data_type;
  constraints = other200.constraints;
  constant_expr = other200.constant_expr;
  __isset = other200.__isset;
  return *this;
}
void ColumnDef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnDef(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "data_type=" << to_string(data_type);
  out << ", " << "constraints=" << to_string(constraints);
  out << ", " << "constant_expr=" << to_string(constant_expr);
  out << ")";
}


Field::~Field() noexcept {
}


void Field::__set_parse_exprs(const std::vector<ParsedExpr> & val) {
  this->parse_exprs = val;
}
std::ostream& operator<<(std::ostream& out, const Field& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Field::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->parse_exprs.clear();
            uint32_t _size201;
            ::apache::thrift::protocol::TType _etype204;
            xfer += iprot->readListBegin(_etype204, _size201);
            this->parse_exprs.resize(_size201);
            uint32_t _i205;
            for (_i205 = 0; _i205 < _size201; ++_i205)
            {
              xfer += this->parse_exprs[_i205].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.parse_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Field::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Field");

  xfer += oprot->writeFieldBegin("parse_exprs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->parse_exprs.size()));
    std::vector<ParsedExpr> ::const_iterator _iter206;
    for (_iter206 = this->parse_exprs.begin(); _iter206 != this->parse_exprs.end(); ++_iter206)
    {
      xfer += (*_iter206).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Field &a, Field &b) {
  using ::std::swap;
  swap(a.parse_exprs, b.parse_exprs);
  swap(a.__isset, b.__isset);
}

Field::Field(const Field& other207) {
  parse_exprs = other207.parse_exprs;
  __isset = other207.__isset;
}
Field& Field::operator=(const Field& other208) {
  parse_exprs = other208.parse_exprs;
  __isset = other208.__isset;
  return *this;
}
void Field::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Field(";
  out << "parse_exprs=" << to_string(parse_exprs);
  out << ")";
}


ColumnField::~ColumnField() noexcept {
}


void ColumnField::__set_column_type(const ColumnType::type val) {
  this->column_type = val;
}

void ColumnField::__set_column_vectors(const std::vector<std::string> & val) {
  this->column_vectors = val;
}

void ColumnField::__set_column_name(const std::string& val) {
  this->column_name = val;
}
std::ostream& operator<<(std::ostream& out, const ColumnField& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ColumnField::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast209;
          xfer += iprot->readI32(ecast209);
          this->column_type = static_cast<ColumnType::type>(ecast209);
          this->__isset.column_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_vectors.clear();
            uint32_t _size210;
            ::apache::thrift::protocol::TType _etype213;
            xfer += iprot->readListBegin(_etype213, _size210);
            this->column_vectors.resize(_size210);
            uint32_t _i214;
            for (_i214 = 0; _i214 < _size210; ++_i214)
            {
              xfer += iprot->readBinary(this->column_vectors[_i214]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_vectors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ColumnField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ColumnField");

  xfer += oprot->writeFieldBegin("column_type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->column_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_vectors", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_vectors.size()));
    std::vector<std::string> ::const_iterator _iter215;
    for (_iter215 = this->column_vectors.begin(); _iter215 != this->column_vectors.end(); ++_iter215)
    {
      xfer += oprot->writeBinary((*_iter215));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ColumnField &a, ColumnField &b) {
  using ::std::swap;
  swap(a.column_type, b.column_type);
  swap(a.column_vectors, b.column_vectors);
  swap(a.column_name, b.column_name);
  swap(a.__isset, b.__isset);
}

ColumnField::ColumnField(const ColumnField& other216) {
  column_type = other216.column_type;
  column_vectors = other216.column_vectors;
  column_name = other216.column_name;
  __isset = other216.__isset;
}
ColumnField& ColumnField::operator=(const ColumnField& other217) {
  column_type = other217.column_type;
  column_vectors = other217.column_vectors;
  column_name = other217.column_name;
  __isset = other217.__isset;
  return *this;
}
void ColumnField::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnField(";
  out << "column_type=" << to_string(column_type);
  out << ", " << "column_vectors=" << to_string(column_vectors);
  out << ", " << "column_name=" << to_string(column_name);
  out << ")";
}


ImportOption::~ImportOption() noexcept {
}


void ImportOption::__set_delimiter(const std::string& val) {
  this->delimiter = val;
}

void ImportOption::__set_has_header(const bool val) {
  this->has_header = val;
}

void ImportOption::__set_copy_file_type(const CopyFileType::type val) {
  this->copy_file_type = val;
}
std::ostream& operator<<(std::ostream& out, const ImportOption& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ImportOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->delimiter);
          this->__isset.delimiter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_header);
          this->__isset.has_header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast218;
          xfer += iprot->readI32(ecast218);
          this->copy_file_type = static_cast<CopyFileType::type>(ecast218);
          this->__isset.copy_file_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ImportOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ImportOption");

  xfer += oprot->writeFieldBegin("delimiter", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->delimiter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_header", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_header);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("copy_file_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(static_cast<int32_t>(this->copy_file_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ImportOption &a, ImportOption &b) {
  using ::std::swap;
  swap(a.delimiter, b.delimiter);
  swap(a.has_header, b.has_header);
  swap(a.copy_file_type, b.copy_file_type);
  swap(a.__isset, b.__isset);
}

ImportOption::ImportOption(const ImportOption& other219) {
  delimiter = other219.delimiter;
  has_header = other219.has_header;
  copy_file_type = other219.copy_file_type;
  __isset = other219.__isset;
}
ImportOption& ImportOption::operator=(const ImportOption& other220) {
  delimiter = other220.delimiter;
  has_header = other220.has_header;
  copy_file_type = other220.copy_file_type;
  __isset = other220.__isset;
  return *this;
}
void ImportOption::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ImportOption(";
  out << "delimiter=" << to_string(delimiter);
  out << ", " << "has_header=" << to_string(has_header);
  out << ", " << "copy_file_type=" << to_string(copy_file_type);
  out << ")";
}


ExportOption::~ExportOption() noexcept {
}


void ExportOption::__set_delimiter(const std::string& val) {
  this->delimiter = val;
}

void ExportOption::__set_has_header(const bool val) {
  this->has_header = val;
}

void ExportOption::__set_copy_file_type(const CopyFileType::type val) {
  this->copy_file_type = val;
}
std::ostream& operator<<(std::ostream& out, const ExportOption& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExportOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->delimiter);
          this->__isset.delimiter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->has_header);
          this->__isset.has_header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast221;
          xfer += iprot->readI32(ecast221);
          this->copy_file_type = static_cast<CopyFileType::type>(ecast221);
          this->__isset.copy_file_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExportOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExportOption");

  xfer += oprot->writeFieldBegin("delimiter", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->delimiter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_header", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->has_header);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("copy_file_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(static_cast<int32_t>(this->copy_file_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExportOption &a, ExportOption &b) {
  using ::std::swap;
  swap(a.delimiter, b.delimiter);
  swap(a.has_header, b.has_header);
  swap(a.copy_file_type, b.copy_file_type);
  swap(a.__isset, b.__isset);
}

ExportOption::ExportOption(const ExportOption& other222) {
  delimiter = other222.delimiter;
  has_header = other222.has_header;
  copy_file_type = other222.copy_file_type;
  __isset = other222.__isset;
}
ExportOption& ExportOption::operator=(const ExportOption& other223) {
  delimiter = other223.delimiter;
  has_header = other223.has_header;
  copy_file_type = other223.copy_file_type;
  __isset = other223.__isset;
  return *this;
}
void ExportOption::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExportOption(";
  out << "delimiter=" << to_string(delimiter);
  out << ", " << "has_header=" << to_string(has_header);
  out << ", " << "copy_file_type=" << to_string(copy_file_type);
  out << ")";
}


ConnectRequest::~ConnectRequest() noexcept {
}


void ConnectRequest::__set_client_version(const int64_t val) {
  this->client_version = val;
}
std::ostream& operator<<(std::ostream& out, const ConnectRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ConnectRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->client_version);
          this->__isset.client_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConnectRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ConnectRequest");

  xfer += oprot->writeFieldBegin("client_version", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->client_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConnectRequest &a, ConnectRequest &b) {
  using ::std::swap;
  swap(a.client_version, b.client_version);
  swap(a.__isset, b.__isset);
}

ConnectRequest::ConnectRequest(const ConnectRequest& other224) noexcept {
  client_version = other224.client_version;
  __isset = other224.__isset;
}
ConnectRequest& ConnectRequest::operator=(const ConnectRequest& other225) noexcept {
  client_version = other225.client_version;
  __isset = other225.__isset;
  return *this;
}
void ConnectRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ConnectRequest(";
  out << "client_version=" << to_string(client_version);
  out << ")";
}


CommonRequest::~CommonRequest() noexcept {
}


void CommonRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const CommonRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CommonRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommonRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommonRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommonRequest &a, CommonRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

CommonRequest::CommonRequest(const CommonRequest& other226) noexcept {
  session_id = other226.session_id;
  __isset = other226.__isset;
}
CommonRequest& CommonRequest::operator=(const CommonRequest& other227) noexcept {
  session_id = other227.session_id;
  __isset = other227.__isset;
  return *this;
}
void CommonRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommonRequest(";
  out << "session_id=" << to_string(session_id);
  out << ")";
}


CommonResponse::~CommonResponse() noexcept {
}


void CommonResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void CommonResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void CommonResponse::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const CommonResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CommonResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommonResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CommonResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommonResponse &a, CommonResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

CommonResponse::CommonResponse(const CommonResponse& other228) {
  error_code = other228.error_code;
  error_msg = other228.error_msg;
  session_id = other228.session_id;
  __isset = other228.__isset;
}
CommonResponse& CommonResponse::operator=(const CommonResponse& other229) {
  error_code = other229.error_code;
  error_msg = other229.error_msg;
  session_id = other229.session_id;
  __isset = other229.__isset;
  return *this;
}
void CommonResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommonResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ListDatabaseRequest::~ListDatabaseRequest() noexcept {
}


void ListDatabaseRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ListDatabaseRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ListDatabaseRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListDatabaseRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListDatabaseRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListDatabaseRequest &a, ListDatabaseRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ListDatabaseRequest::ListDatabaseRequest(const ListDatabaseRequest& other230) noexcept {
  session_id = other230.session_id;
  __isset = other230.__isset;
}
ListDatabaseRequest& ListDatabaseRequest::operator=(const ListDatabaseRequest& other231) noexcept {
  session_id = other231.session_id;
  __isset = other231.__isset;
  return *this;
}
void ListDatabaseRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListDatabaseRequest(";
  out << "session_id=" << to_string(session_id);
  out << ")";
}


ListDatabaseResponse::~ListDatabaseResponse() noexcept {
}


void ListDatabaseResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ListDatabaseResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ListDatabaseResponse::__set_db_names(const std::vector<std::string> & val) {
  this->db_names = val;
}
std::ostream& operator<<(std::ostream& out, const ListDatabaseResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ListDatabaseResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->db_names.clear();
            uint32_t _size232;
            ::apache::thrift::protocol::TType _etype235;
            xfer += iprot->readListBegin(_etype235, _size232);
            this->db_names.resize(_size232);
            uint32_t _i236;
            for (_i236 = 0; _i236 < _size232; ++_i236)
            {
              xfer += iprot->readString(this->db_names[_i236]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.db_names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListDatabaseResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListDatabaseResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_names", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->db_names.size()));
    std::vector<std::string> ::const_iterator _iter237;
    for (_iter237 = this->db_names.begin(); _iter237 != this->db_names.end(); ++_iter237)
    {
      xfer += oprot->writeString((*_iter237));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListDatabaseResponse &a, ListDatabaseResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.db_names, b.db_names);
  swap(a.__isset, b.__isset);
}

ListDatabaseResponse::ListDatabaseResponse(const ListDatabaseResponse& other238) {
  error_code = other238.error_code;
  error_msg = other238.error_msg;
  db_names = other238.db_names;
  __isset = other238.__isset;
}
ListDatabaseResponse& ListDatabaseResponse::operator=(const ListDatabaseResponse& other239) {
  error_code = other239.error_code;
  error_msg = other239.error_msg;
  db_names = other239.db_names;
  __isset = other239.__isset;
  return *this;
}
void ListDatabaseResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListDatabaseResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "db_names=" << to_string(db_names);
  out << ")";
}


ListTableRequest::~ListTableRequest() noexcept {
}


void ListTableRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ListTableRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ListTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ListTableRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListTableRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListTableRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListTableRequest &a, ListTableRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ListTableRequest::ListTableRequest(const ListTableRequest& other240) {
  db_name = other240.db_name;
  session_id = other240.session_id;
  __isset = other240.__isset;
}
ListTableRequest& ListTableRequest::operator=(const ListTableRequest& other241) {
  db_name = other241.db_name;
  session_id = other241.session_id;
  __isset = other241.__isset;
  return *this;
}
void ListTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListTableRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ListTableResponse::~ListTableResponse() noexcept {
}


void ListTableResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ListTableResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ListTableResponse::__set_table_names(const std::vector<std::string> & val) {
  this->table_names = val;
}
std::ostream& operator<<(std::ostream& out, const ListTableResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ListTableResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->table_names.clear();
            uint32_t _size242;
            ::apache::thrift::protocol::TType _etype245;
            xfer += iprot->readListBegin(_etype245, _size242);
            this->table_names.resize(_size242);
            uint32_t _i246;
            for (_i246 = 0; _i246 < _size242; ++_i246)
            {
              xfer += iprot->readString(this->table_names[_i246]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.table_names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListTableResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListTableResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_names", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->table_names.size()));
    std::vector<std::string> ::const_iterator _iter247;
    for (_iter247 = this->table_names.begin(); _iter247 != this->table_names.end(); ++_iter247)
    {
      xfer += oprot->writeString((*_iter247));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListTableResponse &a, ListTableResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.table_names, b.table_names);
  swap(a.__isset, b.__isset);
}

ListTableResponse::ListTableResponse(const ListTableResponse& other248) {
  error_code = other248.error_code;
  error_msg = other248.error_msg;
  table_names = other248.table_names;
  __isset = other248.__isset;
}
ListTableResponse& ListTableResponse::operator=(const ListTableResponse& other249) {
  error_code = other249.error_code;
  error_msg = other249.error_msg;
  table_names = other249.table_names;
  __isset = other249.__isset;
  return *this;
}
void ListTableResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListTableResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "table_names=" << to_string(table_names);
  out << ")";
}


ListIndexRequest::~ListIndexRequest() noexcept {
}


void ListIndexRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ListIndexRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ListIndexRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ListIndexRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ListIndexRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListIndexRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListIndexRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListIndexRequest &a, ListIndexRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ListIndexRequest::ListIndexRequest(const ListIndexRequest& other250) {
  db_name = other250.db_name;
  table_name = other250.table_name;
  session_id = other250.session_id;
  __isset = other250.__isset;
}
ListIndexRequest& ListIndexRequest::operator=(const ListIndexRequest& other251) {
  db_name = other251.db_name;
  table_name = other251.table_name;
  session_id = other251.session_id;
  __isset = other251.__isset;
  return *this;
}
void ListIndexRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListIndexRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ListIndexResponse::~ListIndexResponse() noexcept {
}


void ListIndexResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ListIndexResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ListIndexResponse::__set_index_names(const std::vector<std::string> & val) {
  this->index_names = val;
}
std::ostream& operator<<(std::ostream& out, const ListIndexResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ListIndexResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->index_names.clear();
            uint32_t _size252;
            ::apache::thrift::protocol::TType _etype255;
            xfer += iprot->readListBegin(_etype255, _size252);
            this->index_names.resize(_size252);
            uint32_t _i256;
            for (_i256 = 0; _i256 < _size252; ++_i256)
            {
              xfer += iprot->readString(this->index_names[_i256]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.index_names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ListIndexResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ListIndexResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_names", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->index_names.size()));
    std::vector<std::string> ::const_iterator _iter257;
    for (_iter257 = this->index_names.begin(); _iter257 != this->index_names.end(); ++_iter257)
    {
      xfer += oprot->writeString((*_iter257));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ListIndexResponse &a, ListIndexResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.index_names, b.index_names);
  swap(a.__isset, b.__isset);
}

ListIndexResponse::ListIndexResponse(const ListIndexResponse& other258) {
  error_code = other258.error_code;
  error_msg = other258.error_msg;
  index_names = other258.index_names;
  __isset = other258.__isset;
}
ListIndexResponse& ListIndexResponse::operator=(const ListIndexResponse& other259) {
  error_code = other259.error_code;
  error_msg = other259.error_msg;
  index_names = other259.index_names;
  __isset = other259.__isset;
  return *this;
}
void ListIndexResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListIndexResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "index_names=" << to_string(index_names);
  out << ")";
}


ShowDatabaseRequest::~ShowDatabaseRequest() noexcept {
}


void ShowDatabaseRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowDatabaseRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowDatabaseRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowDatabaseRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowDatabaseRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowDatabaseRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowDatabaseRequest &a, ShowDatabaseRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ShowDatabaseRequest::ShowDatabaseRequest(const ShowDatabaseRequest& other260) {
  db_name = other260.db_name;
  session_id = other260.session_id;
  __isset = other260.__isset;
}
ShowDatabaseRequest& ShowDatabaseRequest::operator=(const ShowDatabaseRequest& other261) {
  db_name = other261.db_name;
  session_id = other261.session_id;
  __isset = other261.__isset;
  return *this;
}
void ShowDatabaseRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowDatabaseRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ShowDatabaseResponse::~ShowDatabaseResponse() noexcept {
}


void ShowDatabaseResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ShowDatabaseResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ShowDatabaseResponse::__set_database_name(const std::string& val) {
  this->database_name = val;
}

void ShowDatabaseResponse::__set_store_dir(const std::string& val) {
  this->store_dir = val;
}

void ShowDatabaseResponse::__set_table_count(const int64_t val) {
  this->table_count = val;
}
std::ostream& operator<<(std::ostream& out, const ShowDatabaseResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowDatabaseResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->database_name);
          this->__isset.database_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->store_dir);
          this->__isset.store_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->table_count);
          this->__isset.table_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowDatabaseResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowDatabaseResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("database_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->database_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("store_dir", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->store_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_count", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->table_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowDatabaseResponse &a, ShowDatabaseResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.database_name, b.database_name);
  swap(a.store_dir, b.store_dir);
  swap(a.table_count, b.table_count);
  swap(a.__isset, b.__isset);
}

ShowDatabaseResponse::ShowDatabaseResponse(const ShowDatabaseResponse& other262) {
  error_code = other262.error_code;
  error_msg = other262.error_msg;
  database_name = other262.database_name;
  store_dir = other262.store_dir;
  table_count = other262.table_count;
  __isset = other262.__isset;
}
ShowDatabaseResponse& ShowDatabaseResponse::operator=(const ShowDatabaseResponse& other263) {
  error_code = other263.error_code;
  error_msg = other263.error_msg;
  database_name = other263.database_name;
  store_dir = other263.store_dir;
  table_count = other263.table_count;
  __isset = other263.__isset;
  return *this;
}
void ShowDatabaseResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowDatabaseResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "database_name=" << to_string(database_name);
  out << ", " << "store_dir=" << to_string(store_dir);
  out << ", " << "table_count=" << to_string(table_count);
  out << ")";
}


ShowTableRequest::~ShowTableRequest() noexcept {
}


void ShowTableRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowTableRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowTableRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowTableRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowTableRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowTableRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowTableRequest &a, ShowTableRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ShowTableRequest::ShowTableRequest(const ShowTableRequest& other264) {
  db_name = other264.db_name;
  table_name = other264.table_name;
  session_id = other264.session_id;
  __isset = other264.__isset;
}
ShowTableRequest& ShowTableRequest::operator=(const ShowTableRequest& other265) {
  db_name = other265.db_name;
  table_name = other265.table_name;
  session_id = other265.session_id;
  __isset = other265.__isset;
  return *this;
}
void ShowTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowTableRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ShowTableResponse::~ShowTableResponse() noexcept {
}


void ShowTableResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ShowTableResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ShowTableResponse::__set_database_name(const std::string& val) {
  this->database_name = val;
}

void ShowTableResponse::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowTableResponse::__set_store_dir(const std::string& val) {
  this->store_dir = val;
}

void ShowTableResponse::__set_column_count(const int64_t val) {
  this->column_count = val;
}

void ShowTableResponse::__set_segment_count(const int64_t val) {
  this->segment_count = val;
}

void ShowTableResponse::__set_row_count(const int64_t val) {
  this->row_count = val;
}
std::ostream& operator<<(std::ostream& out, const ShowTableResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowTableResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->database_name);
          this->__isset.database_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->store_dir);
          this->__isset.store_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->column_count);
          this->__isset.column_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->segment_count);
          this->__isset.segment_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->row_count);
          this->__isset.row_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowTableResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowTableResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("database_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->database_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("store_dir", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->store_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_count", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->column_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_count", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->segment_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_count", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->row_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowTableResponse &a, ShowTableResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.database_name, b.database_name);
  swap(a.table_name, b.table_name);
  swap(a.store_dir, b.store_dir);
  swap(a.column_count, b.column_count);
  swap(a.segment_count, b.segment_count);
  swap(a.row_count, b.row_count);
  swap(a.__isset, b.__isset);
}

ShowTableResponse::ShowTableResponse(const ShowTableResponse& other266) {
  error_code = other266.error_code;
  error_msg = other266.error_msg;
  database_name = other266.database_name;
  table_name = other266.table_name;
  store_dir = other266.store_dir;
  column_count = other266.column_count;
  segment_count = other266.segment_count;
  row_count = other266.row_count;
  __isset = other266.__isset;
}
ShowTableResponse& ShowTableResponse::operator=(const ShowTableResponse& other267) {
  error_code = other267.error_code;
  error_msg = other267.error_msg;
  database_name = other267.database_name;
  table_name = other267.table_name;
  store_dir = other267.store_dir;
  column_count = other267.column_count;
  segment_count = other267.segment_count;
  row_count = other267.row_count;
  __isset = other267.__isset;
  return *this;
}
void ShowTableResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowTableResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "database_name=" << to_string(database_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "store_dir=" << to_string(store_dir);
  out << ", " << "column_count=" << to_string(column_count);
  out << ", " << "segment_count=" << to_string(segment_count);
  out << ", " << "row_count=" << to_string(row_count);
  out << ")";
}


ShowColumnsRequest::~ShowColumnsRequest() noexcept {
}


void ShowColumnsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowColumnsRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowColumnsRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowColumnsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowColumnsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowColumnsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowColumnsRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowColumnsRequest &a, ShowColumnsRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ShowColumnsRequest::ShowColumnsRequest(const ShowColumnsRequest& other268) {
  db_name = other268.db_name;
  table_name = other268.table_name;
  session_id = other268.session_id;
  __isset = other268.__isset;
}
ShowColumnsRequest& ShowColumnsRequest::operator=(const ShowColumnsRequest& other269) {
  db_name = other269.db_name;
  table_name = other269.table_name;
  session_id = other269.session_id;
  __isset = other269.__isset;
  return *this;
}
void ShowColumnsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowColumnsRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


GetTableRequest::~GetTableRequest() noexcept {
}


void GetTableRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void GetTableRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void GetTableRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const GetTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetTableRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetTableRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetTableRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTableRequest &a, GetTableRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

GetTableRequest::GetTableRequest(const GetTableRequest& other270) {
  db_name = other270.db_name;
  table_name = other270.table_name;
  session_id = other270.session_id;
  __isset = other270.__isset;
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other271) {
  db_name = other271.db_name;
  table_name = other271.table_name;
  session_id = other271.session_id;
  __isset = other271.__isset;
  return *this;
}
void GetTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTableRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


IndexInfo::~IndexInfo() noexcept {
}


void IndexInfo::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void IndexInfo::__set_index_type(const IndexType::type val) {
  this->index_type = val;
}

void IndexInfo::__set_index_param_list(const std::vector<InitParameter> & val) {
  this->index_param_list = val;
}
std::ostream& operator<<(std::ostream& out, const IndexInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IndexInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast272;
          xfer += iprot->readI32(ecast272);
          this->index_type = static_cast<IndexType::type>(ecast272);
          this->__isset.index_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->index_param_list.clear();
            uint32_t _size273;
            ::apache::thrift::protocol::TType _etype276;
            xfer += iprot->readListBegin(_etype276, _size273);
            this->index_param_list.resize(_size273);
            uint32_t _i277;
            for (_i277 = 0; _i277 < _size273; ++_i277)
            {
              xfer += this->index_param_list[_i277].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.index_param_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IndexInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IndexInfo");

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(static_cast<int32_t>(this->index_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_param_list", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->index_param_list.size()));
    std::vector<InitParameter> ::const_iterator _iter278;
    for (_iter278 = this->index_param_list.begin(); _iter278 != this->index_param_list.end(); ++_iter278)
    {
      xfer += (*_iter278).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IndexInfo &a, IndexInfo &b) {
  using ::std::swap;
  swap(a.column_name, b.column_name);
  swap(a.index_type, b.index_type);
  swap(a.index_param_list, b.index_param_list);
  swap(a.__isset, b.__isset);
}

IndexInfo::IndexInfo(const IndexInfo& other279) {
  column_name = other279.column_name;
  index_type = other279.index_type;
  index_param_list = other279.index_param_list;
  __isset = other279.__isset;
}
IndexInfo& IndexInfo::operator=(const IndexInfo& other280) {
  column_name = other280.column_name;
  index_type = other280.index_type;
  index_param_list = other280.index_param_list;
  __isset = other280.__isset;
  return *this;
}
void IndexInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IndexInfo(";
  out << "column_name=" << to_string(column_name);
  out << ", " << "index_type=" << to_string(index_type);
  out << ", " << "index_param_list=" << to_string(index_param_list);
  out << ")";
}


CreateIndexRequest::~CreateIndexRequest() noexcept {
}


void CreateIndexRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void CreateIndexRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void CreateIndexRequest::__set_index_name(const std::string& val) {
  this->index_name = val;
}

void CreateIndexRequest::__set_index_info_list(const std::vector<IndexInfo> & val) {
  this->index_info_list = val;
}

void CreateIndexRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void CreateIndexRequest::__set_create_option(const CreateOption& val) {
  this->create_option = val;
}
std::ostream& operator<<(std::ostream& out, const CreateIndexRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateIndexRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_name);
          this->__isset.index_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->index_info_list.clear();
            uint32_t _size281;
            ::apache::thrift::protocol::TType _etype284;
            xfer += iprot->readListBegin(_etype284, _size281);
            this->index_info_list.resize(_size281);
            uint32_t _i285;
            for (_i285 = 0; _i285 < _size281; ++_i285)
            {
              xfer += this->index_info_list[_i285].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.index_info_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->create_option.read(iprot);
          this->__isset.create_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateIndexRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateIndexRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->index_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_info_list", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->index_info_list.size()));
    std::vector<IndexInfo> ::const_iterator _iter286;
    for (_iter286 = this->index_info_list.begin(); _iter286 != this->index_info_list.end(); ++_iter286)
    {
      xfer += (*_iter286).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_option", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->create_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateIndexRequest &a, CreateIndexRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.index_name, b.index_name);
  swap(a.index_info_list, b.index_info_list);
  swap(a.session_id, b.session_id);
  swap(a.create_option, b.create_option);
  swap(a.__isset, b.__isset);
}

CreateIndexRequest::CreateIndexRequest(const CreateIndexRequest& other287) {
  db_name = other287.db_name;
  table_name = other287.table_name;
  index_name = other287.index_name;
  index_info_list = other287.index_info_list;
  session_id = other287.session_id;
  create_option = other287.create_option;
  __isset = other287.__isset;
}
CreateIndexRequest& CreateIndexRequest::operator=(const CreateIndexRequest& other288) {
  db_name = other288.db_name;
  table_name = other288.table_name;
  index_name = other288.index_name;
  index_info_list = other288.index_info_list;
  session_id = other288.session_id;
  create_option = other288.create_option;
  __isset = other288.__isset;
  return *this;
}
void CreateIndexRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateIndexRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "index_name=" << to_string(index_name);
  out << ", " << "index_info_list=" << to_string(index_info_list);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "create_option=" << to_string(create_option);
  out << ")";
}


DropIndexRequest::~DropIndexRequest() noexcept {
}


void DropIndexRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void DropIndexRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void DropIndexRequest::__set_index_name(const std::string& val) {
  this->index_name = val;
}

void DropIndexRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void DropIndexRequest::__set_drop_option(const DropOption& val) {
  this->drop_option = val;
}
std::ostream& operator<<(std::ostream& out, const DropIndexRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DropIndexRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_name);
          this->__isset.index_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->drop_option.read(iprot);
          this->__isset.drop_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DropIndexRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropIndexRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->index_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drop_option", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->drop_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropIndexRequest &a, DropIndexRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.index_name, b.index_name);
  swap(a.session_id, b.session_id);
  swap(a.drop_option, b.drop_option);
  swap(a.__isset, b.__isset);
}

DropIndexRequest::DropIndexRequest(const DropIndexRequest& other289) {
  db_name = other289.db_name;
  table_name = other289.table_name;
  index_name = other289.index_name;
  session_id = other289.session_id;
  drop_option = other289.drop_option;
  __isset = other289.__isset;
}
DropIndexRequest& DropIndexRequest::operator=(const DropIndexRequest& other290) {
  db_name = other290.db_name;
  table_name = other290.table_name;
  index_name = other290.index_name;
  session_id = other290.session_id;
  drop_option = other290.drop_option;
  __isset = other290.__isset;
  return *this;
}
void DropIndexRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropIndexRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "index_name=" << to_string(index_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "drop_option=" << to_string(drop_option);
  out << ")";
}


ShowIndexRequest::~ShowIndexRequest() noexcept {
}


void ShowIndexRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowIndexRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowIndexRequest::__set_index_name(const std::string& val) {
  this->index_name = val;
}

void ShowIndexRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowIndexRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowIndexRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_name);
          this->__isset.index_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowIndexRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowIndexRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->index_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowIndexRequest &a, ShowIndexRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.index_name, b.index_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ShowIndexRequest::ShowIndexRequest(const ShowIndexRequest& other291) {
  db_name = other291.db_name;
  table_name = other291.table_name;
  index_name = other291.index_name;
  session_id = other291.session_id;
  __isset = other291.__isset;
}
ShowIndexRequest& ShowIndexRequest::operator=(const ShowIndexRequest& other292) {
  db_name = other292.db_name;
  table_name = other292.table_name;
  index_name = other292.index_name;
  session_id = other292.session_id;
  __isset = other292.__isset;
  return *this;
}
void ShowIndexRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowIndexRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "index_name=" << to_string(index_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ShowIndexResponse::~ShowIndexResponse() noexcept {
}


void ShowIndexResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ShowIndexResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ShowIndexResponse::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowIndexResponse::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowIndexResponse::__set_index_name(const std::string& val) {
  this->index_name = val;
}

void ShowIndexResponse::__set_index_type(const std::string& val) {
  this->index_type = val;
}

void ShowIndexResponse::__set_index_column_names(const std::string& val) {
  this->index_column_names = val;
}

void ShowIndexResponse::__set_index_column_ids(const std::string& val) {
  this->index_column_ids = val;
}

void ShowIndexResponse::__set_other_parameters(const std::string& val) {
  this->other_parameters = val;
}

void ShowIndexResponse::__set_store_dir(const std::string& val) {
  this->store_dir = val;
}

void ShowIndexResponse::__set_store_size(const std::string& val) {
  this->store_size = val;
}

void ShowIndexResponse::__set_segment_index_count(const std::string& val) {
  this->segment_index_count = val;
}
std::ostream& operator<<(std::ostream& out, const ShowIndexResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowIndexResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_name);
          this->__isset.index_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_type);
          this->__isset.index_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_column_names);
          this->__isset.index_column_names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_column_ids);
          this->__isset.index_column_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->other_parameters);
          this->__isset.other_parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->store_dir);
          this->__isset.store_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->store_size);
          this->__isset.store_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->segment_index_count);
          this->__isset.segment_index_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowIndexResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowIndexResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->index_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_type", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->index_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_column_names", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->index_column_names);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_column_ids", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->index_column_ids);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("other_parameters", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->other_parameters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("store_dir", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->store_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("store_size", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->store_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_index_count", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->segment_index_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowIndexResponse &a, ShowIndexResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.index_name, b.index_name);
  swap(a.index_type, b.index_type);
  swap(a.index_column_names, b.index_column_names);
  swap(a.index_column_ids, b.index_column_ids);
  swap(a.other_parameters, b.other_parameters);
  swap(a.store_dir, b.store_dir);
  swap(a.store_size, b.store_size);
  swap(a.segment_index_count, b.segment_index_count);
  swap(a.__isset, b.__isset);
}

ShowIndexResponse::ShowIndexResponse(const ShowIndexResponse& other293) {
  error_code = other293.error_code;
  error_msg = other293.error_msg;
  db_name = other293.db_name;
  table_name = other293.table_name;
  index_name = other293.index_name;
  index_type = other293.index_type;
  index_column_names = other293.index_column_names;
  index_column_ids = other293.index_column_ids;
  other_parameters = other293.other_parameters;
  store_dir = other293.store_dir;
  store_size = other293.store_size;
  segment_index_count = other293.segment_index_count;
  __isset = other293.__isset;
}
ShowIndexResponse& ShowIndexResponse::operator=(const ShowIndexResponse& other294) {
  error_code = other294.error_code;
  error_msg = other294.error_msg;
  db_name = other294.db_name;
  table_name = other294.table_name;
  index_name = other294.index_name;
  index_type = other294.index_type;
  index_column_names = other294.index_column_names;
  index_column_ids = other294.index_column_ids;
  other_parameters = other294.other_parameters;
  store_dir = other294.store_dir;
  store_size = other294.store_size;
  segment_index_count = other294.segment_index_count;
  __isset = other294.__isset;
  return *this;
}
void ShowIndexResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowIndexResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "index_name=" << to_string(index_name);
  out << ", " << "index_type=" << to_string(index_type);
  out << ", " << "index_column_names=" << to_string(index_column_names);
  out << ", " << "index_column_ids=" << to_string(index_column_ids);
  out << ", " << "other_parameters=" << to_string(other_parameters);
  out << ", " << "store_dir=" << to_string(store_dir);
  out << ", " << "store_size=" << to_string(store_size);
  out << ", " << "segment_index_count=" << to_string(segment_index_count);
  out << ")";
}


GetDatabaseRequest::~GetDatabaseRequest() noexcept {
}


void GetDatabaseRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void GetDatabaseRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const GetDatabaseRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetDatabaseRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetDatabaseRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetDatabaseRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetDatabaseRequest &a, GetDatabaseRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

GetDatabaseRequest::GetDatabaseRequest(const GetDatabaseRequest& other295) {
  db_name = other295.db_name;
  session_id = other295.session_id;
  __isset = other295.__isset;
}
GetDatabaseRequest& GetDatabaseRequest::operator=(const GetDatabaseRequest& other296) {
  db_name = other296.db_name;
  session_id = other296.session_id;
  __isset = other296.__isset;
  return *this;
}
void GetDatabaseRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetDatabaseRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


CreateDatabaseRequest::~CreateDatabaseRequest() noexcept {
}


void CreateDatabaseRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void CreateDatabaseRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void CreateDatabaseRequest::__set_create_option(const CreateOption& val) {
  this->create_option = val;
}
std::ostream& operator<<(std::ostream& out, const CreateDatabaseRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateDatabaseRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->create_option.read(iprot);
          this->__isset.create_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateDatabaseRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateDatabaseRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_option", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->create_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateDatabaseRequest &a, CreateDatabaseRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.session_id, b.session_id);
  swap(a.create_option, b.create_option);
  swap(a.__isset, b.__isset);
}

CreateDatabaseRequest::CreateDatabaseRequest(const CreateDatabaseRequest& other297) {
  db_name = other297.db_name;
  session_id = other297.session_id;
  create_option = other297.create_option;
  __isset = other297.__isset;
}
CreateDatabaseRequest& CreateDatabaseRequest::operator=(const CreateDatabaseRequest& other298) {
  db_name = other298.db_name;
  session_id = other298.session_id;
  create_option = other298.create_option;
  __isset = other298.__isset;
  return *this;
}
void CreateDatabaseRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateDatabaseRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "create_option=" << to_string(create_option);
  out << ")";
}


DropDatabaseRequest::~DropDatabaseRequest() noexcept {
}


void DropDatabaseRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void DropDatabaseRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void DropDatabaseRequest::__set_drop_option(const DropOption& val) {
  this->drop_option = val;
}
std::ostream& operator<<(std::ostream& out, const DropDatabaseRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DropDatabaseRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->drop_option.read(iprot);
          this->__isset.drop_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DropDatabaseRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropDatabaseRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drop_option", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->drop_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropDatabaseRequest &a, DropDatabaseRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.session_id, b.session_id);
  swap(a.drop_option, b.drop_option);
  swap(a.__isset, b.__isset);
}

DropDatabaseRequest::DropDatabaseRequest(const DropDatabaseRequest& other299) {
  db_name = other299.db_name;
  session_id = other299.session_id;
  drop_option = other299.drop_option;
  __isset = other299.__isset;
}
DropDatabaseRequest& DropDatabaseRequest::operator=(const DropDatabaseRequest& other300) {
  db_name = other300.db_name;
  session_id = other300.session_id;
  drop_option = other300.drop_option;
  __isset = other300.__isset;
  return *this;
}
void DropDatabaseRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropDatabaseRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "drop_option=" << to_string(drop_option);
  out << ")";
}


CreateTableRequest::~CreateTableRequest() noexcept {
}


void CreateTableRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void CreateTableRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void CreateTableRequest::__set_column_defs(const std::vector<ColumnDef> & val) {
  this->column_defs = val;
}

void CreateTableRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void CreateTableRequest::__set_create_option(const CreateOption& val) {
  this->create_option = val;
}
std::ostream& operator<<(std::ostream& out, const CreateTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateTableRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_defs.clear();
            uint32_t _size301;
            ::apache::thrift::protocol::TType _etype304;
            xfer += iprot->readListBegin(_etype304, _size301);
            this->column_defs.resize(_size301);
            uint32_t _i305;
            for (_i305 = 0; _i305 < _size301; ++_i305)
            {
              xfer += this->column_defs[_i305].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_defs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->create_option.read(iprot);
          this->__isset.create_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateTableRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateTableRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_defs", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->column_defs.size()));
    std::vector<ColumnDef> ::const_iterator _iter306;
    for (_iter306 = this->column_defs.begin(); _iter306 != this->column_defs.end(); ++_iter306)
    {
      xfer += (*_iter306).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_option", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->create_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateTableRequest &a, CreateTableRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.column_defs, b.column_defs);
  swap(a.session_id, b.session_id);
  swap(a.create_option, b.create_option);
  swap(a.__isset, b.__isset);
}

CreateTableRequest::CreateTableRequest(const CreateTableRequest& other307) {
  db_name = other307.db_name;
  table_name = other307.table_name;
  column_defs = other307.column_defs;
  session_id = other307.session_id;
  create_option = other307.create_option;
  __isset = other307.__isset;
}
CreateTableRequest& CreateTableRequest::operator=(const CreateTableRequest& other308) {
  db_name = other308.db_name;
  table_name = other308.table_name;
  column_defs = other308.column_defs;
  session_id = other308.session_id;
  create_option = other308.create_option;
  __isset = other308.__isset;
  return *this;
}
void CreateTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateTableRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_defs=" << to_string(column_defs);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "create_option=" << to_string(create_option);
  out << ")";
}


DropTableRequest::~DropTableRequest() noexcept {
}


void DropTableRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void DropTableRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void DropTableRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void DropTableRequest::__set_drop_option(const DropOption& val) {
  this->drop_option = val;
}
std::ostream& operator<<(std::ostream& out, const DropTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DropTableRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->drop_option.read(iprot);
          this->__isset.drop_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DropTableRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DropTableRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drop_option", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->drop_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DropTableRequest &a, DropTableRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.session_id, b.session_id);
  swap(a.drop_option, b.drop_option);
  swap(a.__isset, b.__isset);
}

DropTableRequest::DropTableRequest(const DropTableRequest& other309) {
  db_name = other309.db_name;
  table_name = other309.table_name;
  session_id = other309.session_id;
  drop_option = other309.drop_option;
  __isset = other309.__isset;
}
DropTableRequest& DropTableRequest::operator=(const DropTableRequest& other310) {
  db_name = other310.db_name;
  table_name = other310.table_name;
  session_id = other310.session_id;
  drop_option = other310.drop_option;
  __isset = other310.__isset;
  return *this;
}
void DropTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropTableRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "session_id=" << to_string(session_id);
  out << ", " << "drop_option=" << to_string(drop_option);
  out << ")";
}


InsertRequest::~InsertRequest() noexcept {
}


void InsertRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void InsertRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void InsertRequest::__set_column_names(const std::vector<std::string> & val) {
  this->column_names = val;
}

void InsertRequest::__set_fields(const std::vector<Field> & val) {
  this->fields = val;
}

void InsertRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const InsertRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InsertRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_names.clear();
            uint32_t _size311;
            ::apache::thrift::protocol::TType _etype314;
            xfer += iprot->readListBegin(_etype314, _size311);
            this->column_names.resize(_size311);
            uint32_t _i315;
            for (_i315 = 0; _i315 < _size311; ++_i315)
            {
              xfer += iprot->readString(this->column_names[_i315]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fields.clear();
            uint32_t _size316;
            ::apache::thrift::protocol::TType _etype319;
            xfer += iprot->readListBegin(_etype319, _size316);
            this->fields.resize(_size316);
            uint32_t _i320;
            for (_i320 = 0; _i320 < _size316; ++_i320)
            {
              xfer += this->fields[_i320].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InsertRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InsertRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_names", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->column_names.size()));
    std::vector<std::string> ::const_iterator _iter321;
    for (_iter321 = this->column_names.begin(); _iter321 != this->column_names.end(); ++_iter321)
    {
      xfer += oprot->writeString((*_iter321));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fields", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fields.size()));
    std::vector<Field> ::const_iterator _iter322;
    for (_iter322 = this->fields.begin(); _iter322 != this->fields.end(); ++_iter322)
    {
      xfer += (*_iter322).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InsertRequest &a, InsertRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.column_names, b.column_names);
  swap(a.fields, b.fields);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

InsertRequest::InsertRequest(const InsertRequest& other323) {
  db_name = other323.db_name;
  table_name = other323.table_name;
  column_names = other323.column_names;
  fields = other323.fields;
  session_id = other323.session_id;
  __isset = other323.__isset;
}
InsertRequest& InsertRequest::operator=(const InsertRequest& other324) {
  db_name = other324.db_name;
  table_name = other324.table_name;
  column_names = other324.column_names;
  fields = other324.fields;
  session_id = other324.session_id;
  __isset = other324.__isset;
  return *this;
}
void InsertRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InsertRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_names=" << to_string(column_names);
  out << ", " << "fields=" << to_string(fields);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ImportRequest::~ImportRequest() noexcept {
}


void ImportRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ImportRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ImportRequest::__set_file_name(const std::string& val) {
  this->file_name = val;
}

void ImportRequest::__set_import_option(const ImportOption& val) {
  this->import_option = val;
}

void ImportRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ImportRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ImportRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_name);
          this->__isset.file_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->import_option.read(iprot);
          this->__isset.import_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ImportRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ImportRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->file_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("import_option", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->import_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ImportRequest &a, ImportRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.file_name, b.file_name);
  swap(a.import_option, b.import_option);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ImportRequest::ImportRequest(const ImportRequest& other325) {
  db_name = other325.db_name;
  table_name = other325.table_name;
  file_name = other325.file_name;
  import_option = other325.import_option;
  session_id = other325.session_id;
  __isset = other325.__isset;
}
ImportRequest& ImportRequest::operator=(const ImportRequest& other326) {
  db_name = other326.db_name;
  table_name = other326.table_name;
  file_name = other326.file_name;
  import_option = other326.import_option;
  session_id = other326.session_id;
  __isset = other326.__isset;
  return *this;
}
void ImportRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ImportRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "file_name=" << to_string(file_name);
  out << ", " << "import_option=" << to_string(import_option);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ExportRequest::~ExportRequest() noexcept {
}


void ExportRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ExportRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ExportRequest::__set_columns(const std::vector<std::string> & val) {
  this->columns = val;
}

void ExportRequest::__set_file_name(const std::string& val) {
  this->file_name = val;
}

void ExportRequest::__set_export_option(const ExportOption& val) {
  this->export_option = val;
}

void ExportRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const ExportRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExportRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->columns.clear();
            uint32_t _size327;
            ::apache::thrift::protocol::TType _etype330;
            xfer += iprot->readListBegin(_etype330, _size327);
            this->columns.resize(_size327);
            uint32_t _i331;
            for (_i331 = 0; _i331 < _size327; ++_i331)
            {
              xfer += iprot->readString(this->columns[_i331]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.columns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file_name);
          this->__isset.file_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->export_option.read(iprot);
          this->__isset.export_option = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExportRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExportRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("columns", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->columns.size()));
    std::vector<std::string> ::const_iterator _iter332;
    for (_iter332 = this->columns.begin(); _iter332 != this->columns.end(); ++_iter332)
    {
      xfer += oprot->writeString((*_iter332));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->file_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("export_option", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->export_option.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExportRequest &a, ExportRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.columns, b.columns);
  swap(a.file_name, b.file_name);
  swap(a.export_option, b.export_option);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

ExportRequest::ExportRequest(const ExportRequest& other333) {
  db_name = other333.db_name;
  table_name = other333.table_name;
  columns = other333.columns;
  file_name = other333.file_name;
  export_option = other333.export_option;
  session_id = other333.session_id;
  __isset = other333.__isset;
}
ExportRequest& ExportRequest::operator=(const ExportRequest& other334) {
  db_name = other334.db_name;
  table_name = other334.table_name;
  columns = other334.columns;
  file_name = other334.file_name;
  export_option = other334.export_option;
  session_id = other334.session_id;
  __isset = other334.__isset;
  return *this;
}
void ExportRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExportRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "columns=" << to_string(columns);
  out << ", " << "file_name=" << to_string(file_name);
  out << ", " << "export_option=" << to_string(export_option);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ExplainRequest::~ExplainRequest() noexcept {
}


void ExplainRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ExplainRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ExplainRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ExplainRequest::__set_select_list(const std::vector<ParsedExpr> & val) {
  this->select_list = val;
}

void ExplainRequest::__set_search_expr(const SearchExpr& val) {
  this->search_expr = val;
__isset.search_expr = true;
}

void ExplainRequest::__set_where_expr(const ParsedExpr& val) {
  this->where_expr = val;
__isset.where_expr = true;
}

void ExplainRequest::__set_group_by_list(const std::vector<ParsedExpr> & val) {
  this->group_by_list = val;
__isset.group_by_list = true;
}

void ExplainRequest::__set_having_expr(const ParsedExpr& val) {
  this->having_expr = val;
__isset.having_expr = true;
}

void ExplainRequest::__set_limit_expr(const ParsedExpr& val) {
  this->limit_expr = val;
__isset.limit_expr = true;
}

void ExplainRequest::__set_offset_expr(const ParsedExpr& val) {
  this->offset_expr = val;
__isset.offset_expr = true;
}

void ExplainRequest::__set_order_by_list(const std::vector<OrderByExpr> & val) {
  this->order_by_list = val;
__isset.order_by_list = true;
}

void ExplainRequest::__set_explain_type(const ExplainType::type val) {
  this->explain_type = val;
}
std::ostream& operator<<(std::ostream& out, const ExplainRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExplainRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->select_list.clear();
            uint32_t _size335;
            ::apache::thrift::protocol::TType _etype338;
            xfer += iprot->readListBegin(_etype338, _size335);
            this->select_list.resize(_size335);
            uint32_t _i339;
            for (_i339 = 0; _i339 < _size335; ++_i339)
            {
              xfer += this->select_list[_i339].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.select_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->search_expr.read(iprot);
          this->__isset.search_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->where_expr.read(iprot);
          this->__isset.where_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->group_by_list.clear();
            uint32_t _size340;
            ::apache::thrift::protocol::TType _etype343;
            xfer += iprot->readListBegin(_etype343, _size340);
            this->group_by_list.resize(_size340);
            uint32_t _i344;
            for (_i344 = 0; _i344 < _size340; ++_i344)
            {
              xfer += this->group_by_list[_i344].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.group_by_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->having_expr.read(iprot);
          this->__isset.having_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->limit_expr.read(iprot);
          this->__isset.limit_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->offset_expr.read(iprot);
          this->__isset.offset_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->order_by_list.clear();
            uint32_t _size345;
            ::apache::thrift::protocol::TType _etype348;
            xfer += iprot->readListBegin(_etype348, _size345);
            this->order_by_list.resize(_size345);
            uint32_t _i349;
            for (_i349 = 0; _i349 < _size345; ++_i349)
            {
              xfer += this->order_by_list[_i349].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.order_by_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast350;
          xfer += iprot->readI32(ecast350);
          this->explain_type = static_cast<ExplainType::type>(ecast350);
          this->__isset.explain_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExplainRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExplainRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("select_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->select_list.size()));
    std::vector<ParsedExpr> ::const_iterator _iter351;
    for (_iter351 = this->select_list.begin(); _iter351 != this->select_list.end(); ++_iter351)
    {
      xfer += (*_iter351).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.search_expr) {
    xfer += oprot->writeFieldBegin("search_expr", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->search_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.where_expr) {
    xfer += oprot->writeFieldBegin("where_expr", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->where_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_by_list) {
    xfer += oprot->writeFieldBegin("group_by_list", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->group_by_list.size()));
      std::vector<ParsedExpr> ::const_iterator _iter352;
      for (_iter352 = this->group_by_list.begin(); _iter352 != this->group_by_list.end(); ++_iter352)
      {
        xfer += (*_iter352).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.having_expr) {
    xfer += oprot->writeFieldBegin("having_expr", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->having_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.limit_expr) {
    xfer += oprot->writeFieldBegin("limit_expr", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->limit_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offset_expr) {
    xfer += oprot->writeFieldBegin("offset_expr", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->offset_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.order_by_list) {
    xfer += oprot->writeFieldBegin("order_by_list", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->order_by_list.size()));
      std::vector<OrderByExpr> ::const_iterator _iter353;
      for (_iter353 = this->order_by_list.begin(); _iter353 != this->order_by_list.end(); ++_iter353)
      {
        xfer += (*_iter353).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("explain_type", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(static_cast<int32_t>(this->explain_type));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExplainRequest &a, ExplainRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.select_list, b.select_list);
  swap(a.search_expr, b.search_expr);
  swap(a.where_expr, b.where_expr);
  swap(a.group_by_list, b.group_by_list);
  swap(a.having_expr, b.having_expr);
  swap(a.limit_expr, b.limit_expr);
  swap(a.offset_expr, b.offset_expr);
  swap(a.order_by_list, b.order_by_list);
  swap(a.explain_type, b.explain_type);
  swap(a.__isset, b.__isset);
}

ExplainRequest::ExplainRequest(const ExplainRequest& other354) {
  session_id = other354.session_id;
  db_name = other354.db_name;
  table_name = other354.table_name;
  select_list = other354.select_list;
  search_expr = other354.search_expr;
  where_expr = other354.where_expr;
  group_by_list = other354.group_by_list;
  having_expr = other354.having_expr;
  limit_expr = other354.limit_expr;
  offset_expr = other354.offset_expr;
  order_by_list = other354.order_by_list;
  explain_type = other354.explain_type;
  __isset = other354.__isset;
}
ExplainRequest& ExplainRequest::operator=(const ExplainRequest& other355) {
  session_id = other355.session_id;
  db_name = other355.db_name;
  table_name = other355.table_name;
  select_list = other355.select_list;
  search_expr = other355.search_expr;
  where_expr = other355.where_expr;
  group_by_list = other355.group_by_list;
  having_expr = other355.having_expr;
  limit_expr = other355.limit_expr;
  offset_expr = other355.offset_expr;
  order_by_list = other355.order_by_list;
  explain_type = other355.explain_type;
  __isset = other355.__isset;
  return *this;
}
void ExplainRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExplainRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "select_list=" << to_string(select_list);
  out << ", " << "search_expr="; (__isset.search_expr ? (out << to_string(search_expr)) : (out << "<null>"));
  out << ", " << "where_expr="; (__isset.where_expr ? (out << to_string(where_expr)) : (out << "<null>"));
  out << ", " << "group_by_list="; (__isset.group_by_list ? (out << to_string(group_by_list)) : (out << "<null>"));
  out << ", " << "having_expr="; (__isset.having_expr ? (out << to_string(having_expr)) : (out << "<null>"));
  out << ", " << "limit_expr="; (__isset.limit_expr ? (out << to_string(limit_expr)) : (out << "<null>"));
  out << ", " << "offset_expr="; (__isset.offset_expr ? (out << to_string(offset_expr)) : (out << "<null>"));
  out << ", " << "order_by_list="; (__isset.order_by_list ? (out << to_string(order_by_list)) : (out << "<null>"));
  out << ", " << "explain_type=" << to_string(explain_type);
  out << ")";
}


ExplainResponse::~ExplainResponse() noexcept {
}


void ExplainResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ExplainResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ExplainResponse::__set_column_defs(const std::vector<ColumnDef> & val) {
  this->column_defs = val;
}

void ExplainResponse::__set_column_fields(const std::vector<ColumnField> & val) {
  this->column_fields = val;
}
std::ostream& operator<<(std::ostream& out, const ExplainResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExplainResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_defs.clear();
            uint32_t _size356;
            ::apache::thrift::protocol::TType _etype359;
            xfer += iprot->readListBegin(_etype359, _size356);
            this->column_defs.resize(_size356);
            uint32_t _i360;
            for (_i360 = 0; _i360 < _size356; ++_i360)
            {
              xfer += this->column_defs[_i360].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_defs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_fields.clear();
            uint32_t _size361;
            ::apache::thrift::protocol::TType _etype364;
            xfer += iprot->readListBegin(_etype364, _size361);
            this->column_fields.resize(_size361);
            uint32_t _i365;
            for (_i365 = 0; _i365 < _size361; ++_i365)
            {
              xfer += this->column_fields[_i365].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExplainResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExplainResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_defs", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->column_defs.size()));
    std::vector<ColumnDef> ::const_iterator _iter366;
    for (_iter366 = this->column_defs.begin(); _iter366 != this->column_defs.end(); ++_iter366)
    {
      xfer += (*_iter366).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_fields", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->column_fields.size()));
    std::vector<ColumnField> ::const_iterator _iter367;
    for (_iter367 = this->column_fields.begin(); _iter367 != this->column_fields.end(); ++_iter367)
    {
      xfer += (*_iter367).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExplainResponse &a, ExplainResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.column_defs, b.column_defs);
  swap(a.column_fields, b.column_fields);
  swap(a.__isset, b.__isset);
}

ExplainResponse::ExplainResponse(const ExplainResponse& other368) {
  error_code = other368.error_code;
  error_msg = other368.error_msg;
  column_defs = other368.column_defs;
  column_fields = other368.column_fields;
  __isset = other368.__isset;
}
ExplainResponse& ExplainResponse::operator=(const ExplainResponse& other369) {
  error_code = other369.error_code;
  error_msg = other369.error_msg;
  column_defs = other369.column_defs;
  column_fields = other369.column_fields;
  __isset = other369.__isset;
  return *this;
}
void ExplainResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExplainResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "column_defs=" << to_string(column_defs);
  out << ", " << "column_fields=" << to_string(column_fields);
  out << ")";
}


SelectRequest::~SelectRequest() noexcept {
}


void SelectRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void SelectRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void SelectRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SelectRequest::__set_select_list(const std::vector<ParsedExpr> & val) {
  this->select_list = val;
}

void SelectRequest::__set_search_expr(const SearchExpr& val) {
  this->search_expr = val;
__isset.search_expr = true;
}

void SelectRequest::__set_where_expr(const ParsedExpr& val) {
  this->where_expr = val;
__isset.where_expr = true;
}

void SelectRequest::__set_group_by_list(const std::vector<ParsedExpr> & val) {
  this->group_by_list = val;
__isset.group_by_list = true;
}

void SelectRequest::__set_having_expr(const ParsedExpr& val) {
  this->having_expr = val;
__isset.having_expr = true;
}

void SelectRequest::__set_limit_expr(const ParsedExpr& val) {
  this->limit_expr = val;
__isset.limit_expr = true;
}

void SelectRequest::__set_offset_expr(const ParsedExpr& val) {
  this->offset_expr = val;
__isset.offset_expr = true;
}

void SelectRequest::__set_order_by_list(const std::vector<OrderByExpr> & val) {
  this->order_by_list = val;
__isset.order_by_list = true;
}
std::ostream& operator<<(std::ostream& out, const SelectRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SelectRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->select_list.clear();
            uint32_t _size370;
            ::apache::thrift::protocol::TType _etype373;
            xfer += iprot->readListBegin(_etype373, _size370);
            this->select_list.resize(_size370);
            uint32_t _i374;
            for (_i374 = 0; _i374 < _size370; ++_i374)
            {
              xfer += this->select_list[_i374].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.select_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->search_expr.read(iprot);
          this->__isset.search_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->where_expr.read(iprot);
          this->__isset.where_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->group_by_list.clear();
            uint32_t _size375;
            ::apache::thrift::protocol::TType _etype378;
            xfer += iprot->readListBegin(_etype378, _size375);
            this->group_by_list.resize(_size375);
            uint32_t _i379;
            for (_i379 = 0; _i379 < _size375; ++_i379)
            {
              xfer += this->group_by_list[_i379].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.group_by_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->having_expr.read(iprot);
          this->__isset.having_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->limit_expr.read(iprot);
          this->__isset.limit_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->offset_expr.read(iprot);
          this->__isset.offset_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->order_by_list.clear();
            uint32_t _size380;
            ::apache::thrift::protocol::TType _etype383;
            xfer += iprot->readListBegin(_etype383, _size380);
            this->order_by_list.resize(_size380);
            uint32_t _i384;
            for (_i384 = 0; _i384 < _size380; ++_i384)
            {
              xfer += this->order_by_list[_i384].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.order_by_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SelectRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SelectRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("select_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->select_list.size()));
    std::vector<ParsedExpr> ::const_iterator _iter385;
    for (_iter385 = this->select_list.begin(); _iter385 != this->select_list.end(); ++_iter385)
    {
      xfer += (*_iter385).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.search_expr) {
    xfer += oprot->writeFieldBegin("search_expr", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->search_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.where_expr) {
    xfer += oprot->writeFieldBegin("where_expr", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->where_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_by_list) {
    xfer += oprot->writeFieldBegin("group_by_list", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->group_by_list.size()));
      std::vector<ParsedExpr> ::const_iterator _iter386;
      for (_iter386 = this->group_by_list.begin(); _iter386 != this->group_by_list.end(); ++_iter386)
      {
        xfer += (*_iter386).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.having_expr) {
    xfer += oprot->writeFieldBegin("having_expr", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->having_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.limit_expr) {
    xfer += oprot->writeFieldBegin("limit_expr", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->limit_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offset_expr) {
    xfer += oprot->writeFieldBegin("offset_expr", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->offset_expr.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.order_by_list) {
    xfer += oprot->writeFieldBegin("order_by_list", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->order_by_list.size()));
      std::vector<OrderByExpr> ::const_iterator _iter387;
      for (_iter387 = this->order_by_list.begin(); _iter387 != this->order_by_list.end(); ++_iter387)
      {
        xfer += (*_iter387).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SelectRequest &a, SelectRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.select_list, b.select_list);
  swap(a.search_expr, b.search_expr);
  swap(a.where_expr, b.where_expr);
  swap(a.group_by_list, b.group_by_list);
  swap(a.having_expr, b.having_expr);
  swap(a.limit_expr, b.limit_expr);
  swap(a.offset_expr, b.offset_expr);
  swap(a.order_by_list, b.order_by_list);
  swap(a.__isset, b.__isset);
}

SelectRequest::SelectRequest(const SelectRequest& other388) {
  session_id = other388.session_id;
  db_name = other388.db_name;
  table_name = other388.table_name;
  select_list = other388.select_list;
  search_expr = other388.search_expr;
  where_expr = other388.where_expr;
  group_by_list = other388.group_by_list;
  having_expr = other388.having_expr;
  limit_expr = other388.limit_expr;
  offset_expr = other388.offset_expr;
  order_by_list = other388.order_by_list;
  __isset = other388.__isset;
}
SelectRequest& SelectRequest::operator=(const SelectRequest& other389) {
  session_id = other389.session_id;
  db_name = other389.db_name;
  table_name = other389.table_name;
  select_list = other389.select_list;
  search_expr = other389.search_expr;
  where_expr = other389.where_expr;
  group_by_list = other389.group_by_list;
  having_expr = other389.having_expr;
  limit_expr = other389.limit_expr;
  offset_expr = other389.offset_expr;
  order_by_list = other389.order_by_list;
  __isset = other389.__isset;
  return *this;
}
void SelectRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SelectRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "select_list=" << to_string(select_list);
  out << ", " << "search_expr="; (__isset.search_expr ? (out << to_string(search_expr)) : (out << "<null>"));
  out << ", " << "where_expr="; (__isset.where_expr ? (out << to_string(where_expr)) : (out << "<null>"));
  out << ", " << "group_by_list="; (__isset.group_by_list ? (out << to_string(group_by_list)) : (out << "<null>"));
  out << ", " << "having_expr="; (__isset.having_expr ? (out << to_string(having_expr)) : (out << "<null>"));
  out << ", " << "limit_expr="; (__isset.limit_expr ? (out << to_string(limit_expr)) : (out << "<null>"));
  out << ", " << "offset_expr="; (__isset.offset_expr ? (out << to_string(offset_expr)) : (out << "<null>"));
  out << ", " << "order_by_list="; (__isset.order_by_list ? (out << to_string(order_by_list)) : (out << "<null>"));
  out << ")";
}


SelectResponse::~SelectResponse() noexcept {
}


void SelectResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void SelectResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void SelectResponse::__set_column_defs(const std::vector<ColumnDef> & val) {
  this->column_defs = val;
}

void SelectResponse::__set_column_fields(const std::vector<ColumnField> & val) {
  this->column_fields = val;
}
std::ostream& operator<<(std::ostream& out, const SelectResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SelectResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_defs.clear();
            uint32_t _size390;
            ::apache::thrift::protocol::TType _etype393;
            xfer += iprot->readListBegin(_etype393, _size390);
            this->column_defs.resize(_size390);
            uint32_t _i394;
            for (_i394 = 0; _i394 < _size390; ++_i394)
            {
              xfer += this->column_defs[_i394].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_defs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_fields.clear();
            uint32_t _size395;
            ::apache::thrift::protocol::TType _etype398;
            xfer += iprot->readListBegin(_etype398, _size395);
            this->column_fields.resize(_size395);
            uint32_t _i399;
            for (_i399 = 0; _i399 < _size395; ++_i399)
            {
              xfer += this->column_fields[_i399].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.column_fields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SelectResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SelectResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_defs", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->column_defs.size()));
    std::vector<ColumnDef> ::const_iterator _iter400;
    for (_iter400 = this->column_defs.begin(); _iter400 != this->column_defs.end(); ++_iter400)
    {
      xfer += (*_iter400).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_fields", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->column_fields.size()));
    std::vector<ColumnField> ::const_iterator _iter401;
    for (_iter401 = this->column_fields.begin(); _iter401 != this->column_fields.end(); ++_iter401)
    {
      xfer += (*_iter401).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SelectResponse &a, SelectResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.column_defs, b.column_defs);
  swap(a.column_fields, b.column_fields);
  swap(a.__isset, b.__isset);
}

SelectResponse::SelectResponse(const SelectResponse& other402) {
  error_code = other402.error_code;
  error_msg = other402.error_msg;
  column_defs = other402.column_defs;
  column_fields = other402.column_fields;
  __isset = other402.__isset;
}
SelectResponse& SelectResponse::operator=(const SelectResponse& other403) {
  error_code = other403.error_code;
  error_msg = other403.error_msg;
  column_defs = other403.column_defs;
  column_fields = other403.column_fields;
  __isset = other403.__isset;
  return *this;
}
void SelectResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SelectResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "column_defs=" << to_string(column_defs);
  out << ", " << "column_fields=" << to_string(column_fields);
  out << ")";
}


DeleteRequest::~DeleteRequest() noexcept {
}


void DeleteRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void DeleteRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void DeleteRequest::__set_where_expr(const ParsedExpr& val) {
  this->where_expr = val;
}

void DeleteRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const DeleteRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DeleteRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->where_expr.read(iprot);
          this->__isset.where_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DeleteRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("where_expr", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->where_expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteRequest &a, DeleteRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.where_expr, b.where_expr);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

DeleteRequest::DeleteRequest(const DeleteRequest& other404) {
  db_name = other404.db_name;
  table_name = other404.table_name;
  where_expr = other404.where_expr;
  session_id = other404.session_id;
  __isset = other404.__isset;
}
DeleteRequest& DeleteRequest::operator=(const DeleteRequest& other405) {
  db_name = other405.db_name;
  table_name = other405.table_name;
  where_expr = other405.where_expr;
  session_id = other405.session_id;
  __isset = other405.__isset;
  return *this;
}
void DeleteRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DeleteRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "where_expr=" << to_string(where_expr);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


UpdateRequest::~UpdateRequest() noexcept {
}


void UpdateRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void UpdateRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void UpdateRequest::__set_where_expr(const ParsedExpr& val) {
  this->where_expr = val;
}

void UpdateRequest::__set_update_expr_array(const std::vector<UpdateExpr> & val) {
  this->update_expr_array = val;
}

void UpdateRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}
std::ostream& operator<<(std::ostream& out, const UpdateRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UpdateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->where_expr.read(iprot);
          this->__isset.where_expr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->update_expr_array.clear();
            uint32_t _size406;
            ::apache::thrift::protocol::TType _etype409;
            xfer += iprot->readListBegin(_etype409, _size406);
            this->update_expr_array.resize(_size406);
            uint32_t _i410;
            for (_i410 = 0; _i410 < _size406; ++_i410)
            {
              xfer += this->update_expr_array[_i410].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.update_expr_array = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UpdateRequest");

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("where_expr", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->where_expr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("update_expr_array", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->update_expr_array.size()));
    std::vector<UpdateExpr> ::const_iterator _iter411;
    for (_iter411 = this->update_expr_array.begin(); _iter411 != this->update_expr_array.end(); ++_iter411)
    {
      xfer += (*_iter411).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateRequest &a, UpdateRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.where_expr, b.where_expr);
  swap(a.update_expr_array, b.update_expr_array);
  swap(a.session_id, b.session_id);
  swap(a.__isset, b.__isset);
}

UpdateRequest::UpdateRequest(const UpdateRequest& other412) {
  db_name = other412.db_name;
  table_name = other412.table_name;
  where_expr = other412.where_expr;
  update_expr_array = other412.update_expr_array;
  session_id = other412.session_id;
  __isset = other412.__isset;
}
UpdateRequest& UpdateRequest::operator=(const UpdateRequest& other413) {
  db_name = other413.db_name;
  table_name = other413.table_name;
  where_expr = other413.where_expr;
  update_expr_array = other413.update_expr_array;
  session_id = other413.session_id;
  __isset = other413.__isset;
  return *this;
}
void UpdateRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UpdateRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "where_expr=" << to_string(where_expr);
  out << ", " << "update_expr_array=" << to_string(update_expr_array);
  out << ", " << "session_id=" << to_string(session_id);
  out << ")";
}


ShowTablesRequest::~ShowTablesRequest() noexcept {
}


void ShowTablesRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ShowTablesRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}
std::ostream& operator<<(std::ostream& out, const ShowTablesRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowTablesRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowTablesRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowTablesRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowTablesRequest &a, ShowTablesRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.__isset, b.__isset);
}

ShowTablesRequest::ShowTablesRequest(const ShowTablesRequest& other414) {
  session_id = other414.session_id;
  db_name = other414.db_name;
  __isset = other414.__isset;
}
ShowTablesRequest& ShowTablesRequest::operator=(const ShowTablesRequest& other415) {
  session_id = other415.session_id;
  db_name = other415.db_name;
  __isset = other415.__isset;
  return *this;
}
void ShowTablesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowTablesRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ")";
}


ShowSegmentsRequest::~ShowSegmentsRequest() noexcept {
}


void ShowSegmentsRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ShowSegmentsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowSegmentsRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}
std::ostream& operator<<(std::ostream& out, const ShowSegmentsRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowSegmentsRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowSegmentsRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowSegmentsRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowSegmentsRequest &a, ShowSegmentsRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.__isset, b.__isset);
}

ShowSegmentsRequest::ShowSegmentsRequest(const ShowSegmentsRequest& other416) {
  session_id = other416.session_id;
  db_name = other416.db_name;
  table_name = other416.table_name;
  __isset = other416.__isset;
}
ShowSegmentsRequest& ShowSegmentsRequest::operator=(const ShowSegmentsRequest& other417) {
  session_id = other417.session_id;
  db_name = other417.db_name;
  table_name = other417.table_name;
  __isset = other417.__isset;
  return *this;
}
void ShowSegmentsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowSegmentsRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ")";
}


ShowSegmentRequest::~ShowSegmentRequest() noexcept {
}


void ShowSegmentRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ShowSegmentRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowSegmentRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowSegmentRequest::__set_segment_id(const int64_t val) {
  this->segment_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowSegmentRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowSegmentRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->segment_id);
          this->__isset.segment_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowSegmentRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowSegmentRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->segment_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowSegmentRequest &a, ShowSegmentRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.segment_id, b.segment_id);
  swap(a.__isset, b.__isset);
}

ShowSegmentRequest::ShowSegmentRequest(const ShowSegmentRequest& other418) {
  session_id = other418.session_id;
  db_name = other418.db_name;
  table_name = other418.table_name;
  segment_id = other418.segment_id;
  __isset = other418.__isset;
}
ShowSegmentRequest& ShowSegmentRequest::operator=(const ShowSegmentRequest& other419) {
  session_id = other419.session_id;
  db_name = other419.db_name;
  table_name = other419.table_name;
  segment_id = other419.segment_id;
  __isset = other419.__isset;
  return *this;
}
void ShowSegmentRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowSegmentRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "segment_id=" << to_string(segment_id);
  out << ")";
}


ShowSegmentResponse::~ShowSegmentResponse() noexcept {
}


void ShowSegmentResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ShowSegmentResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ShowSegmentResponse::__set_segment_id(const int64_t val) {
  this->segment_id = val;
}

void ShowSegmentResponse::__set_status(const std::string& val) {
  this->status = val;
}

void ShowSegmentResponse::__set_path(const std::string& val) {
  this->path = val;
}

void ShowSegmentResponse::__set_size(const std::string& val) {
  this->size = val;
}

void ShowSegmentResponse::__set_block_count(const int64_t val) {
  this->block_count = val;
}

void ShowSegmentResponse::__set_row_capacity(const int64_t val) {
  this->row_capacity = val;
}

void ShowSegmentResponse::__set_row_count(const int64_t val) {
  this->row_count = val;
}

void ShowSegmentResponse::__set_room(const int64_t val) {
  this->room = val;
}

void ShowSegmentResponse::__set_column_count(const int64_t val) {
  this->column_count = val;
}
std::ostream& operator<<(std::ostream& out, const ShowSegmentResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowSegmentResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->segment_id);
          this->__isset.segment_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->block_count);
          this->__isset.block_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->row_capacity);
          this->__isset.row_capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->row_count);
          this->__isset.row_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->room);
          this->__isset.room = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->column_count);
          this->__isset.column_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowSegmentResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowSegmentResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->segment_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("block_count", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->block_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_capacity", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->row_capacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_count", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->row_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("room", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->room);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_count", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->column_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowSegmentResponse &a, ShowSegmentResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.segment_id, b.segment_id);
  swap(a.status, b.status);
  swap(a.path, b.path);
  swap(a.size, b.size);
  swap(a.block_count, b.block_count);
  swap(a.row_capacity, b.row_capacity);
  swap(a.row_count, b.row_count);
  swap(a.room, b.room);
  swap(a.column_count, b.column_count);
  swap(a.__isset, b.__isset);
}

ShowSegmentResponse::ShowSegmentResponse(const ShowSegmentResponse& other420) {
  error_code = other420.error_code;
  error_msg = other420.error_msg;
  segment_id = other420.segment_id;
  status = other420.status;
  path = other420.path;
  size = other420.size;
  block_count = other420.block_count;
  row_capacity = other420.row_capacity;
  row_count = other420.row_count;
  room = other420.room;
  column_count = other420.column_count;
  __isset = other420.__isset;
}
ShowSegmentResponse& ShowSegmentResponse::operator=(const ShowSegmentResponse& other421) {
  error_code = other421.error_code;
  error_msg = other421.error_msg;
  segment_id = other421.segment_id;
  status = other421.status;
  path = other421.path;
  size = other421.size;
  block_count = other421.block_count;
  row_capacity = other421.row_capacity;
  row_count = other421.row_count;
  room = other421.room;
  column_count = other421.column_count;
  __isset = other421.__isset;
  return *this;
}
void ShowSegmentResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowSegmentResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "segment_id=" << to_string(segment_id);
  out << ", " << "status=" << to_string(status);
  out << ", " << "path=" << to_string(path);
  out << ", " << "size=" << to_string(size);
  out << ", " << "block_count=" << to_string(block_count);
  out << ", " << "row_capacity=" << to_string(row_capacity);
  out << ", " << "row_count=" << to_string(row_count);
  out << ", " << "room=" << to_string(room);
  out << ", " << "column_count=" << to_string(column_count);
  out << ")";
}


ShowBlocksRequest::~ShowBlocksRequest() noexcept {
}


void ShowBlocksRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ShowBlocksRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowBlocksRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowBlocksRequest::__set_segment_id(const int64_t val) {
  this->segment_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowBlocksRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowBlocksRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->segment_id);
          this->__isset.segment_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowBlocksRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowBlocksRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->segment_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowBlocksRequest &a, ShowBlocksRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.segment_id, b.segment_id);
  swap(a.__isset, b.__isset);
}

ShowBlocksRequest::ShowBlocksRequest(const ShowBlocksRequest& other422) {
  session_id = other422.session_id;
  db_name = other422.db_name;
  table_name = other422.table_name;
  segment_id = other422.segment_id;
  __isset = other422.__isset;
}
ShowBlocksRequest& ShowBlocksRequest::operator=(const ShowBlocksRequest& other423) {
  session_id = other423.session_id;
  db_name = other423.db_name;
  table_name = other423.table_name;
  segment_id = other423.segment_id;
  __isset = other423.__isset;
  return *this;
}
void ShowBlocksRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowBlocksRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "segment_id=" << to_string(segment_id);
  out << ")";
}


ShowBlockRequest::~ShowBlockRequest() noexcept {
}


void ShowBlockRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ShowBlockRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowBlockRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowBlockRequest::__set_segment_id(const int64_t val) {
  this->segment_id = val;
}

void ShowBlockRequest::__set_block_id(const int64_t val) {
  this->block_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowBlockRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowBlockRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->segment_id);
          this->__isset.segment_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->block_id);
          this->__isset.block_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowBlockRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowBlockRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->segment_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->block_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowBlockRequest &a, ShowBlockRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.segment_id, b.segment_id);
  swap(a.block_id, b.block_id);
  swap(a.__isset, b.__isset);
}

ShowBlockRequest::ShowBlockRequest(const ShowBlockRequest& other424) {
  session_id = other424.session_id;
  db_name = other424.db_name;
  table_name = other424.table_name;
  segment_id = other424.segment_id;
  block_id = other424.block_id;
  __isset = other424.__isset;
}
ShowBlockRequest& ShowBlockRequest::operator=(const ShowBlockRequest& other425) {
  session_id = other425.session_id;
  db_name = other425.db_name;
  table_name = other425.table_name;
  segment_id = other425.segment_id;
  block_id = other425.block_id;
  __isset = other425.__isset;
  return *this;
}
void ShowBlockRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowBlockRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "segment_id=" << to_string(segment_id);
  out << ", " << "block_id=" << to_string(block_id);
  out << ")";
}


ShowBlockResponse::~ShowBlockResponse() noexcept {
}


void ShowBlockResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ShowBlockResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ShowBlockResponse::__set_block_id(const int64_t val) {
  this->block_id = val;
}

void ShowBlockResponse::__set_path(const std::string& val) {
  this->path = val;
}

void ShowBlockResponse::__set_size(const std::string& val) {
  this->size = val;
}

void ShowBlockResponse::__set_row_capacity(const int64_t val) {
  this->row_capacity = val;
}

void ShowBlockResponse::__set_row_count(const int64_t val) {
  this->row_count = val;
}

void ShowBlockResponse::__set_column_count(const int64_t val) {
  this->column_count = val;
}
std::ostream& operator<<(std::ostream& out, const ShowBlockResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowBlockResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->block_id);
          this->__isset.block_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->row_capacity);
          this->__isset.row_capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->row_count);
          this->__isset.row_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->column_count);
          this->__isset.column_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowBlockResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowBlockResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->block_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_capacity", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->row_capacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("row_count", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->row_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_count", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->column_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowBlockResponse &a, ShowBlockResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.block_id, b.block_id);
  swap(a.path, b.path);
  swap(a.size, b.size);
  swap(a.row_capacity, b.row_capacity);
  swap(a.row_count, b.row_count);
  swap(a.column_count, b.column_count);
  swap(a.__isset, b.__isset);
}

ShowBlockResponse::ShowBlockResponse(const ShowBlockResponse& other426) {
  error_code = other426.error_code;
  error_msg = other426.error_msg;
  block_id = other426.block_id;
  path = other426.path;
  size = other426.size;
  row_capacity = other426.row_capacity;
  row_count = other426.row_count;
  column_count = other426.column_count;
  __isset = other426.__isset;
}
ShowBlockResponse& ShowBlockResponse::operator=(const ShowBlockResponse& other427) {
  error_code = other427.error_code;
  error_msg = other427.error_msg;
  block_id = other427.block_id;
  path = other427.path;
  size = other427.size;
  row_capacity = other427.row_capacity;
  row_count = other427.row_count;
  column_count = other427.column_count;
  __isset = other427.__isset;
  return *this;
}
void ShowBlockResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowBlockResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "block_id=" << to_string(block_id);
  out << ", " << "path=" << to_string(path);
  out << ", " << "size=" << to_string(size);
  out << ", " << "row_capacity=" << to_string(row_capacity);
  out << ", " << "row_count=" << to_string(row_count);
  out << ", " << "column_count=" << to_string(column_count);
  out << ")";
}


ShowBlockColumnRequest::~ShowBlockColumnRequest() noexcept {
}


void ShowBlockColumnRequest::__set_session_id(const int64_t val) {
  this->session_id = val;
}

void ShowBlockColumnRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void ShowBlockColumnRequest::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void ShowBlockColumnRequest::__set_segment_id(const int64_t val) {
  this->segment_id = val;
}

void ShowBlockColumnRequest::__set_block_id(const int64_t val) {
  this->block_id = val;
}

void ShowBlockColumnRequest::__set_column_id(const int64_t val) {
  this->column_id = val;
}
std::ostream& operator<<(std::ostream& out, const ShowBlockColumnRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowBlockColumnRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          this->__isset.db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          this->__isset.table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->segment_id);
          this->__isset.segment_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->block_id);
          this->__isset.block_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->column_id);
          this->__isset.column_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowBlockColumnRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowBlockColumnRequest");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segment_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->segment_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->block_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_id", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->column_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowBlockColumnRequest &a, ShowBlockColumnRequest &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
  swap(a.segment_id, b.segment_id);
  swap(a.block_id, b.block_id);
  swap(a.column_id, b.column_id);
  swap(a.__isset, b.__isset);
}

ShowBlockColumnRequest::ShowBlockColumnRequest(const ShowBlockColumnRequest& other428) {
  session_id = other428.session_id;
  db_name = other428.db_name;
  table_name = other428.table_name;
  segment_id = other428.segment_id;
  block_id = other428.block_id;
  column_id = other428.column_id;
  __isset = other428.__isset;
}
ShowBlockColumnRequest& ShowBlockColumnRequest::operator=(const ShowBlockColumnRequest& other429) {
  session_id = other429.session_id;
  db_name = other429.db_name;
  table_name = other429.table_name;
  segment_id = other429.segment_id;
  block_id = other429.block_id;
  column_id = other429.column_id;
  __isset = other429.__isset;
  return *this;
}
void ShowBlockColumnRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowBlockColumnRequest(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "segment_id=" << to_string(segment_id);
  out << ", " << "block_id=" << to_string(block_id);
  out << ", " << "column_id=" << to_string(column_id);
  out << ")";
}


ShowBlockColumnResponse::~ShowBlockColumnResponse() noexcept {
}


void ShowBlockColumnResponse::__set_error_code(const int64_t val) {
  this->error_code = val;
}

void ShowBlockColumnResponse::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

void ShowBlockColumnResponse::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void ShowBlockColumnResponse::__set_column_id(const int64_t val) {
  this->column_id = val;
}

void ShowBlockColumnResponse::__set_data_type(const std::string& val) {
  this->data_type = val;
}

void ShowBlockColumnResponse::__set_path(const std::string& val) {
  this->path = val;
}

void ShowBlockColumnResponse::__set_extra_file_count(const int64_t val) {
  this->extra_file_count = val;
}

void ShowBlockColumnResponse::__set_extra_file_names(const std::string& val) {
  this->extra_file_names = val;
}
std::ostream& operator<<(std::ostream& out, const ShowBlockColumnResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ShowBlockColumnResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_name);
          this->__isset.column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->column_id);
          this->__isset.column_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data_type);
          this->__isset.data_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->extra_file_count);
          this->__isset.extra_file_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extra_file_names);
          this->__isset.extra_file_names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ShowBlockColumnResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ShowBlockColumnResponse");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->column_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("column_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->column_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data_type", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->data_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra_file_count", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->extra_file_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra_file_names", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->extra_file_names);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ShowBlockColumnResponse &a, ShowBlockColumnResponse &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.column_name, b.column_name);
  swap(a.column_id, b.column_id);
  swap(a.data_type, b.data_type);
  swap(a.path, b.path);
  swap(a.extra_file_count, b.extra_file_count);
  swap(a.extra_file_names, b.extra_file_names);
  swap(a.__isset, b.__isset);
}

ShowBlockColumnResponse::ShowBlockColumnResponse(const ShowBlockColumnResponse& other430) {
  error_code = other430.error_code;
  error_msg = other430.error_msg;
  column_name = other430.column_name;
  column_id = other430.column_id;
  data_type = other430.data_type;
  path = other430.path;
  extra_file_count = other430.extra_file_count;
  extra_file_names = other430.extra_file_names;
  __isset = other430.__isset;
}
ShowBlockColumnResponse& ShowBlockColumnResponse::operator=(const ShowBlockColumnResponse& other431) {
  error_code = other431.error_code;
  error_msg = other431.error_msg;
  column_name = other431.column_name;
  column_id = other431.column_id;
  data_type = other431.data_type;
  path = other431.path;
  extra_file_count = other431.extra_file_count;
  extra_file_names = other431.extra_file_names;
  __isset = other431.__isset;
  return *this;
}
void ShowBlockColumnResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowBlockColumnResponse(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "column_id=" << to_string(column_id);
  out << ", " << "data_type=" << to_string(data_type);
  out << ", " << "path=" << to_string(path);
  out << ", " << "extra_file_count=" << to_string(extra_file_count);
  out << ", " << "extra_file_names=" << to_string(extra_file_names);
  out << ")";
}

} // namespace
