/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Calculator_H
#define Calculator_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "tutorial_types.h"
#include "SharedService.h"

namespace tutorial {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

/**
 * Ahh, now onto the cool part, defining a service. Services just need a name
 * and can optionally inherit from another service using the extends keyword.
 */
class CalculatorIf : virtual public  ::shared::SharedServiceIf {
 public:
  virtual ~CalculatorIf() {}

  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   */
  virtual void ping() = 0;
  virtual int32_t add(const int32_t num1, const int32_t num2) = 0;
  virtual int32_t calculate(const int32_t logid, const Work& w) = 0;

  /**
   * This method has a oneway modifier. That means the client only makes
   * a request and does not listen for any response at all. Oneway methods
   * must be void.
   */
  virtual void zip() = 0;
  virtual void Connect(CommonResponse& _return) = 0;
  virtual void Disconnect(CommonResponse& _return, const CommonRequest& request) = 0;
  virtual void CreateDatabase(CommonResponse& _return, const CreateDatabaseRequest& request) = 0;
  virtual void DropDatabase(CommonResponse& _return, const DropDatabaseRequest& request) = 0;
};

class CalculatorIfFactory : virtual public  ::shared::SharedServiceIfFactory {
 public:
  typedef CalculatorIf Handler;

  virtual ~CalculatorIfFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override = 0;
  virtual void releaseHandler( ::shared::SharedServiceIf* /* handler */) override = 0;
  };

class CalculatorIfSingletonFactory : virtual public CalculatorIfFactory {
 public:
  CalculatorIfSingletonFactory(const ::std::shared_ptr<CalculatorIf>& iface) : iface_(iface) {}
  virtual ~CalculatorIfSingletonFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler( ::shared::SharedServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<CalculatorIf> iface_;
};

class CalculatorNull : virtual public CalculatorIf , virtual public  ::shared::SharedServiceNull {
 public:
  virtual ~CalculatorNull() {}
  void ping() override {
    return;
  }
  int32_t add(const int32_t /* num1 */, const int32_t /* num2 */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t calculate(const int32_t /* logid */, const Work& /* w */) override {
    int32_t _return = 0;
    return _return;
  }
  void zip() override {
    return;
  }
  void Connect(CommonResponse& /* _return */) override {
    return;
  }
  void Disconnect(CommonResponse& /* _return */, const CommonRequest& /* request */) override {
    return;
  }
  void CreateDatabase(CommonResponse& /* _return */, const CreateDatabaseRequest& /* request */) override {
    return;
  }
  void DropDatabase(CommonResponse& /* _return */, const DropDatabaseRequest& /* request */) override {
    return;
  }
};


class Calculator_ping_args {
 public:

  Calculator_ping_args(const Calculator_ping_args&) noexcept;
  Calculator_ping_args& operator=(const Calculator_ping_args&) noexcept;
  Calculator_ping_args() noexcept {
  }

  virtual ~Calculator_ping_args() noexcept;

  bool operator == (const Calculator_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_ping_pargs {
 public:


  virtual ~Calculator_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_ping_result {
 public:

  Calculator_ping_result(const Calculator_ping_result&) noexcept;
  Calculator_ping_result& operator=(const Calculator_ping_result&) noexcept;
  Calculator_ping_result() noexcept {
  }

  virtual ~Calculator_ping_result() noexcept;

  bool operator == (const Calculator_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_ping_presult {
 public:


  virtual ~Calculator_ping_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_add_args__isset {
  _Calculator_add_args__isset() : num1(false), num2(false) {}
  bool num1 :1;
  bool num2 :1;
} _Calculator_add_args__isset;

class Calculator_add_args {
 public:

  Calculator_add_args(const Calculator_add_args&) noexcept;
  Calculator_add_args& operator=(const Calculator_add_args&) noexcept;
  Calculator_add_args() noexcept
                      : num1(0),
                        num2(0) {
  }

  virtual ~Calculator_add_args() noexcept;
  int32_t num1;
  int32_t num2;

  _Calculator_add_args__isset __isset;

  void __set_num1(const int32_t val);

  void __set_num2(const int32_t val);

  bool operator == (const Calculator_add_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    return true;
  }
  bool operator != (const Calculator_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_add_pargs {
 public:


  virtual ~Calculator_add_pargs() noexcept;
  const int32_t* num1;
  const int32_t* num2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_add_result__isset {
  _Calculator_add_result__isset() : success(false) {}
  bool success :1;
} _Calculator_add_result__isset;

class Calculator_add_result {
 public:

  Calculator_add_result(const Calculator_add_result&) noexcept;
  Calculator_add_result& operator=(const Calculator_add_result&) noexcept;
  Calculator_add_result() noexcept
                        : success(0) {
  }

  virtual ~Calculator_add_result() noexcept;
  int32_t success;

  _Calculator_add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Calculator_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_add_presult__isset {
  _Calculator_add_presult__isset() : success(false) {}
  bool success :1;
} _Calculator_add_presult__isset;

class Calculator_add_presult {
 public:


  virtual ~Calculator_add_presult() noexcept;
  int32_t* success;

  _Calculator_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_calculate_args__isset {
  _Calculator_calculate_args__isset() : logid(false), w(false) {}
  bool logid :1;
  bool w :1;
} _Calculator_calculate_args__isset;

class Calculator_calculate_args {
 public:

  Calculator_calculate_args(const Calculator_calculate_args&);
  Calculator_calculate_args& operator=(const Calculator_calculate_args&);
  Calculator_calculate_args() noexcept
                            : logid(0) {
  }

  virtual ~Calculator_calculate_args() noexcept;
  int32_t logid;
  Work w;

  _Calculator_calculate_args__isset __isset;

  void __set_logid(const int32_t val);

  void __set_w(const Work& val);

  bool operator == (const Calculator_calculate_args & rhs) const
  {
    if (!(logid == rhs.logid))
      return false;
    if (!(w == rhs.w))
      return false;
    return true;
  }
  bool operator != (const Calculator_calculate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_calculate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_calculate_pargs {
 public:


  virtual ~Calculator_calculate_pargs() noexcept;
  const int32_t* logid;
  const Work* w;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_calculate_result__isset {
  _Calculator_calculate_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Calculator_calculate_result__isset;

class Calculator_calculate_result {
 public:

  Calculator_calculate_result(const Calculator_calculate_result&);
  Calculator_calculate_result& operator=(const Calculator_calculate_result&);
  Calculator_calculate_result() noexcept
                              : success(0) {
  }

  virtual ~Calculator_calculate_result() noexcept;
  int32_t success;
  InvalidOperation ouch;

  _Calculator_calculate_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const Calculator_calculate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Calculator_calculate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_calculate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_calculate_presult__isset {
  _Calculator_calculate_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Calculator_calculate_presult__isset;

class Calculator_calculate_presult {
 public:


  virtual ~Calculator_calculate_presult() noexcept;
  int32_t* success;
  InvalidOperation ouch;

  _Calculator_calculate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Calculator_zip_args {
 public:

  Calculator_zip_args(const Calculator_zip_args&) noexcept;
  Calculator_zip_args& operator=(const Calculator_zip_args&) noexcept;
  Calculator_zip_args() noexcept {
  }

  virtual ~Calculator_zip_args() noexcept;

  bool operator == (const Calculator_zip_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_zip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_zip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_zip_pargs {
 public:


  virtual ~Calculator_zip_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_Connect_args {
 public:

  Calculator_Connect_args(const Calculator_Connect_args&) noexcept;
  Calculator_Connect_args& operator=(const Calculator_Connect_args&) noexcept;
  Calculator_Connect_args() noexcept {
  }

  virtual ~Calculator_Connect_args() noexcept;

  bool operator == (const Calculator_Connect_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_Connect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_Connect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_Connect_pargs {
 public:


  virtual ~Calculator_Connect_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_Connect_result__isset {
  _Calculator_Connect_result__isset() : success(false) {}
  bool success :1;
} _Calculator_Connect_result__isset;

class Calculator_Connect_result {
 public:

  Calculator_Connect_result(const Calculator_Connect_result&);
  Calculator_Connect_result& operator=(const Calculator_Connect_result&);
  Calculator_Connect_result() noexcept {
  }

  virtual ~Calculator_Connect_result() noexcept;
  CommonResponse success;

  _Calculator_Connect_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const Calculator_Connect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_Connect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_Connect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_Connect_presult__isset {
  _Calculator_Connect_presult__isset() : success(false) {}
  bool success :1;
} _Calculator_Connect_presult__isset;

class Calculator_Connect_presult {
 public:


  virtual ~Calculator_Connect_presult() noexcept;
  CommonResponse* success;

  _Calculator_Connect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_Disconnect_args__isset {
  _Calculator_Disconnect_args__isset() : request(false) {}
  bool request :1;
} _Calculator_Disconnect_args__isset;

class Calculator_Disconnect_args {
 public:

  Calculator_Disconnect_args(const Calculator_Disconnect_args&) noexcept;
  Calculator_Disconnect_args& operator=(const Calculator_Disconnect_args&) noexcept;
  Calculator_Disconnect_args() noexcept {
  }

  virtual ~Calculator_Disconnect_args() noexcept;
  CommonRequest request;

  _Calculator_Disconnect_args__isset __isset;

  void __set_request(const CommonRequest& val);

  bool operator == (const Calculator_Disconnect_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Calculator_Disconnect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_Disconnect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_Disconnect_pargs {
 public:


  virtual ~Calculator_Disconnect_pargs() noexcept;
  const CommonRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_Disconnect_result__isset {
  _Calculator_Disconnect_result__isset() : success(false) {}
  bool success :1;
} _Calculator_Disconnect_result__isset;

class Calculator_Disconnect_result {
 public:

  Calculator_Disconnect_result(const Calculator_Disconnect_result&);
  Calculator_Disconnect_result& operator=(const Calculator_Disconnect_result&);
  Calculator_Disconnect_result() noexcept {
  }

  virtual ~Calculator_Disconnect_result() noexcept;
  CommonResponse success;

  _Calculator_Disconnect_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const Calculator_Disconnect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_Disconnect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_Disconnect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_Disconnect_presult__isset {
  _Calculator_Disconnect_presult__isset() : success(false) {}
  bool success :1;
} _Calculator_Disconnect_presult__isset;

class Calculator_Disconnect_presult {
 public:


  virtual ~Calculator_Disconnect_presult() noexcept;
  CommonResponse* success;

  _Calculator_Disconnect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_CreateDatabase_args__isset {
  _Calculator_CreateDatabase_args__isset() : request(false) {}
  bool request :1;
} _Calculator_CreateDatabase_args__isset;

class Calculator_CreateDatabase_args {
 public:

  Calculator_CreateDatabase_args(const Calculator_CreateDatabase_args&);
  Calculator_CreateDatabase_args& operator=(const Calculator_CreateDatabase_args&);
  Calculator_CreateDatabase_args() noexcept {
  }

  virtual ~Calculator_CreateDatabase_args() noexcept;
  CreateDatabaseRequest request;

  _Calculator_CreateDatabase_args__isset __isset;

  void __set_request(const CreateDatabaseRequest& val);

  bool operator == (const Calculator_CreateDatabase_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Calculator_CreateDatabase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_CreateDatabase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_CreateDatabase_pargs {
 public:


  virtual ~Calculator_CreateDatabase_pargs() noexcept;
  const CreateDatabaseRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_CreateDatabase_result__isset {
  _Calculator_CreateDatabase_result__isset() : success(false) {}
  bool success :1;
} _Calculator_CreateDatabase_result__isset;

class Calculator_CreateDatabase_result {
 public:

  Calculator_CreateDatabase_result(const Calculator_CreateDatabase_result&);
  Calculator_CreateDatabase_result& operator=(const Calculator_CreateDatabase_result&);
  Calculator_CreateDatabase_result() noexcept {
  }

  virtual ~Calculator_CreateDatabase_result() noexcept;
  CommonResponse success;

  _Calculator_CreateDatabase_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const Calculator_CreateDatabase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_CreateDatabase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_CreateDatabase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_CreateDatabase_presult__isset {
  _Calculator_CreateDatabase_presult__isset() : success(false) {}
  bool success :1;
} _Calculator_CreateDatabase_presult__isset;

class Calculator_CreateDatabase_presult {
 public:


  virtual ~Calculator_CreateDatabase_presult() noexcept;
  CommonResponse* success;

  _Calculator_CreateDatabase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_DropDatabase_args__isset {
  _Calculator_DropDatabase_args__isset() : request(false) {}
  bool request :1;
} _Calculator_DropDatabase_args__isset;

class Calculator_DropDatabase_args {
 public:

  Calculator_DropDatabase_args(const Calculator_DropDatabase_args&);
  Calculator_DropDatabase_args& operator=(const Calculator_DropDatabase_args&);
  Calculator_DropDatabase_args() noexcept {
  }

  virtual ~Calculator_DropDatabase_args() noexcept;
  DropDatabaseRequest request;

  _Calculator_DropDatabase_args__isset __isset;

  void __set_request(const DropDatabaseRequest& val);

  bool operator == (const Calculator_DropDatabase_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Calculator_DropDatabase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_DropDatabase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_DropDatabase_pargs {
 public:


  virtual ~Calculator_DropDatabase_pargs() noexcept;
  const DropDatabaseRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_DropDatabase_result__isset {
  _Calculator_DropDatabase_result__isset() : success(false) {}
  bool success :1;
} _Calculator_DropDatabase_result__isset;

class Calculator_DropDatabase_result {
 public:

  Calculator_DropDatabase_result(const Calculator_DropDatabase_result&);
  Calculator_DropDatabase_result& operator=(const Calculator_DropDatabase_result&);
  Calculator_DropDatabase_result() noexcept {
  }

  virtual ~Calculator_DropDatabase_result() noexcept;
  CommonResponse success;

  _Calculator_DropDatabase_result__isset __isset;

  void __set_success(const CommonResponse& val);

  bool operator == (const Calculator_DropDatabase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_DropDatabase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_DropDatabase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_DropDatabase_presult__isset {
  _Calculator_DropDatabase_presult__isset() : success(false) {}
  bool success :1;
} _Calculator_DropDatabase_presult__isset;

class Calculator_DropDatabase_presult {
 public:


  virtual ~Calculator_DropDatabase_presult() noexcept;
  CommonResponse* success;

  _Calculator_DropDatabase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalculatorClient : virtual public CalculatorIf, public  ::shared::SharedServiceClient {
 public:
  CalculatorClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::shared::SharedServiceClient(prot, prot) {}
  CalculatorClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::shared::SharedServiceClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   */
  void ping() override;
  void send_ping();
  void recv_ping();
  int32_t add(const int32_t num1, const int32_t num2) override;
  void send_add(const int32_t num1, const int32_t num2);
  int32_t recv_add();
  int32_t calculate(const int32_t logid, const Work& w) override;
  void send_calculate(const int32_t logid, const Work& w);
  int32_t recv_calculate();
  /**
   * This method has a oneway modifier. That means the client only makes
   * a request and does not listen for any response at all. Oneway methods
   * must be void.
   */
  void zip() override;
  void send_zip();
  void Connect(CommonResponse& _return) override;
  void send_Connect();
  void recv_Connect(CommonResponse& _return);
  void Disconnect(CommonResponse& _return, const CommonRequest& request) override;
  void send_Disconnect(const CommonRequest& request);
  void recv_Disconnect(CommonResponse& _return);
  void CreateDatabase(CommonResponse& _return, const CreateDatabaseRequest& request) override;
  void send_CreateDatabase(const CreateDatabaseRequest& request);
  void recv_CreateDatabase(CommonResponse& _return);
  void DropDatabase(CommonResponse& _return, const DropDatabaseRequest& request) override;
  void send_DropDatabase(const DropDatabaseRequest& request);
  void recv_DropDatabase(CommonResponse& _return);
};

class CalculatorProcessor : public  ::shared::SharedServiceProcessor {
 protected:
  ::std::shared_ptr<CalculatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (CalculatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_calculate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_zip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Connect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Disconnect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateDatabase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DropDatabase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalculatorProcessor(::std::shared_ptr<CalculatorIf> iface) :
     ::shared::SharedServiceProcessor(iface),
    iface_(iface) {
    processMap_["ping"] = &CalculatorProcessor::process_ping;
    processMap_["add"] = &CalculatorProcessor::process_add;
    processMap_["calculate"] = &CalculatorProcessor::process_calculate;
    processMap_["zip"] = &CalculatorProcessor::process_zip;
    processMap_["Connect"] = &CalculatorProcessor::process_Connect;
    processMap_["Disconnect"] = &CalculatorProcessor::process_Disconnect;
    processMap_["CreateDatabase"] = &CalculatorProcessor::process_CreateDatabase;
    processMap_["DropDatabase"] = &CalculatorProcessor::process_DropDatabase;
  }

  virtual ~CalculatorProcessor() {}
};

class CalculatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalculatorProcessorFactory(const ::std::shared_ptr< CalculatorIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< CalculatorIfFactory > handlerFactory_;
};

class CalculatorMultiface : virtual public CalculatorIf, public  ::shared::SharedServiceMultiface {
 public:
  CalculatorMultiface(std::vector<std::shared_ptr<CalculatorIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<CalculatorIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::shared::SharedServiceMultiface::add(*iter);
    }
  }
  virtual ~CalculatorMultiface() {}
 protected:
  std::vector<std::shared_ptr<CalculatorIf> > ifaces_;
  CalculatorMultiface() {}
  void add(::std::shared_ptr<CalculatorIf> iface) {
     ::shared::SharedServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   */
  void ping() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  int32_t add(const int32_t num1, const int32_t num2) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(num1, num2);
    }
    return ifaces_[i]->add(num1, num2);
  }

  int32_t calculate(const int32_t logid, const Work& w) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->calculate(logid, w);
    }
    return ifaces_[i]->calculate(logid, w);
  }

  /**
   * This method has a oneway modifier. That means the client only makes
   * a request and does not listen for any response at all. Oneway methods
   * must be void.
   */
  void zip() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->zip();
    }
    ifaces_[i]->zip();
  }

  void Connect(CommonResponse& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Connect(_return);
    }
    ifaces_[i]->Connect(_return);
    return;
  }

  void Disconnect(CommonResponse& _return, const CommonRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Disconnect(_return, request);
    }
    ifaces_[i]->Disconnect(_return, request);
    return;
  }

  void CreateDatabase(CommonResponse& _return, const CreateDatabaseRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateDatabase(_return, request);
    }
    ifaces_[i]->CreateDatabase(_return, request);
    return;
  }

  void DropDatabase(CommonResponse& _return, const DropDatabaseRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DropDatabase(_return, request);
    }
    ifaces_[i]->DropDatabase(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CalculatorConcurrentClient : virtual public CalculatorIf, public  ::shared::SharedServiceConcurrentClient {
 public:
  CalculatorConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
     ::shared::SharedServiceConcurrentClient(prot, prot, sync) {}
  CalculatorConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) :     ::shared::SharedServiceConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   */
  void ping() override;
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  int32_t add(const int32_t num1, const int32_t num2) override;
  int32_t send_add(const int32_t num1, const int32_t num2);
  int32_t recv_add(const int32_t seqid);
  int32_t calculate(const int32_t logid, const Work& w) override;
  int32_t send_calculate(const int32_t logid, const Work& w);
  int32_t recv_calculate(const int32_t seqid);
  /**
   * This method has a oneway modifier. That means the client only makes
   * a request and does not listen for any response at all. Oneway methods
   * must be void.
   */
  void zip() override;
  void send_zip();
  void Connect(CommonResponse& _return) override;
  int32_t send_Connect();
  void recv_Connect(CommonResponse& _return, const int32_t seqid);
  void Disconnect(CommonResponse& _return, const CommonRequest& request) override;
  int32_t send_Disconnect(const CommonRequest& request);
  void recv_Disconnect(CommonResponse& _return, const int32_t seqid);
  void CreateDatabase(CommonResponse& _return, const CreateDatabaseRequest& request) override;
  int32_t send_CreateDatabase(const CreateDatabaseRequest& request);
  void recv_CreateDatabase(CommonResponse& _return, const int32_t seqid);
  void DropDatabase(CommonResponse& _return, const DropDatabaseRequest& request) override;
  int32_t send_DropDatabase(const DropDatabaseRequest& request);
  void recv_DropDatabase(CommonResponse& _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
