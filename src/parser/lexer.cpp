#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define sql_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer sql_create_buffer
#endif

#ifdef yy_delete_buffer
#define sql_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer sql_delete_buffer
#endif

#ifdef yy_scan_buffer
#define sql_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer sql_scan_buffer
#endif

#ifdef yy_scan_string
#define sql_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string sql_scan_string
#endif

#ifdef yy_scan_bytes
#define sql_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes sql_scan_bytes
#endif

#ifdef yy_init_buffer
#define sql_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer sql_init_buffer
#endif

#ifdef yy_flush_buffer
#define sql_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer sql_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define sql_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state sql_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define sql_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer sql_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define sqlpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state sqlpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define sqlpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state sqlpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define sqlensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack sqlensure_buffer_stack
#endif

#ifdef yylex
#define sqllex_ALREADY_DEFINED
#else
#define yylex sqllex
#endif

#ifdef yyrestart
#define sqlrestart_ALREADY_DEFINED
#else
#define yyrestart sqlrestart
#endif

#ifdef yylex_init
#define sqllex_init_ALREADY_DEFINED
#else
#define yylex_init sqllex_init
#endif

#ifdef yylex_init_extra
#define sqllex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra sqllex_init_extra
#endif

#ifdef yylex_destroy
#define sqllex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy sqllex_destroy
#endif

#ifdef yyget_debug
#define sqlget_debug_ALREADY_DEFINED
#else
#define yyget_debug sqlget_debug
#endif

#ifdef yyset_debug
#define sqlset_debug_ALREADY_DEFINED
#else
#define yyset_debug sqlset_debug
#endif

#ifdef yyget_extra
#define sqlget_extra_ALREADY_DEFINED
#else
#define yyget_extra sqlget_extra
#endif

#ifdef yyset_extra
#define sqlset_extra_ALREADY_DEFINED
#else
#define yyset_extra sqlset_extra
#endif

#ifdef yyget_in
#define sqlget_in_ALREADY_DEFINED
#else
#define yyget_in sqlget_in
#endif

#ifdef yyset_in
#define sqlset_in_ALREADY_DEFINED
#else
#define yyset_in sqlset_in
#endif

#ifdef yyget_out
#define sqlget_out_ALREADY_DEFINED
#else
#define yyget_out sqlget_out
#endif

#ifdef yyset_out
#define sqlset_out_ALREADY_DEFINED
#else
#define yyset_out sqlset_out
#endif

#ifdef yyget_leng
#define sqlget_leng_ALREADY_DEFINED
#else
#define yyget_leng sqlget_leng
#endif

#ifdef yyget_text
#define sqlget_text_ALREADY_DEFINED
#else
#define yyget_text sqlget_text
#endif

#ifdef yyget_lineno
#define sqlget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno sqlget_lineno
#endif

#ifdef yyset_lineno
#define sqlset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno sqlset_lineno
#endif

#ifdef yyget_column
#define sqlget_column_ALREADY_DEFINED
#else
#define yyget_column sqlget_column
#endif

#ifdef yyset_column
#define sqlset_column_ALREADY_DEFINED
#else
#define yyset_column sqlset_column
#endif

#ifdef yywrap
#define sqlwrap_ALREADY_DEFINED
#else
#define yywrap sqlwrap
#endif

/* %endif */

#ifdef yyget_lval
#define sqlget_lval_ALREADY_DEFINED
#else
#define yyget_lval sqlget_lval
#endif

#ifdef yyset_lval
#define sqlset_lval_ALREADY_DEFINED
#else
#define yyset_lval sqlset_lval
#endif

#ifdef yyget_lloc
#define sqlget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc sqlget_lloc
#endif

#ifdef yyset_lloc
#define sqlset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc sqlset_lloc
#endif

#ifdef yyalloc
#define sqlalloc_ALREADY_DEFINED
#else
#define yyalloc sqlalloc
#endif

#ifdef yyrealloc
#define sqlrealloc_ALREADY_DEFINED
#else
#define yyrealloc sqlrealloc
#endif

#ifdef yyfree
#define sqlfree_ALREADY_DEFINED
#else
#define yyfree sqlfree
#endif

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define sqlwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 167
#define YY_END_OF_BUFFER 168
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[570] =
    {   0,
        0,    0,  164,  164,  168,  166,    1,    1,  166,  166,
      156,  162,  156,  156,  159,  156,  156,  156,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  164,  165,    1,  152,    0,  159,  158,
      157,  154,  153,  151,  155,  161,  161,  161,    6,  161,
      161,  161,  161,  161,   18,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,   67,
       68,   77,  161,  161,  161,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  161,  161,   98,  161,   99,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  129,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  164,  163,
      160,  157,    2,  161,  161,    5,    8,    7,  161,  161,
       11,  161,  161,   14,  161,  161,  161,  161,  161,  161,
      161,  161,  161,   32,  161,  161,  161,  161,  161,  161,
      161,  161,   44,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,   73,  161,   79,   80,  161,

      161,  161,  161,   85,  161,  161,  161,  161,  161,   95,
      161,   96,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  112,  161,  161,  161,  161,  161,
      161,  161,  120,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  139,  161,  161,  161,  141,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,   15,  161,
      161,  161,   19,   20,  161,  161,  161,   24,  161,  161,
       27,   30,   33,  161,  161,  161,   40,  161,  161,   41,
       42,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,   57,   58,  161,  161,  161,  161,  161,

       64,  161,  161,  161,  161,  161,   76,   78,   81,   82,
      161,   84,  161,   87,  161,  161,  161,  161,   94,  161,
      161,  161,  161,  102,  161,  161,  161,  161,  161,  161,
      161,  161,  113,  161,  161,  161,  161,  161,  161,  123,
      161,  161,  161,  126,  127,  161,  132,  161,  161,  161,
      161,  138,  161,  161,  161,  144,  146,  161,  148,  149,
        3,  161,  161,  161,  161,   16,  161,  161,  161,  161,
      161,  161,   26,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,   51,   52,
       53,  161,  161,  161,  161,   61,  161,  161,   65,  161,

       69,   70,  161,  161,  161,   83,  161,   88,  161,   91,
      161,  161,  161,  100,  101,  161,  161,  105,  161,  161,
      161,  161,  111,  114,  161,  161,  161,  161,  161,  161,
      161,  130,  161,  161,  134,  161,  161,  136,  161,  161,
      161,  145,  147,  150,  161,  161,   10,   12,  161,   17,
       21,  161,  161,   25,  161,  161,  161,   37,  161,  161,
      161,   35,  161,   45,  161,   48,  161,   50,  161,   55,
      161,   59,   60,   62,   63,  161,   71,  161,  161,  161,
      161,   89,   92,  161,   97,  161,  161,  161,  161,  161,
      161,  161,  115,  116,  161,  118,  161,  161,  125,  131,

      161,  161,  135,  137,  140,  161,  143,    4,    9,   13,
      161,   23,  161,  161,   36,  161,  161,  161,  161,   47,
       49,   46,  161,   66,   72,  161,  161,   86,   90,   93,
      161,  161,  161,  106,  107,  108,  109,  117,  121,  119,
      161,  161,  133,  142,  161,   28,   31,  161,   39,   34,
      161,   56,  161,   75,   54,  103,  104,  110,  122,  124,
      161,  161,   29,   38,   43,   74,  128,   22,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,    6,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    2,    1,    2,    1,    3,    1,    1,    4,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4
    } ;

static const flex_int16_t yy_base[574] =
    {   0,
        0,    0,  176,  173,  164, 1150,   65,   67,  136,    0,
     1150, 1150,  135,  132,   62,   61,  127,  119,   50,   92,
       64,  144,   54,  189,   63,  115,   57,   57,  105,  106,
      149,  140,  232,  280,   64,  164,  189,  325,  199,  194,
      170,    0,   82,    0,   94,   94, 1150,   94,  126,   83,
       80, 1150, 1150, 1150, 1150,    0,  196,  183,  136,  107,
      205,  118,  217,  165,    0,  208,  215,  258,  251,  224,
      266,  236,  236,  248,  245,  265,  275,  368,  274,  288,
      269,  303,  298,  277,  285,  280,  310,  299,  314,    0,
      335,    0,  314,  299,  318,  329,  361,  334,  337,  332,

      342,  344,  343,  344,  353,  372,    0,  360,  382,  367,
      369,  368,  378,  394,  403,  390,  373,  396,  402,  445,
      395,  416,  425,  425,  423,  418,    0,  408,  425,  436,
      438,  432,  448,  439,  444,  445,  431,  461,    0, 1150,
     1150,   77,    0,  458,  459,    0,    0,    0,  449,  471,
      468,  480,  473,    0,  480,  483,  491,  483,  490,  472,
      499,  482,  501,  485,  496,  509,  508,  496,  515,  503,
      515,  520,    0,  521,  531,  516,  524,  519,  521,  541,
      529,  536,  543,  538,  542,  546,  554,  536,  549,  555,
      542,  560,  563,  565,  566,  574,  558,    0,    0,  553,

      569,  571,  583,  581,  584,  590,  573,  576,  581,    0,
      591,  585,  596,  603,  604,  602,  592,  607,  599,  589,
      603,  609,  618,  607,    0,  614,  619,  610,  618,  621,
      637,  624,    0,  621,  633,  627,  636,  636,  651,  632,
      653,  647,  658,    0,  649,  661,  645,  664,  648,  650,
      662,  670,  661,  663,  657,  682,  674,  695,    0,  686,
      693,  694,    0,    0,  689,  697,  695,    0,  690,  692,
      710,  693,    0,  703,  697,  705,  701,  711,  709,    0,
        0,  718,  711,  709,  712,  732,  716,  734,  731,  721,
      734,  749,  738,    0,    0,  737,  752,  739,  742,  753,

      745,  756,  742,  749,  752,  766,    0,    0,    0,    0,
      751,    0,  769,    0,  766,  755,  768,  763,    0,  781,
      774,  770,  771,    0,  781,  783,  776,  797,  804,  805,
      798,  784,    0,  790,  809,  804,  814,  817,  812,    0,
      812,  804,  821,    0,  808,  819,    0,  815,  809,  815,
      831,    0,  835,  833,  827,  824,    0,  839,    0,  830,
        0,  824,  853,  839,  844,    0,  860,  845,  859,  863,
      865,  868,    0,  873,  866,  877,  874,  871,  872,  868,
      878,  880,  869,  872,  875,  886,  876,  894,    0,    0,
        0,  878,  898,  890,  900,    0,  906,  896,    0,  901,

        0,    0,  897,  913,  907,    0,  919,    0,  922,  909,
      931,  913,  925,    0,    0,  932,  927,    0,  922,  920,
      925,  934,    0,    0,  940,  945,  936,  931,  937,  948,
      939,  947,  947,  954,    0,  964,  966,    0,  953,  973,
      962,    0,    0,    0,  976,  968,    0,    0,  969,    0,
        0,  966,  968,    0,  969,  976,  978,    0,  971,  990,
      994,    0,  991,    0,  997,    0,  989,    0,  984,    0,
      991,    0,    0,    0,    0,  986,    0,  993, 1007, 1019,
     1009, 1003,    0, 1011,    0,  999, 1025, 1014, 1020, 1030,
     1011, 1032,    0, 1021, 1021,    0, 1028, 1029,    0,    0,

     1043, 1025,    0,    0,    0, 1028,    0,    0,    0,    0,
     1042,    0, 1049, 1051,    0, 1052, 1053, 1039, 1046,    0,
        0,    0, 1045,    0,    0, 1063, 1062,    0,    0,    0,
     1070, 1064, 1072,    0,    0,    0, 1060,    0, 1061,    0,
     1062, 1075,    0,    0, 1074, 1071,    0, 1073,    0,    0,
     1087,    0, 1075,    0,    0,    0,    0,    0,    0,    0,
     1080, 1083,    0,    0,    0,    0,    0,    0, 1150, 1137,
     1141,   79, 1145
    } ;

static const flex_int16_t yy_def[574] =
    {   0,
      569,    1,  570,  570,  569,  569,  569,  569,  569,  571,
      569,  569,  569,  569,  569,  569,  569,  569,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  573,  569,  569,  569,  571,  569,  569,
      569,  569,  569,  569,  569,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  573,  569,
      569,  569,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,    0,  569,
      569,  569,  569
    } ;

static const flex_int16_t yy_nxt[1217] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   42,    6,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   42,   46,   46,   46,   46,
       51,   49,   52,   53,   57,   90,   58,   66,   75,   76,
       77,   59,   56,   91,   93,   67,  142,   84,   92,  142,
       78,   68,   50,   85,   69,   46,   46,  116,  141,  138,

      140,   57,   90,   58,   66,   75,   76,   77,   59,   60,
       91,   93,   67,   61,   84,   92,   62,   78,   68,   63,
       85,   69,   94,   96,  116,   64,  138,   97,   86,   65,
       55,   95,   87,   98,   51,   49,   60,   99,   54,  149,
       61,   50,   88,   62,   49,  152,   63,   47,   89,   94,
       96,  147,   64,  103,   97,   86,   65,   70,   95,   87,
       98,   71,  100,  569,   99,   72,  149,  104,  148,   88,
      101,   73,  152,  105,   74,   89,  102,  117,  147,   45,
      103,  118,   45,  155,   70,  119,  569,  569,   71,  100,
      136,  137,   72,  569,  104,  148,  145,  101,   73,  146,

      105,   74,   79,  102,  117,  569,  120,  133,  118,  121,
      155,  134,  119,   80,  122,  135,   81,  136,  137,   82,
      143,  123,   83,  145,  150,  129,  146,  130,  144,   79,
      131,  569,  132,  120,  133,  569,  121,  151,  134,  156,
       80,  122,  135,   81,  153,  157,   82,  143,  123,   83,
      106,  150,  129,  154,  130,  144,  163,  131,  107,  132,
      108,  164,  109,  569,  151,  110,  156,  168,  161,  169,
      569,  153,  157,  569,  569,  170,  171,  106,  162,  172,
      154,  165,  158,  163,  159,  107,  160,  108,  164,  109,
      166,  173,  110,  111,  168,  161,  169,  167,  179,  182,

      112,  113,  170,  171,  187,  162,  172,  114,  165,  158,
      115,  159,  188,  160,  189,  180,  183,  166,  173,  569,
      111,  181,  185,  190,  167,  179,  182,  112,  113,  186,
      184,  187,  191,  192,  114,  197,  198,  115,  124,  188,
      569,  189,  180,  183,  199,  125,  126,  200,  181,  185,
      190,  193,  127,  204,  205,  128,  186,  184,  569,  191,
      192,  194,  197,  198,  206,  124,  195,  196,  207,  569,
      208,  199,  125,  126,  200,  209,  210,  211,  193,  127,
      204,  205,  128,  174,  201,  175,  202,  203,  194,  176,
      212,  206,  213,  195,  196,  207,  177,  208,  214,  215,

      178,  216,  209,  210,  211,  217,  218,  224,  225,  226,
      174,  201,  175,  202,  203,  219,  176,  212,  220,  213,
      221,  227,  234,  177,  222,  214,  215,  178,  216,  235,
      223,  569,  217,  218,  224,  225,  226,  569,  236,  237,
      238,  241,  219,  239,  240,  220,  242,  221,  227,  234,
      569,  222,  243,  246,  249,  244,  235,  223,  228,  245,
      229,  250,  251,  252,  230,  236,  237,  238,  241,  231,
      239,  240,  247,  242,  253,  254,  232,  233,  248,  243,
      246,  249,  244,  255,  256,  228,  245,  229,  250,  251,
      252,  230,  257,  258,  259,  260,  231,  261,  262,  247,

      263,  253,  254,  232,  233,  248,  265,  266,  267,  268,
      255,  256,  269,  270,  271,  264,  273,  274,  272,  257,
      258,  259,  260,  277,  261,  262,  275,  263,  278,  279,
      276,  280,  281,  265,  266,  267,  268,  282,  283,  269,
      270,  271,  264,  273,  274,  272,  284,  285,  286,  288,
      277,  287,  289,  275,  290,  278,  279,  276,  280,  281,
      291,  292,  293,  294,  282,  283,  295,  296,  297,  298,
      299,  300,  301,  284,  285,  286,  288,  302,  287,  289,
      303,  290,  304,  305,  308,  309,  310,  291,  292,  293,
      294,  306,  311,  295,  296,  297,  298,  299,  300,  301,

      312,  307,  313,  314,  302,  315,  316,  303,  317,  304,
      305,  308,  309,  310,  318,  319,  320,  321,  306,  311,
      322,  323,  324,  325,  326,  327,  328,  312,  307,  313,
      314,  329,  315,  316,  330,  317,  331,  332,  333,  334,
      335,  318,  319,  320,  321,  336,  337,  322,  323,  324,
      325,  326,  327,  328,  338,  339,  340,  341,  329,  342,
      343,  330,  344,  331,  332,  333,  334,  335,  345,  346,
      347,  350,  336,  337,  348,  351,  349,  352,  353,  354,
      355,  338,  339,  340,  341,  356,  342,  343,  357,  344,
      359,  360,  358,  361,  362,  345,  346,  347,  350,  363,

      364,  348,  351,  349,  352,  353,  354,  355,  365,  366,
      367,  368,  356,  369,  370,  357,  371,  359,  360,  358,
      361,  362,  372,  373,  374,  375,  363,  364,  376,  377,
      378,  379,  380,  381,  382,  365,  366,  367,  368,  383,
      369,  370,  384,  371,  385,  386,  387,  388,  389,  372,
      373,  374,  375,  390,  391,  376,  377,  378,  379,  380,
      381,  382,  392,  393,  394,  395,  383,  396,  397,  384,
      398,  385,  386,  387,  388,  389,  399,  400,  401,  402,
      390,  391,  403,  406,  407,  404,  408,  409,  410,  392,
      393,  394,  395,  411,  396,  397,  405,  398,  412,  413,

      414,  415,  416,  399,  400,  401,  402,  417,  418,  403,
      406,  407,  404,  408,  409,  410,  419,  420,  421,  422,
      411,  423,  424,  405,  425,  412,  413,  414,  415,  416,
      426,  427,  428,  429,  417,  418,  430,  431,  432,  433,
      434,  435,  436,  419,  420,  421,  422,  437,  423,  424,
      438,  425,  439,  440,  441,  442,  443,  426,  427,  428,
      429,  444,  445,  430,  431,  432,  433,  434,  435,  436,
      446,  447,  448,  449,  437,  450,  451,  438,  452,  439,
      440,  441,  442,  443,  453,  454,  455,  456,  444,  445,
      457,  458,  459,  460,  461,  462,  463,  446,  447,  448,

      449,  464,  450,  451,  465,  452,  466,  467,  468,  469,
      470,  453,  454,  455,  456,  471,  472,  457,  458,  459,
      460,  461,  462,  463,  473,  474,  475,  476,  464,  477,
      478,  465,  481,  466,  467,  468,  469,  470,  479,  482,
      483,  480,  471,  472,  484,  485,  486,  487,  488,  489,
      490,  473,  474,  475,  476,  491,  477,  478,  492,  481,
      493,  494,  495,  496,  497,  479,  482,  483,  480,  498,
      499,  484,  485,  486,  487,  488,  489,  490,  500,  501,
      502,  503,  491,  504,  505,  492,  506,  493,  494,  495,
      496,  497,  507,  508,  509,  510,  498,  499,  511,  512,

      513,  514,  515,  516,  517,  500,  501,  502,  503,  518,
      504,  505,  519,  506,  520,  521,  522,  523,  524,  507,
      508,  509,  510,  525,  526,  511,  512,  513,  514,  515,
      516,  517,  527,  528,  529,  530,  518,  531,  532,  519,
      533,  520,  521,  522,  523,  524,  534,  535,  536,  537,
      525,  526,  538,  539,  540,  541,  542,  543,  544,  527,
      528,  529,  530,  545,  531,  532,  546,  533,  547,  548,
      549,  550,  551,  534,  535,  536,  537,  552,  553,  538,
      539,  540,  541,  542,  543,  544,  554,  555,  556,  557,
      545,  558,  559,  546,  560,  547,  548,  549,  550,  551,

      561,  562,  563,  564,  552,  553,  565,  566,  567,  568,
      569,  569,  569,  554,  555,  556,  557,  569,  558,  559,
      569,  560,  569,  569,  569,  569,  569,  561,  562,  563,
      564,  569,  569,  565,  566,  567,  568,   44,   44,   44,
       44,   48,  569,   48,   48,  139,  139,  569,  139,    5,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569
    } ;

static const flex_int16_t yy_chk[1217] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    7,    7,    8,    8,
       15,   15,   16,   16,   19,   27,   19,   21,   23,   23,
       23,   19,  572,   27,   28,   21,  142,   25,   27,   51,
       23,   21,   50,   25,   21,   46,   46,   35,   48,   43,

       45,   19,   27,   19,   21,   23,   23,   23,   19,   20,
       27,   28,   21,   20,   25,   27,   20,   23,   21,   20,
       25,   21,   29,   30,   35,   20,   43,   30,   26,   20,
       18,   29,   26,   30,   49,   49,   20,   30,   17,   60,
       20,   14,   26,   20,   13,   62,   20,    9,   26,   29,
       30,   59,   20,   32,   30,   26,   20,   22,   29,   26,
       30,   22,   31,    5,   30,   22,   60,   32,   59,   26,
       31,   22,   62,   32,   22,   26,   31,   36,   59,    4,
       32,   36,    3,   64,   22,   36,    0,    0,   22,   31,
       41,   41,   22,    0,   32,   59,   58,   31,   22,   58,

       32,   22,   24,   31,   36,    0,   37,   40,   36,   37,
       64,   40,   36,   24,   37,   40,   24,   41,   41,   24,
       57,   37,   24,   58,   61,   39,   58,   39,   57,   24,
       39,    0,   39,   37,   40,    0,   37,   61,   40,   66,
       24,   37,   40,   24,   63,   67,   24,   57,   37,   24,
       33,   61,   39,   63,   39,   57,   70,   39,   33,   39,
       33,   70,   33,    0,   61,   33,   66,   72,   69,   73,
        0,   63,   67,    0,    0,   74,   75,   33,   69,   76,
       63,   71,   68,   70,   68,   33,   68,   33,   70,   33,
       71,   77,   33,   34,   72,   69,   73,   71,   79,   81,

       34,   34,   74,   75,   84,   69,   76,   34,   71,   68,
       34,   68,   85,   68,   86,   80,   82,   71,   77,    0,
       34,   80,   83,   87,   71,   79,   81,   34,   34,   83,
       82,   84,   88,   89,   34,   93,   94,   34,   38,   85,
        0,   86,   80,   82,   95,   38,   38,   96,   80,   83,
       87,   91,   38,   98,   99,   38,   83,   82,    0,   88,
       89,   91,   93,   94,  100,   38,   91,   91,  101,    0,
      102,   95,   38,   38,   96,  103,  104,  105,   91,   38,
       98,   99,   38,   78,   97,   78,   97,   97,   91,   78,
      106,  100,  108,   91,   91,  101,   78,  102,  109,  110,

       78,  111,  103,  104,  105,  112,  113,  116,  117,  118,
       78,   97,   78,   97,   97,  114,   78,  106,  114,  108,
      115,  119,  121,   78,  115,  109,  110,   78,  111,  122,
      115,    0,  112,  113,  116,  117,  118,    0,  123,  124,
      125,  128,  114,  126,  126,  114,  129,  115,  119,  121,
        0,  115,  130,  132,  134,  131,  122,  115,  120,  131,
      120,  135,  136,  137,  120,  123,  124,  125,  128,  120,
      126,  126,  133,  129,  138,  144,  120,  120,  133,  130,
      132,  134,  131,  145,  149,  120,  131,  120,  135,  136,
      137,  120,  150,  151,  152,  152,  120,  153,  155,  133,

      156,  138,  144,  120,  120,  133,  157,  158,  159,  160,
      145,  149,  161,  162,  163,  156,  164,  165,  163,  150,
      151,  152,  152,  167,  153,  155,  166,  156,  168,  169,
      166,  170,  171,  157,  158,  159,  160,  172,  174,  161,
      162,  163,  156,  164,  165,  163,  175,  176,  177,  178,
      167,  177,  179,  166,  180,  168,  169,  166,  170,  171,
      181,  182,  183,  184,  172,  174,  185,  186,  187,  188,
      189,  190,  191,  175,  176,  177,  178,  192,  177,  179,
      193,  180,  194,  195,  197,  200,  201,  181,  182,  183,
      184,  196,  202,  185,  186,  187,  188,  189,  190,  191,

      203,  196,  204,  205,  192,  206,  207,  193,  208,  194,
      195,  197,  200,  201,  209,  211,  212,  213,  196,  202,
      214,  215,  216,  217,  218,  219,  220,  203,  196,  204,
      205,  221,  206,  207,  222,  208,  223,  224,  226,  227,
      228,  209,  211,  212,  213,  229,  230,  214,  215,  216,
      217,  218,  219,  220,  231,  232,  234,  235,  221,  236,
      237,  222,  238,  223,  224,  226,  227,  228,  239,  240,
      241,  243,  229,  230,  242,  245,  242,  246,  247,  248,
      249,  231,  232,  234,  235,  250,  236,  237,  251,  238,
      252,  253,  251,  254,  255,  239,  240,  241,  243,  256,

      257,  242,  245,  242,  246,  247,  248,  249,  258,  260,
      261,  262,  250,  265,  266,  251,  267,  252,  253,  251,
      254,  255,  269,  270,  271,  272,  256,  257,  274,  275,
      276,  277,  278,  279,  282,  258,  260,  261,  262,  283,
      265,  266,  284,  267,  285,  286,  287,  288,  289,  269,
      270,  271,  272,  290,  291,  274,  275,  276,  277,  278,
      279,  282,  292,  293,  296,  297,  283,  298,  299,  284,
      300,  285,  286,  287,  288,  289,  301,  302,  303,  304,
      290,  291,  305,  311,  313,  306,  315,  316,  317,  292,
      293,  296,  297,  318,  298,  299,  306,  300,  320,  321,

      322,  323,  325,  301,  302,  303,  304,  326,  327,  305,
      311,  313,  306,  315,  316,  317,  328,  329,  330,  331,
      318,  332,  334,  306,  335,  320,  321,  322,  323,  325,
      336,  337,  338,  339,  326,  327,  341,  342,  343,  345,
      346,  348,  349,  328,  329,  330,  331,  350,  332,  334,
      351,  335,  353,  354,  355,  356,  358,  336,  337,  338,
      339,  360,  362,  341,  342,  343,  345,  346,  348,  349,
      363,  364,  365,  367,  350,  368,  369,  351,  370,  353,
      354,  355,  356,  358,  371,  372,  374,  375,  360,  362,
      376,  377,  378,  379,  380,  381,  382,  363,  364,  365,

      367,  383,  368,  369,  384,  370,  385,  386,  387,  388,
      392,  371,  372,  374,  375,  393,  394,  376,  377,  378,
      379,  380,  381,  382,  395,  397,  398,  400,  383,  403,
      404,  384,  407,  385,  386,  387,  388,  392,  405,  409,
      410,  405,  393,  394,  411,  412,  413,  416,  417,  419,
      420,  395,  397,  398,  400,  421,  403,  404,  422,  407,
      425,  426,  427,  428,  429,  405,  409,  410,  405,  430,
      431,  411,  412,  413,  416,  417,  419,  420,  432,  433,
      434,  436,  421,  437,  439,  422,  440,  425,  426,  427,
      428,  429,  441,  445,  446,  449,  430,  431,  452,  453,

      455,  456,  457,  459,  460,  432,  433,  434,  436,  461,
      437,  439,  463,  440,  465,  467,  469,  471,  476,  441,
      445,  446,  449,  478,  479,  452,  453,  455,  456,  457,
      459,  460,  480,  481,  482,  484,  461,  486,  487,  463,
      488,  465,  467,  469,  471,  476,  489,  490,  491,  492,
      478,  479,  494,  495,  497,  498,  501,  502,  506,  480,
      481,  482,  484,  511,  486,  487,  513,  488,  514,  516,
      517,  518,  519,  489,  490,  491,  492,  523,  526,  494,
      495,  497,  498,  501,  502,  506,  527,  531,  532,  533,
      511,  537,  539,  513,  541,  514,  516,  517,  518,  519,

      542,  545,  546,  548,  523,  526,  551,  553,  561,  562,
        0,    0,    0,  527,  531,  532,  533,    0,  537,  539,
        0,  541,    0,    0,    0,    0,    0,  542,  545,  546,
      548,    0,    0,  551,  553,  561,  562,  570,  570,  570,
      570,  571,    0,  571,  571,  573,  573,    0,  573,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569
    } ;

static const flex_int16_t yy_rule_linenum[167] =
    {   0,
       29,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
      100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      120,  121,  122,  123,  124,  125,  126,  127,  128,  129,

      130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
      150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
      160,  161,  162,  163,  164,  165,  166,  167,  168,  169,
      170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
      181,  182,  183,  184,  185,  187,  189,  190,  195,  205,
      214,  219,  220,  221,  222,  225
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#line 2 "lexer.l"

#include "parser.h"
#include "parser_result.h"
#include <sstream>

static thread_local std::stringstream string_buffer;

#line 1223 "lexer.cpp"

#line 1225 "lexer.cpp"

#define INITIAL 0
#define SINGLE_QUOTED_STRING 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */
#line 27 "lexer.l"


#line 1579 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 570 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 569 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 167 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 167 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 168 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 29 "lexer.l"
/* ignore \t\n and space */;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 31 "lexer.l"
{ return ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 32 "lexer.l"
{ return ALTER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 33 "lexer.l"
{ return ANALYZE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 34 "lexer.l"
{ return AND; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 35 "lexer.l"
{ return AS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 36 "lexer.l"
{ return AST; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 37 "lexer.l"
{ return ASC; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 38 "lexer.l"
{ return BETWEEN; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 39 "lexer.l"
{ return BIGINT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 40 "lexer.l"
{ return BIT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 41 "lexer.l"
{ return BITMAP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 42 "lexer.l"
{ return BOOLEAN; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 43 "lexer.l"
{ return BOX; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 44 "lexer.l"
{ return BLOB; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 45 "lexer.l"
{ return BLOCK; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 46 "lexer.l"
{ return BUFFER; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 47 "lexer.l"
{ return BY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 48 "lexer.l"
{ return CASE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 49 "lexer.l"
{ return CAST; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 50 "lexer.l"
{ return CIRCLE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 51 "lexer.l"
{ return COLLECTION; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 52 "lexer.l"
{ return CONFIGS; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 53 "lexer.l"
{ return COPY; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 54 "lexer.l"
{ return CREATE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 55 "lexer.l"
{ return CROSS; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 56 "lexer.l"
{ return DATA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 57 "lexer.l"
{ return DATABASE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 58 "lexer.l"
{ return DATABASES; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 59 "lexer.l"
{ return DATE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 60 "lexer.l"
{ return DATETIME; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 61 "lexer.l"
{ return DAY; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 62 "lexer.l"
{ return DAYS; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 63 "lexer.l"
{ return DISTINCT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 64 "lexer.l"
{ return DOUBLE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 65 "lexer.l"
{ return DECIMAL; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 66 "lexer.l"
{ return DELETE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 67 "lexer.l"
{ return DELIMITER; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 68 "lexer.l"
{ return DESCRIBE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 69 "lexer.l"
{ return DESC; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 70 "lexer.l"
{ return DROP; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 71 "lexer.l"
{ return ELSE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 72 "lexer.l"
{ return EMBEDDING; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 73 "lexer.l"
{ return END; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 74 "lexer.l"
{ return EXCEPT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return EXTRACT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return EXECUTE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return EXISTS; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return EXPLAIN; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return EXPORT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return FALSE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return FLOAT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return FLUSH; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return OPTIMIZE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return FORMAT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return FRAGMENT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return FROM; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return FULL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return FUSION; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return GLOBAL; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return GROUP; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return HAVING; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return HEADER; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 93 "lexer.l"
{ return HOUR; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 94 "lexer.l"
{ return HOURS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 95 "lexer.l"
{ return HUGEINT; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return IF; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return IN; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return INDEX; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return INNER; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return INSERT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return INTEGER; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return INT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return INTERSECT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return INTERVAL; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return INTO; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return IS; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return JOIN; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return KEY; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return KNN; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return LEFT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return LIKE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return LIMIT; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return LINE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return LOG; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return LOGICAL; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return LSEG; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return MATCH; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return MINUTE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return MINUTES; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return MONTH; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return MONTHS; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return NATURAL; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return NULLABLE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return NOT; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return OFF; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return OFFSET; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return ON; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return OR; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return ORDER; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return OUTER; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return PATH; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return PHYSICAL; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return PIPELINE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return POINT; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return POLYGON; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return PREPARE; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return PRIMARY; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return PROFILE; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return PROFILES; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return QUERY; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 141 "lexer.l"
{ return RAW; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 142 "lexer.l"
{ return REAL; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 143 "lexer.l"
{ return RIGHT; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 144 "lexer.l"
{ return SEARCH; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 145 "lexer.l"
{ return SECOND; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 146 "lexer.l"
{ return SECONDS; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 147 "lexer.l"
{ return SELECT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 148 "lexer.l"
{ return SESSION; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 149 "lexer.l"
{ return SET; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 150 "lexer.l"
{ return SEGMENT; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 151 "lexer.l"
{ return SEGMENTS; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 152 "lexer.l"
{ return SHOW; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 153 "lexer.l"
{ return SMALLINT; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 154 "lexer.l"
{ return STATUS; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 155 "lexer.l"
{ return THEN; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 156 "lexer.l"
{ return TIME; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 157 "lexer.l"
{ return TIMESTAMP; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 158 "lexer.l"
{ return TO; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 159 "lexer.l"
{ return TABLE; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 160 "lexer.l"
{ return TABLES; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 161 "lexer.l"
{ return TRUE; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 162 "lexer.l"
{ return TINYINT; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 163 "lexer.l"
{ return UNION; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 164 "lexer.l"
{ return UNIQUE; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 165 "lexer.l"
{ return USING; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 166 "lexer.l"
{ return UPDATE; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 167 "lexer.l"
{ return UUID; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 168 "lexer.l"
{ return USE; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 169 "lexer.l"
{ return VALUES; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 170 "lexer.l"
{ return VAR; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 171 "lexer.l"
{ return VARCHAR; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return VECTOR; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return VIEW; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return VIEWS; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return WHEN; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return WHERE; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return WITH; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return YEAR; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return YEARS; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return EQUAL; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return NOT_EQ; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return NOT_EQ; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return LESS_EQ; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return GREATER_EQ; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 157:
#line 190 "lexer.l"
case 158:
YY_RULE_SETUP
#line 190 "lexer.l"
{
    yylval->double_value = atof(yytext);
    return DOUBLE_VALUE;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 195 "lexer.l"
{
    errno = 0;
    yylval->long_value = strtoll(yytext, nullptr, 0);
    if (errno) {
        return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
        return 0;
    }
    return LONG_VALUE;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 205 "lexer.l"
{
    // total length - 2 of quota + 1 null char
    long str_len = strlen(yytext) - 1;
    yylval->str_value = (char*)malloc(str_len);
    memset(yylval->str_value, 0, str_len);
    memcpy(yylval->str_value, (char*)(yytext + 1), str_len - 1);
    return IDENTIFIER;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 214 "lexer.l"
{
    yylval->str_value = strdup(yytext);
    return IDENTIFIER;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 219 "lexer.l"
{ BEGIN SINGLE_QUOTED_STRING; string_buffer.clear(); string_buffer.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 220 "lexer.l"
{ string_buffer << '\''; }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 221 "lexer.l"
{ string_buffer << yytext; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 222 "lexer.l"
{ BEGIN INITIAL; yylval->str_value = strdup(string_buffer.str().c_str()); return STRING; }
	YY_BREAK
case YY_STATE_EOF(SINGLE_QUOTED_STRING):
#line 223 "lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 225 "lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 227 "lexer.l"
ECHO;
	YY_BREAK
#line 2514 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 570 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 570 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 569);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 227 "lexer.l"


int yyerror(const char *msg) {
    fprintf(stderr, "[Why here?] %s\n",msg); return 0;
}

