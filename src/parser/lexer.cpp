#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define sql_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer sql_create_buffer
#endif

#ifdef yy_delete_buffer
#define sql_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer sql_delete_buffer
#endif

#ifdef yy_scan_buffer
#define sql_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer sql_scan_buffer
#endif

#ifdef yy_scan_string
#define sql_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string sql_scan_string
#endif

#ifdef yy_scan_bytes
#define sql_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes sql_scan_bytes
#endif

#ifdef yy_init_buffer
#define sql_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer sql_init_buffer
#endif

#ifdef yy_flush_buffer
#define sql_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer sql_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define sql_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state sql_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define sql_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer sql_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define sqlpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state sqlpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define sqlpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state sqlpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define sqlensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack sqlensure_buffer_stack
#endif

#ifdef yylex
#define sqllex_ALREADY_DEFINED
#else
#define yylex sqllex
#endif

#ifdef yyrestart
#define sqlrestart_ALREADY_DEFINED
#else
#define yyrestart sqlrestart
#endif

#ifdef yylex_init
#define sqllex_init_ALREADY_DEFINED
#else
#define yylex_init sqllex_init
#endif

#ifdef yylex_init_extra
#define sqllex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra sqllex_init_extra
#endif

#ifdef yylex_destroy
#define sqllex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy sqllex_destroy
#endif

#ifdef yyget_debug
#define sqlget_debug_ALREADY_DEFINED
#else
#define yyget_debug sqlget_debug
#endif

#ifdef yyset_debug
#define sqlset_debug_ALREADY_DEFINED
#else
#define yyset_debug sqlset_debug
#endif

#ifdef yyget_extra
#define sqlget_extra_ALREADY_DEFINED
#else
#define yyget_extra sqlget_extra
#endif

#ifdef yyset_extra
#define sqlset_extra_ALREADY_DEFINED
#else
#define yyset_extra sqlset_extra
#endif

#ifdef yyget_in
#define sqlget_in_ALREADY_DEFINED
#else
#define yyget_in sqlget_in
#endif

#ifdef yyset_in
#define sqlset_in_ALREADY_DEFINED
#else
#define yyset_in sqlset_in
#endif

#ifdef yyget_out
#define sqlget_out_ALREADY_DEFINED
#else
#define yyget_out sqlget_out
#endif

#ifdef yyset_out
#define sqlset_out_ALREADY_DEFINED
#else
#define yyset_out sqlset_out
#endif

#ifdef yyget_leng
#define sqlget_leng_ALREADY_DEFINED
#else
#define yyget_leng sqlget_leng
#endif

#ifdef yyget_text
#define sqlget_text_ALREADY_DEFINED
#else
#define yyget_text sqlget_text
#endif

#ifdef yyget_lineno
#define sqlget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno sqlget_lineno
#endif

#ifdef yyset_lineno
#define sqlset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno sqlset_lineno
#endif

#ifdef yyget_column
#define sqlget_column_ALREADY_DEFINED
#else
#define yyget_column sqlget_column
#endif

#ifdef yyset_column
#define sqlset_column_ALREADY_DEFINED
#else
#define yyset_column sqlset_column
#endif

#ifdef yywrap
#define sqlwrap_ALREADY_DEFINED
#else
#define yywrap sqlwrap
#endif

/* %endif */

#ifdef yyget_lval
#define sqlget_lval_ALREADY_DEFINED
#else
#define yyget_lval sqlget_lval
#endif

#ifdef yyset_lval
#define sqlset_lval_ALREADY_DEFINED
#else
#define yyset_lval sqlset_lval
#endif

#ifdef yyget_lloc
#define sqlget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc sqlget_lloc
#endif

#ifdef yyset_lloc
#define sqlset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc sqlset_lloc
#endif

#ifdef yyalloc
#define sqlalloc_ALREADY_DEFINED
#else
#define yyalloc sqlalloc
#endif

#ifdef yyrealloc
#define sqlrealloc_ALREADY_DEFINED
#else
#define yyrealloc sqlrealloc
#endif

#ifdef yyfree
#define sqlfree_ALREADY_DEFINED
#else
#define yyfree sqlfree
#endif

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define sqlwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 211
#define YY_END_OF_BUFFER 212
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[758] =
    {   0,
        0,    0,  208,  208,  212,  210,    1,    1,  210,  210,
      200,  206,  200,  200,  203,  200,  200,  200,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  208,  209,    1,  196,    0,  203,  202,
      201,  198,  197,  195,  199,  205,  205,  205,  205,    9,
      205,  205,  205,  205,  205,  205,   23,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,   83,  205,   85,   95,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  127,  205,  129,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  171,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  208,
      207,  204,  201,    0,    2,  205,    4,  205,  205,    8,
       11,   10,  205,  205,  205,   15,  205,  205,   18,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,   45,  205,  205,  205,  205,  205,  205,  205,  205,
      205,   58,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,   91,  205,   97,
      205,  205,  205,  205,  205,  205,  105,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  122,  205,  205,  125,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  145,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  155,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      182,  205,  205,  205,  205,  205,  205,  205,  205,  205,
        0,  201,  205,  205,  205,  205,  205,  205,  205,  205,

       19,  205,  205,  205,   24,   25,  205,  205,  205,  205,
      205,  205,  205,  205,   37,  205,  205,   40,   43,   46,
      205,  205,  205,  205,  205,   54,  205,  205,   55,   56,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,   73,   74,  205,  205,  205,  205,
      205,   80,  205,  205,  205,  205,  205,  205,   94,   96,
      205,  205,  100,  101,  205,  103,  104,  205,  106,  108,
      205,  205,  205,  205,  205,  205,  205,  205,  120,  119,
      205,  205,  205,  205,  205,  132,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  146,  205,  205,  205,

      205,  205,  205,  205,  205,  158,  205,  205,  205,  205,
      205,  166,  167,  168,  205,  205,  174,  205,  205,  205,
      205,  205,  205,  181,  205,  205,  205,  205,  188,  190,
      205,  192,  193,    3,  205,    6,  205,  205,  205,  205,
      205,   20,  205,  205,  205,   28,  205,  205,  205,  205,
      205,  205,  205,   39,  205,  205,  205,  205,  205,  205,
       53,  205,  205,  205,  205,  205,  205,  205,  205,  205,
       65,   66,   67,   69,  205,  205,  205,  205,  205,   77,
      205,  205,   81,  205,  205,   86,   88,  205,  205,  205,
      205,  205,  102,  205,  109,  205,  205,  205,  205,  115,

      205,  205,  121,  205,  205,  205,  130,  131,  205,  205,
      205,  136,  205,  205,  205,  205,  205,  205,  144,  205,
      148,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      162,  205,  205,  205,  205,  175,  205,  205,  205,  205,
      179,  205,  205,  205,  205,  189,  191,  194,  205,  205,
      205,  205,   14,   16,   21,  205,   22,  205,   29,  205,
       31,  205,   35,  205,   38,  205,  205,  205,  205,   51,
      205,  205,   48,  205,   59,  205,   62,  205,   64,  205,
      205,  205,   71,  205,   75,   76,   78,   79,  205,   84,
      205,   89,  205,  205,  205,   98,  205,  205,  110,  205,

      111,  113,  116,  205,  205,  123,  126,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  147,  205,  150,
      151,  205,  153,  205,  205,  160,  205,  163,  164,  205,
      205,  205,  176,  177,  205,  180,  183,  205,  205,  187,
      205,    7,   12,  205,   17,   26,  205,   32,   33,   34,
       36,  205,  205,   49,   50,  205,  205,  205,   61,   63,
       60,   68,  205,  205,   82,   87,   90,  205,  205,   99,
      107,  205,  114,  205,  118,  124,  205,  205,  205,  205,
      137,  138,  139,  140,  205,  143,  205,  152,  156,  154,
      205,  205,  205,  205,  170,  205,  205,  186,  205,  205,

       13,   27,  205,   41,   44,  205,   47,  205,   70,   72,
      205,   93,  112,  205,  128,  205,  134,  135,  141,  205,
      149,  157,  159,  205,  205,  205,  205,  178,  184,  205,
      205,   42,   52,   57,   92,  205,  205,  205,  205,  205,
      169,  205,  185,    5,   30,  205,  205,  142,  161,  205,
      205,  117,  133,  165,  172,  173,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   10,
       10,   10,   10,   12,   10,   10,   10,    6,    6,   13,
       14,   15,    6,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
        6,    1,    6,    6,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,    6,    6,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    2,    1,    2,    1,    3,    1,    1,    4,
        4,    4,    1,    1,    1,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4
    } ;

static const flex_int16_t yy_base[762] =
    {   0,
        0,    0,  230,  200,  186, 1556,   67,   69,  168,    0,
     1556, 1556,   63,   66,   70,   69,  149,  147,   66,  108,
       73,   74,  112,  163,   59,  134,  124,   57,   68,  164,
      188,  173,  235,  283,   55,  218,  227,  328,  326,  233,
       86,    0,   79,    0,  153,   99, 1556,  152,  299,  190,
      276, 1556, 1556, 1556, 1556,    0,  164,  178,  227,  279,
      107,  120,  232,  119,  262,  174,    0,  270,  197,  230,
      318,  282,  302,  332,  266,  300,  308,  320,  339,  348,
      372,  341,  343,  368,  372,  384,  374,  361,  372,  369,
      393,  374,  389,    0,  383,  421,    0,  391,  376,  428,

      419,  435,  404,  419,  418,  423,  430,  433,  426,  443,
      436,  439,  444,    0,  431,  449,  434,  435,  461,  458,
      468,  476,  482,  481,  466,  491,  486,  471,  532,  480,
      495,  497,  498,  498,  514,  497,  490,    0,  533,  528,
      505,  536,  533,  531,  543,  543,  545,  533,  555,    0,
     1556, 1556,  589,  310,    0,  554,  567,  582,  576,    0,
        0,    0,  566,  576,  583,  580,  593,  585,    0,  592,
      597,  598,  586,  598,  591,  588,  599,  581,  606,  589,
      636,  592,  627,  641,  638,  642,  626,  646,  633,  645,
      646,    0,  647,  650,  635,  644,  637,  638,  655,  660,

      643,  653,  653,  660,  658,  678,  682,  693,  675,  688,
      695,  682,  696,  687,  698,  699,  700,  701,  693,    0,
      707,  688,  704,  701,  707,  702,  732,  708,  716,  701,
      735,  700,  725,  729,  732,  749,    0,  743,  751,  738,
      749,  754,  755,  753,  743,  744,  759,  751,  741,  751,
      756,  789,  752,    0,  761,  773,  767,  767,  780,  784,
      790,  799,  788,    0,  785,  797,  792,  797,  800,  794,
      794,  801,  811,  792,  804,  814,  806,  805,  815,  826,
        0,  814,  825,  812,  849,  829,  830,  843,  851,  844,
      217,  410,  849,  861,  847,  841,  862,  867,  855,  869,

        0,  860,  867,  868,    0,    0,  862,  864,  865,  873,
      868,  881,  874,  882,    0,  883,  887,  905,  891,    0,
      899,  892,  895,  903,  916,    0,  909,  907,    0,    0,
      916,  905,  901,  903,  923,  907,  925,  922,  909,  909,
      923,  917,  934,  923,    0,    0,  922,  940,  941,  946,
      956,  946,  957,  949,  945,  952,  953,  965,    0,    0,
      968,  960,    0,    0,  955,    0,    0,  973,    0,    0,
      969,  969,  965,  962,  961,  974,  976,  968,  970,    0,
      987,  986,  982,  993,  996,    0, 1006, 1010, 1008, 1001,
     1016, 1023, 1024, 1017, 1022, 1019,    0, 1016, 1010, 1022,

     1029, 1019, 1029, 1032, 1027,    0, 1025, 1020, 1036, 1038,
     1030,    0,    0, 1030, 1056, 1049,    0, 1055, 1052, 1071,
     1068, 1057, 1071,    0, 1074, 1072, 1080, 1067, 1064,    0,
     1079,    0, 1066,    0, 1085,    0, 1061, 1083, 1069, 1070,
     1075, 1074, 1093, 1079, 1083,    0, 1094, 1100, 1105, 1119,
     1116, 1124, 1123,    0, 1128, 1122, 1131, 1121, 1129, 1126,
        0, 1122, 1132, 1134, 1119, 1120, 1122, 1133, 1123, 1141,
        0,    0,  141,    0, 1122, 1127, 1143, 1137, 1140,    0,
     1146, 1139,    0, 1159, 1171, 1172,    0, 1161, 1177, 1164,
     1167, 1182,    0, 1187,    0, 1176, 1186, 1166, 1187, 1174,

     1172, 1194,    0, 1176, 1177, 1189,    0,    0, 1180, 1198,
     1193,    0, 1190, 1188, 1189, 1199, 1209, 1225,    0, 1226,
        0, 1222, 1228, 1233, 1225, 1220, 1226, 1233, 1238, 1243,
     1226, 1228, 1227, 1234, 1248,    0, 1245, 1240, 1238, 1248,
        0, 1236, 1255, 1257, 1242,    0,    0,    0, 1241, 1260,
     1267,  132,    0,    0,    0, 1270,    0, 1278,    0, 1269,
     1271, 1271, 1274, 1274,    0, 1276, 1283, 1285, 1278,    0,
     1279, 1297,    0, 1292,    0, 1297,    0, 1289,    0, 1284,
       99, 1300,    0, 1292,    0,    0,    0,    0, 1287,    0,
     1290,    0, 1292, 1308, 1313,    0, 1297, 1307,    0, 1330,

        0, 1319,    0, 1334, 1331, 1325,    0, 1319, 1327, 1347,
     1335, 1336, 1346, 1327, 1348, 1334, 1336,    0, 1347,    0,
     1338, 1338,    0, 1345, 1346,    0, 1349,    0, 1362, 1363,
     1347, 1365,    0,    0, 1364,    0,    0, 1355, 1377,    0,
     1383,    0,    0,   96,    0, 1374, 1388,    0,    0,    0,
        0, 1393, 1394,    0,    0, 1396, 1382, 1389,    0,    0,
        0,    0, 1386, 1385,    0,    0,    0, 1403, 1395,    0,
        0, 1384,    0, 1406,    0,    0, 1405, 1406, 1400, 1408,
        0,    0,    0, 1395, 1406,    0, 1397,    0, 1399,    0,
     1401, 1407, 1405, 1414,    0, 1423, 1442,    0, 1442, 1436,

        0,    0, 1437, 1434,    0, 1437,    0, 1449,    0,    0,
     1437,    0,    0, 1438,    0, 1445,    0,    0,    0, 1455,
        0,    0,    0, 1447, 1444, 1447, 1455,    0, 1446, 1452,
     1453,    0,    0,    0,    0, 1453, 1466, 1452, 1467, 1474,
        0, 1461,    0,    0,    0, 1459, 1476,    0,    0, 1472,
     1486,    0,    0,    0, 1482,    0, 1556, 1543, 1547,  101,
     1551
    } ;

static const flex_int16_t yy_def[762] =
    {   0,
      757,    1,  758,  758,  757,  757,  757,  757,  757,  759,
      757,  757,  757,  757,  757,  757,  757,  757,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  761,  757,  757,  757,  759,  757,  757,
      757,  757,  757,  757,  757,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  761,
      757,  757,  757,  757,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      757,  757,  760,  760,  760,  760,  760,  760,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,    0,  757,  757,  757,
      757
    } ;

static const flex_int16_t yy_nxt[1625] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       15,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       42,    6,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   42,   46,   46,
       46,   46,   49,   49,   49,   50,   50,   50,   51,   49,
       49,   49,   52,   53,   57,   88,   98,   99,   68,   73,
      124,   89,   58,   74,   59,   69,   70,   75,  149,   60,

       46,   46,   71,   76,   56,   72,   77,  701,  147,  148,
      662,   57,   88,   98,   99,   68,   73,  124,   89,   58,
       74,   59,   69,   70,   75,  149,   60,   61,   62,   71,
       76,   63,   72,   77,   64,  147,  148,   65,   78,   79,
       80,  163,  644,   66,   94,   95,  164,   67,  167,   90,
       81,  581,   96,   91,   61,   62,  152,   97,   63,  151,
       55,   64,   54,   92,   65,   78,   79,   80,  163,   93,
       66,   94,   95,  164,   67,  167,   90,   81,   82,   96,
       91,   47,  155,  100,   97,  757,   83,  101,  109,   84,
       92,  156,   85,  102,  170,   86,   93,  103,   87,   50,

       50,   50,  110,  104,  157,   82,   45,  105,  111,  155,
      100,  106,  158,   83,  101,  109,   84,  107,  156,   85,
      102,  170,   86,  108,  103,   87,  292,  292,  292,  110,
      104,  157,  173,  125,  105,  111,   45,  126,  106,  158,
      757,  127,  159,  757,  107,  160,  129,  128,  144,  130,
      108,  112,  145,  165,  131,  113,  146,  132,  757,  173,
      125,  133,  174,  114,  126,  115,  166,  116,  127,  159,
      117,  757,  160,  129,  128,  144,  130,  757,  112,  145,
      165,  131,  113,  146,  132,  153,  153,  153,  133,  174,
      114,  168,  115,  166,  116,  154,  161,  117,  118,  187,

      169,  179,  119,  171,  172,  120,  121,   51,   49,   49,
       49,  180,  122,  162,  757,  123,  757,  291,  168,  292,
      292,  292,  154,  161,  757,  118,  187,  169,  179,  119,
      171,  172,  120,  121,  757,  188,  181,  189,  180,  122,
      162,  182,  123,  134,  175,  176,  177,  135,  178,  183,
      136,  137,  184,  190,  140,  191,  141,  138,  185,  142,
      139,  143,  188,  181,  189,  186,  192,  198,  182,  199,
      134,  175,  176,  177,  135,  178,  183,  136,  137,  184,
      190,  140,  191,  141,  138,  185,  142,  139,  143,  193,
      208,  194,  186,  192,  198,  195,  199,  200,  202,  204,

      206,  209,  196,  201,  203,  210,  197,  207,  211,  212,
      213,  214,  757,  205,  219,  220,  193,  208,  194,  292,
      292,  292,  195,  228,  200,  202,  204,  206,  209,  196,
      201,  203,  210,  197,  207,  211,  212,  213,  214,  215,
      205,  219,  220,  221,  223,  231,  224,  225,  222,  216,
      228,  232,  226,  229,  217,  218,  227,  230,  233,  234,
      235,  236,  238,  239,  240,  241,  215,  242,  243,  244,
      221,  223,  231,  224,  225,  222,  216,  237,  232,  226,
      229,  217,  218,  227,  230,  233,  234,  235,  236,  238,
      239,  240,  241,  245,  242,  243,  244,  246,  247,  248,

      253,  250,  249,  254,  237,  251,  255,  257,  258,  265,
      266,  252,  267,  268,  269,  757,  272,  273,  274,  256,
      245,  757,  757,  280,  246,  247,  248,  253,  250,  249,
      254,  757,  251,  255,  257,  258,  265,  266,  252,  267,
      268,  269,  270,  272,  273,  274,  256,  259,  275,  260,
      280,  277,  271,  261,  278,  281,  283,  284,  262,  282,
      286,  279,  287,  285,  288,  263,  264,  289,  276,  270,
      290,  757,  757,  757,  259,  275,  260,  293,  277,  271,
      261,  278,  281,  283,  284,  262,  282,  286,  279,  287,
      285,  288,  263,  264,  289,  276,  294,  290,  153,  153,

      153,  295,  296,  297,  293,  298,  299,  300,  154,  301,
      302,  303,  304,  307,  308,  309,  305,  310,  312,  313,
      315,  316,  317,  294,  757,  320,  311,  314,  295,  296,
      297,  306,  298,  299,  300,  154,  301,  302,  303,  304,
      307,  308,  309,  305,  310,  312,  313,  315,  316,  317,
      321,  318,  320,  311,  314,  319,  322,  323,  306,  326,
      327,  324,  328,  329,  330,  331,  332,  333,  334,  337,
      335,  338,  325,  336,  339,  340,  341,  321,  318,  342,
      343,  344,  319,  322,  323,  345,  326,  327,  324,  328,
      329,  330,  331,  332,  333,  334,  337,  335,  338,  325,

      336,  339,  340,  341,  346,  347,  342,  343,  344,  348,
      349,  350,  345,  351,  352,  353,  354,  355,  356,  357,
      358,  360,  363,  364,  365,  361,  366,  367,  757,  370,
      359,  346,  347,  371,  372,  375,  348,  349,  350,  362,
      351,  352,  353,  354,  355,  356,  357,  358,  360,  363,
      364,  365,  361,  366,  367,  368,  370,  359,  373,  376,
      371,  372,  375,  377,  374,  369,  362,  378,  379,  380,
      381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
      391,  392,  368,  393,  396,  373,  376,  397,  398,  399,
      377,  374,  369,  400,  378,  379,  380,  381,  382,  383,

      384,  385,  386,  387,  388,  389,  390,  391,  392,  394,
      393,  396,  401,  402,  397,  398,  399,  403,  404,  395,
      400,  405,  406,  407,  408,  409,  410,  411,  412,  413,
      414,  415,  416,  417,  420,  418,  394,  419,  421,  401,
      402,  422,  423,  424,  403,  404,  395,  425,  405,  406,
      407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
      417,  420,  418,  428,  419,  421,  426,  429,  422,  423,
      424,  430,  427,  432,  425,  431,  433,  434,  435,  436,
      437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
      428,  447,  448,  426,  429,  449,  450,  451,  430,  427,

      432,  452,  431,  433,  434,  435,  436,  437,  438,  439,
      440,  441,  442,  443,  444,  445,  446,  453,  447,  448,
      454,  455,  449,  450,  451,  456,  457,  458,  452,  459,
      460,  461,  462,  463,  464,  465,  466,  467,  468,  469,
      470,  471,  472,  473,  453,  474,  475,  454,  455,  476,
      477,  478,  456,  457,  458,  479,  459,  460,  461,  462,
      463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
      473,  480,  474,  475,  481,  482,  476,  477,  478,  483,
      484,  485,  479,  486,  487,  488,  489,  491,  492,  493,
      494,  495,  496,  497,  498,  499,  500,  490,  480,  501,

      502,  481,  482,  503,  504,  505,  483,  484,  485,  506,
      486,  487,  488,  489,  491,  492,  493,  494,  495,  496,
      497,  498,  499,  500,  490,  507,  501,  502,  508,  509,
      503,  504,  505,  510,  511,  512,  506,  513,  514,  515,
      516,  517,  518,  520,  521,  522,  523,  524,  525,  526,
      527,  528,  507,  529,  530,  508,  509,  531,  519,  532,
      510,  511,  512,  533,  513,  514,  515,  516,  517,  518,
      520,  521,  522,  523,  524,  525,  526,  527,  528,  534,
      529,  530,  535,  536,  531,  519,  532,  537,  538,  539,
      533,  540,  541,  542,  543,  544,  545,  546,  547,  548,

      549,  550,  551,  552,  553,  554,  534,  555,  556,  535,
      536,  557,  558,  559,  537,  538,  539,  560,  540,  541,
      542,  543,  544,  545,  546,  547,  548,  549,  550,  551,
      552,  553,  554,  561,  555,  556,  562,  563,  557,  558,
      559,  564,  565,  566,  560,  567,  568,  569,  570,  571,
      572,  573,  574,  575,  576,  577,  578,  579,  580,  582,
      561,  583,  584,  562,  563,  585,  586,  587,  564,  565,
      566,  588,  567,  568,  569,  570,  571,  572,  573,  574,
      575,  576,  577,  578,  579,  580,  582,  589,  583,  584,
      590,  591,  585,  586,  587,  592,  593,  594,  588,  596,

      595,  597,  598,  599,  600,  601,  602,  603,  604,  605,
      606,  607,  608,  609,  589,  610,  611,  590,  591,  612,
      613,  614,  592,  593,  594,  615,  596,  595,  597,  598,
      599,  600,  601,  602,  603,  604,  605,  606,  607,  608,
      609,  616,  610,  611,  617,  618,  612,  613,  614,  619,
      620,  621,  615,  622,  623,  624,  625,  626,  627,  628,
      629,  630,  631,  632,  633,  634,  635,  636,  616,  637,
      638,  617,  618,  639,  640,  641,  619,  620,  621,  642,
      622,  623,  624,  625,  626,  627,  628,  629,  630,  631,
      632,  633,  634,  635,  636,  643,  637,  638,  645,  646,

      639,  640,  641,  647,  648,  649,  642,  650,  651,  652,
      653,  654,  655,  656,  657,  658,  659,  660,  661,  663,
      664,  665,  643,  666,  667,  645,  646,  668,  669,  670,
      647,  648,  649,  671,  650,  651,  652,  653,  654,  655,
      656,  657,  658,  659,  660,  661,  663,  664,  665,  672,
      666,  667,  673,  674,  668,  669,  670,  675,  676,  677,
      671,  678,  679,  680,  681,  682,  683,  684,  685,  686,
      687,  688,  689,  690,  691,  692,  672,  693,  694,  673,
      674,  695,  696,  697,  675,  676,  677,  698,  678,  679,
      680,  681,  682,  683,  684,  685,  686,  687,  688,  689,

      690,  691,  692,  699,  693,  694,  700,  702,  695,  696,
      697,  703,  704,  705,  698,  706,  707,  708,  709,  710,
      711,  712,  713,  714,  715,  716,  717,  718,  719,  720,
      699,  721,  722,  700,  702,  723,  724,  725,  703,  704,
      705,  726,  706,  707,  708,  709,  710,  711,  712,  713,
      714,  715,  716,  717,  718,  719,  720,  727,  721,  722,
      728,  729,  723,  724,  725,  730,  731,  732,  726,  733,
      734,  735,  736,  737,  738,  739,  740,  741,  742,  743,
      744,  745,  746,  747,  727,  748,  749,  728,  729,  750,
      751,  752,  730,  731,  732,  753,  733,  734,  735,  736,

      737,  738,  739,  740,  741,  742,  743,  744,  745,  746,
      747,  754,  748,  749,  755,  756,  750,  751,  752,  757,
      757,  757,  753,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  754,  757,
      757,  755,  756,   44,   44,   44,   44,   48,  757,   48,
       48,  150,  150,  757,  150,    5,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,

      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757
    } ;

static const flex_int16_t yy_chk[1625] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    7,    7,
        8,    8,   13,   13,   13,   14,   14,   14,   15,   15,
       15,   15,   16,   16,   19,   25,   28,   29,   21,   22,
       35,   25,   19,   22,   19,   21,   21,   22,   43,   19,

       46,   46,   21,   22,  760,   21,   22,  644,   41,   41,
      581,   19,   25,   28,   29,   21,   22,   35,   25,   19,
       22,   19,   21,   21,   22,   43,   19,   20,   20,   21,
       22,   20,   21,   22,   20,   41,   41,   20,   23,   23,
       23,   61,  552,   20,   27,   27,   62,   20,   64,   26,
       23,  473,   27,   26,   20,   20,   48,   27,   20,   45,
       18,   20,   17,   26,   20,   23,   23,   23,   61,   26,
       20,   27,   27,   62,   20,   64,   26,   23,   24,   27,
       26,    9,   57,   30,   27,    5,   24,   30,   32,   24,
       26,   57,   24,   30,   66,   24,   26,   30,   24,   50,

       50,   50,   32,   31,   58,   24,    4,   31,   32,   57,
       30,   31,   58,   24,   30,   32,   24,   31,   57,   24,
       30,   66,   24,   31,   30,   24,  291,  291,  291,   32,
       31,   58,   69,   36,   31,   32,    3,   36,   31,   58,
        0,   36,   59,    0,   31,   59,   37,   36,   40,   37,
       31,   33,   40,   63,   37,   33,   40,   37,    0,   69,
       36,   37,   70,   33,   36,   33,   63,   33,   36,   59,
       33,    0,   59,   37,   36,   40,   37,    0,   33,   40,
       63,   37,   33,   40,   37,   51,   51,   51,   37,   70,
       33,   65,   33,   63,   33,   51,   60,   33,   34,   75,

       65,   72,   34,   68,   68,   34,   34,   49,   49,   49,
       49,   72,   34,   60,    0,   34,    0,  154,   65,  154,
      154,  154,   51,   60,    0,   34,   75,   65,   72,   34,
       68,   68,   34,   34,    0,   76,   73,   77,   72,   34,
       60,   73,   34,   38,   71,   71,   71,   38,   71,   74,
       38,   38,   74,   78,   39,   79,   39,   38,   74,   39,
       38,   39,   76,   73,   77,   74,   80,   82,   73,   83,
       38,   71,   71,   71,   38,   71,   74,   38,   38,   74,
       78,   39,   79,   39,   38,   74,   39,   38,   39,   81,
       88,   81,   74,   80,   82,   81,   83,   84,   85,   86,

       87,   89,   81,   84,   85,   90,   81,   87,   91,   92,
       93,   95,    0,   86,   98,   99,   81,   88,   81,  292,
      292,  292,   81,  103,   84,   85,   86,   87,   89,   81,
       84,   85,   90,   81,   87,   91,   92,   93,   95,   96,
       86,   98,   99,  100,  101,  105,  101,  101,  100,   96,
      103,  106,  102,  104,   96,   96,  102,  104,  107,  108,
      109,  110,  111,  112,  113,  115,   96,  116,  117,  118,
      100,  101,  105,  101,  101,  100,   96,  110,  106,  102,
      104,   96,   96,  102,  104,  107,  108,  109,  110,  111,
      112,  113,  115,  119,  116,  117,  118,  120,  121,  122,

      124,  123,  122,  125,  110,  123,  126,  127,  128,  130,
      131,  123,  132,  133,  134,    0,  136,  137,  137,  126,
      119,    0,    0,  141,  120,  121,  122,  124,  123,  122,
      125,    0,  123,  126,  127,  128,  130,  131,  123,  132,
      133,  134,  135,  136,  137,  137,  126,  129,  139,  129,
      141,  140,  135,  129,  140,  142,  143,  144,  129,  142,
      145,  140,  146,  144,  147,  129,  129,  148,  139,  135,
      149,    0,    0,    0,  129,  139,  129,  156,  140,  135,
      129,  140,  142,  143,  144,  129,  142,  145,  140,  146,
      144,  147,  129,  129,  148,  139,  157,  149,  153,  153,

      153,  158,  159,  163,  156,  164,  165,  166,  153,  167,
      167,  168,  170,  172,  173,  174,  171,  175,  176,  177,
      178,  179,  180,  157,    0,  182,  175,  177,  158,  159,
      163,  171,  164,  165,  166,  153,  167,  167,  168,  170,
      172,  173,  174,  171,  175,  176,  177,  178,  179,  180,
      183,  181,  182,  175,  177,  181,  184,  185,  171,  186,
      187,  185,  188,  189,  190,  191,  193,  194,  195,  197,
      196,  198,  185,  196,  199,  200,  201,  183,  181,  202,
      203,  204,  181,  184,  185,  205,  186,  187,  185,  188,
      189,  190,  191,  193,  194,  195,  197,  196,  198,  185,

      196,  199,  200,  201,  206,  207,  202,  203,  204,  208,
      209,  210,  205,  211,  212,  213,  214,  215,  216,  217,
      218,  219,  222,  223,  224,  221,  225,  226,    0,  228,
      218,  206,  207,  229,  230,  232,  208,  209,  210,  221,
      211,  212,  213,  214,  215,  216,  217,  218,  219,  222,
      223,  224,  221,  225,  226,  227,  228,  218,  231,  233,
      229,  230,  232,  234,  231,  227,  221,  235,  236,  238,
      239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
      249,  250,  227,  251,  253,  231,  233,  255,  256,  257,
      234,  231,  227,  258,  235,  236,  238,  239,  240,  241,

      242,  243,  244,  245,  246,  247,  248,  249,  250,  252,
      251,  253,  259,  260,  255,  256,  257,  261,  262,  252,
      258,  263,  265,  266,  267,  268,  269,  270,  271,  272,
      273,  274,  275,  276,  278,  277,  252,  277,  279,  259,
      260,  280,  282,  283,  261,  262,  252,  284,  263,  265,
      266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
      276,  278,  277,  286,  277,  279,  285,  287,  280,  282,
      283,  288,  285,  289,  284,  288,  290,  293,  294,  295,
      296,  297,  298,  299,  300,  302,  303,  304,  307,  308,
      286,  309,  310,  285,  287,  311,  312,  313,  288,  285,

      289,  314,  288,  290,  293,  294,  295,  296,  297,  298,
      299,  300,  302,  303,  304,  307,  308,  316,  309,  310,
      317,  318,  311,  312,  313,  319,  321,  322,  314,  323,
      324,  325,  327,  328,  331,  332,  333,  334,  335,  336,
      337,  338,  339,  340,  316,  341,  342,  317,  318,  343,
      344,  347,  319,  321,  322,  348,  323,  324,  325,  327,
      328,  331,  332,  333,  334,  335,  336,  337,  338,  339,
      340,  349,  341,  342,  350,  351,  343,  344,  347,  352,
      353,  354,  348,  355,  356,  357,  358,  361,  362,  365,
      368,  371,  372,  373,  374,  375,  376,  358,  349,  377,

      378,  350,  351,  379,  381,  382,  352,  353,  354,  383,
      355,  356,  357,  358,  361,  362,  365,  368,  371,  372,
      373,  374,  375,  376,  358,  384,  377,  378,  385,  387,
      379,  381,  382,  388,  389,  390,  383,  391,  392,  393,
      394,  395,  396,  398,  399,  400,  401,  402,  403,  404,
      405,  407,  384,  408,  409,  385,  387,  410,  396,  411,
      388,  389,  390,  414,  391,  392,  393,  394,  395,  396,
      398,  399,  400,  401,  402,  403,  404,  405,  407,  415,
      408,  409,  416,  418,  410,  396,  411,  419,  420,  421,
      414,  422,  423,  425,  426,  427,  428,  429,  431,  433,

      435,  437,  438,  439,  440,  441,  415,  442,  443,  416,
      418,  444,  445,  447,  419,  420,  421,  448,  422,  423,
      425,  426,  427,  428,  429,  431,  433,  435,  437,  438,
      439,  440,  441,  449,  442,  443,  450,  451,  444,  445,
      447,  452,  453,  455,  448,  456,  457,  458,  459,  460,
      462,  463,  464,  465,  466,  467,  468,  469,  470,  475,
      449,  476,  477,  450,  451,  478,  479,  481,  452,  453,
      455,  482,  456,  457,  458,  459,  460,  462,  463,  464,
      465,  466,  467,  468,  469,  470,  475,  484,  476,  477,
      485,  486,  478,  479,  481,  488,  489,  490,  482,  491,

      490,  492,  494,  496,  497,  498,  499,  500,  501,  502,
      504,  505,  506,  509,  484,  510,  511,  485,  486,  513,
      514,  515,  488,  489,  490,  516,  491,  490,  492,  494,
      496,  497,  498,  499,  500,  501,  502,  504,  505,  506,
      509,  517,  510,  511,  518,  520,  513,  514,  515,  522,
      523,  524,  516,  525,  526,  527,  528,  529,  530,  531,
      532,  533,  534,  535,  537,  538,  539,  540,  517,  542,
      543,  518,  520,  544,  545,  549,  522,  523,  524,  550,
      525,  526,  527,  528,  529,  530,  531,  532,  533,  534,
      535,  537,  538,  539,  540,  551,  542,  543,  556,  558,

      544,  545,  549,  560,  561,  562,  550,  563,  564,  566,
      567,  568,  569,  571,  572,  574,  576,  578,  580,  582,
      584,  589,  551,  591,  593,  556,  558,  594,  595,  597,
      560,  561,  562,  598,  563,  564,  566,  567,  568,  569,
      571,  572,  574,  576,  578,  580,  582,  584,  589,  600,
      591,  593,  602,  604,  594,  595,  597,  605,  606,  608,
      598,  609,  610,  611,  612,  613,  614,  615,  616,  617,
      619,  621,  622,  624,  625,  627,  600,  629,  630,  602,
      604,  631,  632,  635,  605,  606,  608,  638,  609,  610,
      611,  612,  613,  614,  615,  616,  617,  619,  621,  622,

      624,  625,  627,  639,  629,  630,  641,  646,  631,  632,
      635,  647,  652,  653,  638,  656,  657,  658,  663,  664,
      668,  669,  672,  674,  677,  678,  679,  680,  684,  685,
      639,  687,  689,  641,  646,  691,  692,  693,  647,  652,
      653,  694,  656,  657,  658,  663,  664,  668,  669,  672,
      674,  677,  678,  679,  680,  684,  685,  696,  687,  689,
      697,  699,  691,  692,  693,  700,  703,  704,  694,  706,
      708,  711,  714,  716,  720,  724,  725,  726,  727,  729,
      730,  731,  736,  737,  696,  738,  739,  697,  699,  740,
      742,  746,  700,  703,  704,  747,  706,  708,  711,  714,

      716,  720,  724,  725,  726,  727,  729,  730,  731,  736,
      737,  750,  738,  739,  751,  755,  740,  742,  746,    0,
        0,    0,  747,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  750,    0,
        0,  751,  755,  758,  758,  758,  758,  759,    0,  759,
      759,  761,  761,    0,  761,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,

      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757
    } ;

static const flex_int16_t yy_rule_linenum[211] =
    {   0,
       29,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
       90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
      100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
      110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
      120,  121,  122,  123,  124,  125,  126,  127,  128,  129,

      130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
      150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
      160,  161,  162,  163,  164,  165,  166,  167,  168,  169,
      170,  171,  172,  173,  174,  175,  176,  177,  178,  179,
      180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
      190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
      200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
      220,  221,  222,  223,  225,  226,  227,  228,  229,  231,

      233,  234,  239,  249,  258,  263,  264,  265,  266,  269
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#line 2 "lexer.l"

#include "parser.h"
#include "parser_result.h"
#include <sstream>

static thread_local std::stringstream string_buffer;

#line 1381 "lexer.cpp"
#define YY_NO_INPUT 1

#line 1384 "lexer.cpp"

#define INITIAL 0
#define SINGLE_QUOTED_STRING 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */
#line 27 "lexer.l"


#line 1738 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 758 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 757 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 211 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 211 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 212 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 29 "lexer.l"
/* ignore \t\n and space */;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 31 "lexer.l"
{ return ADD; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 32 "lexer.l"
{ return ADMIN; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 33 "lexer.l"
{ return ALL; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 34 "lexer.l"
{ return ALLOCATION; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 35 "lexer.l"
{ return ALTER; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 36 "lexer.l"
{ return ANALYZE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 37 "lexer.l"
{ return AND; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 38 "lexer.l"
{ return AS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 39 "lexer.l"
{ return AST; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 40 "lexer.l"
{ return ASC; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 41 "lexer.l"
{ return BETWEEN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 42 "lexer.l"
{ return BFLOAT16; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 43 "lexer.l"
{ return BIGINT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 44 "lexer.l"
{ return BIT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 45 "lexer.l"
{ return BITMAP; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 46 "lexer.l"
{ return BOOLEAN; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 47 "lexer.l"
{ return BOX; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 48 "lexer.l"
{ return BLOB; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 49 "lexer.l"
{ return BLOCK; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 50 "lexer.l"
{ return BLOCKS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 51 "lexer.l"
{ return BUFFER; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 52 "lexer.l"
{ return BY; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 53 "lexer.l"
{ return CASE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 54 "lexer.l"
{ return CAST; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 55 "lexer.l"
{ return CATALOG; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 56 "lexer.l"
{ return CATALOGS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 57 "lexer.l"
{ return CHUNK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 58 "lexer.l"
{ return CIRCLE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 59 "lexer.l"
{ return COLLECTION; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 60 "lexer.l"
{ return COLUMN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 61 "lexer.l"
{ return COLUMNS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 62 "lexer.l"
{ return COMPACT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 63 "lexer.l"
{ return CONFIGS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 64 "lexer.l"
{ return CONFIG; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 65 "lexer.l"
{ return CONNECT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 66 "lexer.l"
{ return COPY; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 67 "lexer.l"
{ return CREATE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 68 "lexer.l"
{ return CROSS; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 69 "lexer.l"
{ return DATA; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 70 "lexer.l"
{ return DATABASE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 71 "lexer.l"
{ return DATABASES; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 72 "lexer.l"
{ return DATE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 73 "lexer.l"
{ return DATETIME; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 74 "lexer.l"
{ return DAY; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return DAYS; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return DISTINCT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return DOUBLE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return DECIMAL; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return DEFAULT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return DELETE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return DELIMITER; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return DELTA; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return DESC; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return DROP; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return ELSE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return EMBEDDING; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return END; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return EXCEPT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return EXTRACT; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return EXECUTE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return EXISTS; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return EXPLAIN; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 93 "lexer.l"
{ return EXPORT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 94 "lexer.l"
{ return FALSE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 95 "lexer.l"
{ return FILES; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return FLOAT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return FLOAT16; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return FLUSH; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return FOLLOWER; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return FORMAT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return FRAGMENT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return FROM; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return FULL; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return FUSION; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return GLOBAL; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return GROUP; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return HAVING; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return HEADER; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return HOUR; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return HOURS; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return HUGEINT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return IF; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return IGNORE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return IN; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return INDEX; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return INDEXES; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return INNER; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return INSERT; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return INTEGER; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return INT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return INTERSECT; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return INTERVAL; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return INTO; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return IS; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return JOIN; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return KEY; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return LEADER; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return LEARNER; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return LEFT; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return LIKE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return LIMIT; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return LINE; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return LOCK; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return LOG; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return LOGS; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return LOGICAL; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return LSEG; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return MATCH; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return MAXSIM; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return MEMORY; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 141 "lexer.l"
{ return MEMINDEX; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 142 "lexer.l"
{ return MINUTE; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 143 "lexer.l"
{ return MINUTES; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 144 "lexer.l"
{ return MONTH; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 145 "lexer.l"
{ return MONTHS; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 146 "lexer.l"
{ return MULTIVECTOR; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 147 "lexer.l"
{ return NATURAL; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 148 "lexer.l"
{ return NULLABLE; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 149 "lexer.l"
{ return NODE; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 150 "lexer.l"
{ return NODES; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 151 "lexer.l"
{ return NOT; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 152 "lexer.l"
{ return OBJECT; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 153 "lexer.l"
{ return OBJECTS; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 154 "lexer.l"
{ return OFF; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 155 "lexer.l"
{ return OFFSET; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 156 "lexer.l"
{ return ON; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 157 "lexer.l"
{ return OPTIMIZE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 158 "lexer.l"
{ return OR; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 159 "lexer.l"
{ return ORDER; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 160 "lexer.l"
{ return OUTER; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 161 "lexer.l"
{ return PATH; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 162 "lexer.l"
{ return PERSISTENCE; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 163 "lexer.l"
{ return PHYSICAL; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 164 "lexer.l"
{ return PIPELINE; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 165 "lexer.l"
{ return POINT; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 166 "lexer.l"
{ return POLYGON; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 167 "lexer.l"
{ return PREPARE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 168 "lexer.l"
{ return PRIMARY; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 169 "lexer.l"
{ return PROFILE; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 170 "lexer.l"
{ return PROFILES; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 171 "lexer.l"
{ return PROPERTIES; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return QUERIES; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return QUERY; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return RAW; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return REAL; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return RENAME; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return RIGHT; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return ROWLIMIT; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return SEARCH; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return SECOND; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return SECONDS; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return SELECT; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return SESSION; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return SET; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return SEGMENT; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return SEGMENTS; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return SHOW; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return SMALLINT; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return SPARSE; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return STANDALONE; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return TABLE; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return TABLES; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return TENSOR; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return TENSORARRAY; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return TEXT; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return THEN; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return TIME; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return TIMESTAMP; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return TINYINT; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return TO; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return TRANSACTION; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return TRANSACTIONS; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return TRUE; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return UNION; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return UNIQUE; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return UNLOCK; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return UNSIGNED; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return USING; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return UPDATE; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return UUID; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return USE; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return VALUES; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return VARIABLE; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return VARIABLES; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return VARCHAR; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return VECTOR; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return VIEW; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 218 "lexer.l"
{ return VIEWS; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return WHEN; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return WHERE; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return WITH; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 222 "lexer.l"
{ return YEAR; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return YEARS; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return EQUAL; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 226 "lexer.l"
{ return NOT_EQ; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return NOT_EQ; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return LESS_EQ; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return GREATER_EQ; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 201:
#line 234 "lexer.l"
case 202:
YY_RULE_SETUP
#line 234 "lexer.l"
{
    yylval->double_value = atof(yytext);
    return DOUBLE_VALUE;
}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 239 "lexer.l"
{
    errno = 0;
    yylval->long_value = strtoll(yytext, nullptr, 0);
    if (errno) {
        return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
        return 0;
    }
    return LONG_VALUE;
}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 249 "lexer.l"
{
    // total length - 2 of quota + 1 null char
    long str_len = strlen(yytext) - 1;
    yylval->str_value = (char*)malloc(str_len);
    memset(yylval->str_value, 0, str_len);
    memcpy(yylval->str_value, (char*)(yytext + 1), str_len - 1);
    return IDENTIFIER;
}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 258 "lexer.l"
{
    yylval->str_value = strdup(yytext);
    return IDENTIFIER;
}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 263 "lexer.l"
{ BEGIN SINGLE_QUOTED_STRING; string_buffer.clear(); string_buffer.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 264 "lexer.l"
{ string_buffer << '\''; }
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 265 "lexer.l"
{ string_buffer << yytext; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 266 "lexer.l"
{ BEGIN INITIAL; yylval->str_value = strdup(string_buffer.str().c_str()); return STRING; }
	YY_BREAK
case YY_STATE_EOF(SINGLE_QUOTED_STRING):
#line 267 "lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 269 "lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 271 "lexer.l"
ECHO;
	YY_BREAK
#line 2893 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 758 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 758 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 757);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 271 "lexer.l"


int yyerror(const char *msg) {
    fprintf(stderr, "[Why here?] %s\n",msg); return 0;
}

