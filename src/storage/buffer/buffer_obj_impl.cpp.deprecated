// Copyright(C) 2023 InfiniFlow, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module;

#include <cassert>

module infinity_core:buffer_obj.impl;

import :file_worker;
import :fileworker_manager;
import :infinity_exception;
import :logger;
import :file_worker_type;
import :var_file_worker;
import :kv_store;
import :status;
import :virtual_store;
import :var_buffer;

import third_party;

import global_resource_usage;

namespace infinity {

FileWorker::FileWorker(FileWorkerManager *fileworker_mgr, std::unique_ptr<FileWorker> file_worker, u32 id)
    : buffer_mgr_(fileworker_mgr), file_worker_(std::move(file_worker)), id_(id) {
// #ifdef INFINITY_DEBUG
//     GlobalResourceUsage::IncrObjectCount("FileWorker");
// #endif
}

// FileWorker::~FileWorker() {
// #ifdef INFINITY_DEBUG
//     GlobalResourceUsage::DecrObjectCount("FileWorker");
// #endif
// }

void FileWorker::PickForCleanup() {
    std::unique_lock<std::mutex> locker(w_locker_);
    buffer_mgr_->AddToCleanList(this);
}

Status FileWorker::CleanupFile() const { return file_worker_->CleanupFile(); }

void FileWorker::CleanupTempFile() const {
    std::unique_lock<std::mutex> locker(w_locker_);
    file_worker_->CleanupTempFile();
}

void *FileWorker::GetMutPointer() {
    std::unique_lock<std::mutex> locker(w_locker_);
    return file_worker_->GetData();
}

void FileWorker::SetData(void *data) {
    std::unique_lock<std::mutex> locker(w_locker_);
    file_worker_->SetData(data);
    [[maybe_unused]] auto foo = file_worker_->Write();
}

void FileWorker::SetDataSize(size_t size) {
    std::unique_lock<std::mutex> locker(w_locker_);
    file_worker_->SetDataSize(size);
}

} // namespace infinity
