// Copyright(C) 2023 InfiniFlow, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <memory>
#include <string>
#include <vector>

namespace infinity {

enum class QueryNodeType : char {
    TERM,
    AND,
    AND_NOT,
    OR,
    WAND,
    PHRASE,
    PREFIX_TERM,
    SUFFIX_TERM,
    SUBSTRING_TERM,
    NOT,
};

// step 1. get the query tree from parser
// step 2. push down the weight to the leaf term node
// step 3. optimize the query tree
// step 4. create the iterator from the query tree

// QueryNode is the base class for all nodes in the query tree
// It contains a weight for the node
struct QueryNode {
    QueryNodeType type_;
    float weight_ = 1.0f;

    QueryNode() = delete;
    explicit QueryNode(QueryNodeType type) : type_(type) {}

    virtual ~QueryNode() = default;

    virtual std::unique_ptr<QueryNode> OptimizeInPlace(std::unique_ptr<QueryNode> &self_node) = 0;
    virtual void PushDownWeight() = 0;
    float GetWeight() const { return weight_; }
    void MultiplyWeight(float factor) { weight_ *= factor; }
    QueryNodeType GetType() const { return type_; }
};

struct TermQueryNode final : public QueryNode {
    std::string term_;
    std::string column_;
    bool position_{false};
    TermQueryNode() : QueryNode(QueryNodeType::TERM) {}
    std::unique_ptr<QueryNode> OptimizeInPlace(std::unique_ptr<QueryNode> &self_node) final { return std::move(self_node); }
    void PushDownWeight() final {}
};

class MultiQueryNode : public QueryNode {
public:
    MultiQueryNode(QueryNodeType type) : QueryNode(type) {}
    void Add(std::unique_ptr<QueryNode> &&node) { children_.emplace_back(std::move(node)); }
    std::vector<std::unique_ptr<QueryNode>> &GetChildren() { return children_; }
    // const std::vector<std::unique_ptr<QueryNode>> &GetChildren() const { return children_; }
    std::unique_ptr<QueryNode> OptimizeInPlace(std::unique_ptr<QueryNode> &self_node) final {
        for (auto &child : children_) {
            std::unique_ptr<QueryNode> new_child = child->OptimizeInPlace(child);
            child = std::move(new_child);
        }
        return OptimizeInPlaceInner(self_node);
    }
    virtual std::unique_ptr<QueryNode> OptimizeInPlaceInner(std::unique_ptr<QueryNode> &self_node) = 0;
    void PushDownWeight() final {
        float factor = GetWeight();
        for (auto &child : children_) {
            child->MultiplyWeight(factor);
            child->PushDownWeight();
        }
    }

protected:
    std::vector<std::unique_ptr<QueryNode>> children_;
};

class And final : public MultiQueryNode {
public:
    And() : MultiQueryNode(QueryNodeType::AND) {}
    std::unique_ptr<QueryNode> OptimizeInPlaceInner(std::unique_ptr<QueryNode> &self_node) final;
};
class AndNot final : public MultiQueryNode {
public:
    AndNot() : MultiQueryNode(QueryNodeType::AND_NOT) {}
    std::unique_ptr<QueryNode> OptimizeInPlaceInner(std::unique_ptr<QueryNode> &self_node) final;
};
class Or final : public MultiQueryNode {
public:
    Or() : MultiQueryNode(QueryNodeType::OR) {}
    std::unique_ptr<QueryNode> OptimizeInPlaceInner(std::unique_ptr<QueryNode> &self_node) final;
};
class Wand final : public MultiQueryNode {
public:
    Wand() : MultiQueryNode(QueryNodeType::WAND) {}
    std::unique_ptr<QueryNode> OptimizeInPlaceInner(std::unique_ptr<QueryNode> &self_node) final;
};
class Phrase final : public MultiQueryNode {
public:
    Phrase() : MultiQueryNode(QueryNodeType::PHRASE) {}
    std::unique_ptr<QueryNode> OptimizeInPlaceInner(std::unique_ptr<QueryNode> &self_node) final;
};
class PrefixTerm final : public MultiQueryNode {
public:
    PrefixTerm() : MultiQueryNode(QueryNodeType::PREFIX_TERM) {}
    std::unique_ptr<QueryNode> OptimizeInPlaceInner(std::unique_ptr<QueryNode> &self_node) final;
};
class SuffixTerm final : public MultiQueryNode {
public:
    SuffixTerm() : MultiQueryNode(QueryNodeType::SUFFIX_TERM) {}
    std::unique_ptr<QueryNode> OptimizeInPlaceInner(std::unique_ptr<QueryNode> &self_node) final;
};
class SubstringTerm final : public MultiQueryNode {
public:
    SubstringTerm() : MultiQueryNode(QueryNodeType::SUBSTRING_TERM) {}
    std::unique_ptr<QueryNode> OptimizeInPlaceInner(std::unique_ptr<QueryNode> &self_node) final;
};

// Not will be generated by parser
// need to be optimized to AndNot
// otherwise, query statement is invalid
class Not final : public MultiQueryNode {
public:
    Not() : MultiQueryNode(QueryNodeType::NOT) {}
    std::unique_ptr<QueryNode> OptimizeInPlaceInner(std::unique_ptr<QueryNode> &self_node) final;
};

} // namespace infinity