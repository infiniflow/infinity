// Copyright(C) 2023 InfiniFlow, Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package infinity_brpc_proto;

option cc_generic_services = true;

message Options {}

message CreateDatabaseRequest {
  required uint64 session_id = 1;
  required string db_name = 2;
  optional Options options = 3;
}

message DropDatabaseRequest {
  required uint64 session_id = 1;
  required string db_name = 2;
  optional Options options = 3;
}

message CreateTableRequest {
  required uint64 session_id = 1;
  required string db_name = 2;
  required string table_name = 3;
  repeated ColumnDef column_defs = 4;
  // repeated ColumnConstraint column_constraints = 4;
  optional Options options = 5;
}

message DropTableRequest {
  required uint64 session_id = 1;
  required string db_name = 2;
  required string table_name = 3;
  optional Options options = 4;
}

message ColumnConstraint {
  required string column_name = 1;
  repeated Constraint constraint = 2;
}

enum Constraint {
  kNull = 0;
  kNotNull = 1;
  kPrimaryKey = 2;
  kUnique = 3;
}

message ColumnDef {
  required int32 id = 1;
  required string  name = 2;
  required DataType column_type = 3;
  repeated Constraint constraints = 4;
}

message DataType {
  required LogicType logic_type = 1;
  oneof PhysicalType {
    NumberType number_type = 2;
    VarcharType varchar_type = 3;
    EmbeddingType embedding_type = 4;
  }
}

enum LogicType {
  Boolean = 0;
  TinyInt = 1;
  SmallInt = 2;
  Integer = 3;
  BigInt = 4;
  HugeInt = 5;
  Decimal = 6;
  Float = 7;
  Double = 8;
  Varchar = 9;
  Embedding = 10;
  Invalid = 11;
}

enum ElementType {
  kElemBit = 0;
  kElemInt8 = 2;
  kElemInt16 = 3;
  kElemInt32 = 4;
  kElemInt64 = 7;
  kElemFloat = 8;
  kElemDouble = 9;
}

message EmbeddingType {
  required ElementType embedding_data_type = 1;
  required int32 dimension = 2;
}

message VarcharType {
  required int64 width = 1;
}

message NumberType {}

message InsertRequest {
  required uint64 session_id = 1;
  required string db_name = 2;
  required string table_name = 3;
  repeated string column_names = 4;
  repeated Field fields = 5;
}

message Field {
  repeated ParsedExpr parse_exprs = 1;
}


message ImportRequest {
  required uint64 session_id = 1;
  required string db_name = 2;
  required string table_name = 3;
  required string file_path = 4;
  optional ImportOptions import_options = 5;


  message ImportOptions{
    required string delimiter = 1;
    required CopyFileType file_type = 2;
    required string schema_name = 3;
    required bool  copy_from = 4;
    required bool  has_header = 5;
    enum CopyFileType {
      kCSV = 0;
      kJSON = 1;
      kFVECS = 2;
    }
  }
}

// This message 'ParsedExpr' is used in forming Select SQL statements.
message ParsedExpr {
  optional string alias = 1;
  oneof ParsedExprType {
    ConstantExpr constant_expr = 2;
    ColumnExpr column_expr = 3;
    FunctionExpr function_expr = 4;
    KnnExpr knn_expr = 5;

    // The following fields represent functionalities not yet implemented.
    // When implementation is finished remove the comments.
    // between_expr between_expr = 6;
    // subquery_expr subquery_expr = 8;
    // case_expr case_expr = 9;
    // cast_expr cast_expr = 10;
    // in_expr in_expr = 11;
  }
}

message ColumnExpr {
  repeated string column_name = 1;
  optional bool star = 2;
}

message BetweenExpr {
  required ParsedExpr value = 1;
  required ParsedExpr upper_bound = 2;
  required ParsedExpr lower_bound = 3;
}

message InExpr {
  required ParsedExpr left = 1;
  repeated ParsedExpr arguments = 2;
  required bool not_in = 3;
}

message ConstantExpr {
  enum LiteralType {
    kBoolean = 0;
    kDouble = 1;
    kString = 2;
    kInt64 = 3;
    kNull = 4;
    kIntegerArray = 5;
    kDoubleArray = 6;
  }
  required LiteralType literal_type = 1;

  optional bool bool_value = 2;
  optional int64 i64_value = 3;
  optional double f64_value = 4;
  optional string str_value = 5;
  optional string date_value = 6;
  repeated int64 long_array = 7;
  repeated double double_array = 8;
}

message FunctionExpr {
  required string function_name = 1;
  repeated ParsedExpr arguments = 2;
}

message KnnExpr {
  required ParsedExpr column_expr = 1;
  repeated string embedding_data = 2; // ? int or float
  required int64 dimension = 3;
  required EmbeddingDataType embedding_data_type = 4;
  required KnnDistanceType distance_type = 5;

  enum KnnDistanceType {
    L2 = 0;
    Cosine = 1;
    InnerProduct = 2;
    Hamming = 3;
  }
  enum EmbeddingDataType {
    ElemBool = 0;
    ElemTinyInt = 1;
    ElemSmallInt = 2;
    ElemInteger = 3;
    ElemBigInt = 4;
    ElemFloat = 7;
    ElemDouble = 8;
  }
}

message SelectStatement {
  required uint64 session_id = 1;
  required string db_name = 2;
  required string table_name = 3;

  repeated ParsedExpr select_list = 4;
  optional ParsedExpr where_expr = 5;
  repeated ParsedExpr group_by_list = 6;
  optional ParsedExpr limit_expr = 7;
  optional ParsedExpr offset_expr = 8;
  optional ParsedExpr search_expr = 9;
}


message EchoRequest {
  required string message = 1;
};

message EchoResponse {
  required string message = 1;
};

// network
service InfinityBrpcService {
  rpc Connect(Empty) returns (CommonResponse);
  rpc Echo(EchoRequest) returns (EchoResponse);
  rpc DisConnect(DisConnectRequest) returns (CommonResponse);
  rpc CreateDatabase(CreateDatabaseRequest) returns (CommonResponse);
  rpc DropDatabase(DropDatabaseRequest) returns (CommonResponse);
  rpc ListDatabase(ListDatabaseRequest) returns (ListDatabaseResponse);
  rpc DescribeDatabase(DescribeDatabaseRequest) returns (DescribeDatabaseResponse);
  rpc GetDatabase(GetDatabaseRequest) returns (CommonResponse);

  rpc CreateTable(CreateTableRequest) returns (CommonResponse);
  rpc DropTable(DropTableRequest) returns (CommonResponse);
  rpc ListTable(ListTableRequest) returns (ListTableResponse);
  rpc DescribeTable(DescribeTableRequest) returns (DescribeTableResponse);
  rpc GetTable(GetTableRequest) returns (CommonResponse);

  rpc Insert(InsertRequest) returns (CommonResponse);
  rpc Import(ImportRequest) returns (CommonResponse);
  // rpc Update(Update) returns (Empty);
  // rpc Delete(Delete) returns (Empty);
  rpc CreateIndex(CreateIndexRequest) returns (CommonResponse);
  rpc DropIndex(DropIndexRequest) returns (CommonResponse);
  rpc Search(SelectStatement) returns (SelectResponse);
}

message DisConnectRequest{
  required uint64 session_id = 1;
}

message Empty{}

message CommonResponse{
  required  bool success = 1;
  optional string error_msg = 2;
  optional uint64 session_id = 3;
}

message SelectResponse {
  required bool success = 1;
  optional string error_msg = 2;

  repeated ColumnDef column_defs = 3;
  repeated ColumnField column_fields = 4;
}

message ColumnField {
  required ColumnType column_type = 1;
  required bytes column_vector = 2;   // all in one column vector
}

enum ColumnType {
  kColumnBool = 0;
  kColumnInt8 = 1;
  kColumnInt16 = 2;
  kColumnInt32 = 3;
  kColumnInt64 = 4;
  kColumnFloat = 5;
  kColumnDouble = 6;
  kColumnVarchar = 10;
  kColumnEmbedding = 11;
  kColumnInvalid = 12;
}


message DataBlock {
  required int32 row_count = 1;
  required int32 column_count = 2;
  required int32 capacity = 3;
  repeated ColumnVector column_vectors = 4;
  message ColumnVector{
    repeated ColumnVector column_vectors = 1;
  }
}

message ListDatabaseRequest {
  required uint64 session_id = 1;
}

message ListDatabaseResponse{
  repeated string db_names = 1;
  required bool success = 2;
  optional string error_msg = 3;
}

message DescribeDatabaseRequest {
  required uint64 session_id = 1;
  required string db_name = 2;

}

message DescribeDatabaseResponse {
  required string db_name = 1;
  required int32  db_id = 2;
  required int32  num_segments = 3;
  required int32  num_blocks = 4;
}


message ListTableRequest {
  required uint64 session_id = 1;
  required string db_name = 2;
}

message ListTableResponse {
  repeated string table_name = 1;
  required bool success = 2;
  optional string error_msg = 3;
}


message DescribeTableRequest {
  required uint64 session_id = 1;
  required string db_name = 2;

}

message DescribeTableResponse {
  required string table_name = 1;
  required int32  table_id = 2;
  optional int32  num_segments = 3;
  optional int32  num_blocks = 4;
}


message GetDatabaseRequest {
  required uint64 session_id = 1;
  required string db_name = 2;

}

message GetTableRequest {
  required uint64 session_id = 1;
  required string db_name = 2;
  required string table_name = 3;
}

message CreateIndexRequest {
  // Session related attributes
  required uint64 session_id = 1;
  optional Options options = 2;

  // Database related attributes
  required string db_name = 3;
  required string table_name = 4;
  required string index_name = 5;
  required string method_type = 6;
  repeated string column_names = 7;
  repeated InitParameter index_para_list = 8;
}

message InitParameter {
  required string para_name = 1;
  required string para_value = 2;
}

message DropIndexRequest {
  required uint64 session_id = 1;
  required string db_name = 2;
  required string table_name = 3;
  required string index_name = 4;
}



