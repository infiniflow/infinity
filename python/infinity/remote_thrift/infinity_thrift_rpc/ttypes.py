#
# Autogenerated by Thrift Compiler (0.20.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class LogicType(object):
    Boolean = 0
    TinyInt = 1
    SmallInt = 2
    Integer = 3
    BigInt = 4
    HugeInt = 5
    Decimal = 6
    Float = 7
    Double = 8
    Varchar = 9
    Embedding = 10
    Invalid = 11

    _VALUES_TO_NAMES = {
        0: "Boolean",
        1: "TinyInt",
        2: "SmallInt",
        3: "Integer",
        4: "BigInt",
        5: "HugeInt",
        6: "Decimal",
        7: "Float",
        8: "Double",
        9: "Varchar",
        10: "Embedding",
        11: "Invalid",
    }

    _NAMES_TO_VALUES = {
        "Boolean": 0,
        "TinyInt": 1,
        "SmallInt": 2,
        "Integer": 3,
        "BigInt": 4,
        "HugeInt": 5,
        "Decimal": 6,
        "Float": 7,
        "Double": 8,
        "Varchar": 9,
        "Embedding": 10,
        "Invalid": 11,
    }


class CreateConflict(object):
    Ignore = 0
    Error = 1
    Replace = 2

    _VALUES_TO_NAMES = {
        0: "Ignore",
        1: "Error",
        2: "Replace",
    }

    _NAMES_TO_VALUES = {
        "Ignore": 0,
        "Error": 1,
        "Replace": 2,
    }


class DropConflict(object):
    Ignore = 0
    Error = 1

    _VALUES_TO_NAMES = {
        0: "Ignore",
        1: "Error",
    }

    _NAMES_TO_VALUES = {
        "Ignore": 0,
        "Error": 1,
    }


class ElementType(object):
    ElementBit = 0
    ElementInt8 = 1
    ElementInt16 = 2
    ElementInt32 = 3
    ElementInt64 = 4
    ElementFloat32 = 5
    ElementFloat64 = 6

    _VALUES_TO_NAMES = {
        0: "ElementBit",
        1: "ElementInt8",
        2: "ElementInt16",
        3: "ElementInt32",
        4: "ElementInt64",
        5: "ElementFloat32",
        6: "ElementFloat64",
    }

    _NAMES_TO_VALUES = {
        "ElementBit": 0,
        "ElementInt8": 1,
        "ElementInt16": 2,
        "ElementInt32": 3,
        "ElementInt64": 4,
        "ElementFloat32": 5,
        "ElementFloat64": 6,
    }


class Constraint(object):
    PrimaryKey = 0
    NotNull = 1
    Null = 2
    Unique = 3

    _VALUES_TO_NAMES = {
        0: "PrimaryKey",
        1: "NotNull",
        2: "Null",
        3: "Unique",
    }

    _NAMES_TO_VALUES = {
        "PrimaryKey": 0,
        "NotNull": 1,
        "Null": 2,
        "Unique": 3,
    }


class LiteralType(object):
    Boolean = 0
    Double = 1
    String = 2
    Int64 = 3
    Null = 4
    IntegerArray = 5
    DoubleArray = 6

    _VALUES_TO_NAMES = {
        0: "Boolean",
        1: "Double",
        2: "String",
        3: "Int64",
        4: "Null",
        5: "IntegerArray",
        6: "DoubleArray",
    }

    _NAMES_TO_VALUES = {
        "Boolean": 0,
        "Double": 1,
        "String": 2,
        "Int64": 3,
        "Null": 4,
        "IntegerArray": 5,
        "DoubleArray": 6,
    }


class KnnDistanceType(object):
    L2 = 0
    Cosine = 1
    InnerProduct = 2
    Hamming = 3

    _VALUES_TO_NAMES = {
        0: "L2",
        1: "Cosine",
        2: "InnerProduct",
        3: "Hamming",
    }

    _NAMES_TO_VALUES = {
        "L2": 0,
        "Cosine": 1,
        "InnerProduct": 2,
        "Hamming": 3,
    }


class CopyFileType(object):
    CSV = 0
    JSON = 1
    JSONL = 2
    FVECS = 3

    _VALUES_TO_NAMES = {
        0: "CSV",
        1: "JSON",
        2: "JSONL",
        3: "FVECS",
    }

    _NAMES_TO_VALUES = {
        "CSV": 0,
        "JSON": 1,
        "JSONL": 2,
        "FVECS": 3,
    }


class ColumnType(object):
    ColumnBool = 0
    ColumnInt8 = 1
    ColumnInt16 = 2
    ColumnInt32 = 3
    ColumnInt64 = 4
    ColumnFloat32 = 5
    ColumnFloat64 = 6
    ColumnVarchar = 7
    ColumnEmbedding = 8
    ColumnRowID = 9
    ColumnInvalid = 10

    _VALUES_TO_NAMES = {
        0: "ColumnBool",
        1: "ColumnInt8",
        2: "ColumnInt16",
        3: "ColumnInt32",
        4: "ColumnInt64",
        5: "ColumnFloat32",
        6: "ColumnFloat64",
        7: "ColumnVarchar",
        8: "ColumnEmbedding",
        9: "ColumnRowID",
        10: "ColumnInvalid",
    }

    _NAMES_TO_VALUES = {
        "ColumnBool": 0,
        "ColumnInt8": 1,
        "ColumnInt16": 2,
        "ColumnInt32": 3,
        "ColumnInt64": 4,
        "ColumnFloat32": 5,
        "ColumnFloat64": 6,
        "ColumnVarchar": 7,
        "ColumnEmbedding": 8,
        "ColumnRowID": 9,
        "ColumnInvalid": 10,
    }


class IndexType(object):
    IVFFlat = 0
    HnswLVQ = 1
    Hnsw = 2
    FullText = 3

    _VALUES_TO_NAMES = {
        0: "IVFFlat",
        1: "HnswLVQ",
        2: "Hnsw",
        3: "FullText",
    }

    _NAMES_TO_VALUES = {
        "IVFFlat": 0,
        "HnswLVQ": 1,
        "Hnsw": 2,
        "FullText": 3,
    }


class ExplainType(object):
    Analyze = 0
    Ast = 1
    UnOpt = 2
    Opt = 3
    Physical = 4
    Pipeline = 5
    Fragment = 6

    _VALUES_TO_NAMES = {
        0: "Analyze",
        1: "Ast",
        2: "UnOpt",
        3: "Opt",
        4: "Physical",
        5: "Pipeline",
        6: "Fragment",
    }

    _NAMES_TO_VALUES = {
        "Analyze": 0,
        "Ast": 1,
        "UnOpt": 2,
        "Opt": 3,
        "Physical": 4,
        "Pipeline": 5,
        "Fragment": 6,
    }


class Property(object):
    """
    Attributes:
     - key
     - value

    """


    def __init__(self, key=None, value=None,):
        self.key = key
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Property')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CreateOption(object):
    """
    Attributes:
     - conflict_type
     - properties

    """


    def __init__(self, conflict_type=None, properties=[
    ],):
        self.conflict_type = conflict_type
        if properties is self.thrift_spec[2][4]:
            properties = [
            ]
        self.properties = properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.conflict_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.properties = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Property()
                        _elem5.read(iprot)
                        self.properties.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreateOption')
        if self.conflict_type is not None:
            oprot.writeFieldBegin('conflict_type', TType.I32, 1)
            oprot.writeI32(self.conflict_type)
            oprot.writeFieldEnd()
        if self.properties is not None:
            oprot.writeFieldBegin('properties', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.properties))
            for iter6 in self.properties:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DropOption(object):
    """
    Attributes:
     - conflict_type

    """


    def __init__(self, conflict_type=None,):
        self.conflict_type = conflict_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.conflict_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DropOption')
        if self.conflict_type is not None:
            oprot.writeFieldBegin('conflict_type', TType.I32, 1)
            oprot.writeI32(self.conflict_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NumberType(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NumberType')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VarcharType(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VarcharType')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EmbeddingType(object):
    """
    Attributes:
     - dimension
     - element_type

    """


    def __init__(self, dimension=None, element_type=None,):
        self.dimension = dimension
        self.element_type = element_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dimension = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.element_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EmbeddingType')
        if self.dimension is not None:
            oprot.writeFieldBegin('dimension', TType.I32, 1)
            oprot.writeI32(self.dimension)
            oprot.writeFieldEnd()
        if self.element_type is not None:
            oprot.writeFieldBegin('element_type', TType.I32, 2)
            oprot.writeI32(self.element_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PhysicalType(object):
    """
    Attributes:
     - number_type
     - varchar_type
     - embedding_type

    """


    def __init__(self, number_type=None, varchar_type=None, embedding_type=None,):
        self.number_type = number_type
        self.varchar_type = varchar_type
        self.embedding_type = embedding_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.number_type = NumberType()
                    self.number_type.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.varchar_type = VarcharType()
                    self.varchar_type.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.embedding_type = EmbeddingType()
                    self.embedding_type.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PhysicalType')
        if self.number_type is not None:
            oprot.writeFieldBegin('number_type', TType.STRUCT, 1)
            self.number_type.write(oprot)
            oprot.writeFieldEnd()
        if self.varchar_type is not None:
            oprot.writeFieldBegin('varchar_type', TType.STRUCT, 2)
            self.varchar_type.write(oprot)
            oprot.writeFieldEnd()
        if self.embedding_type is not None:
            oprot.writeFieldBegin('embedding_type', TType.STRUCT, 3)
            self.embedding_type.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataType(object):
    """
    Attributes:
     - logic_type
     - physical_type

    """


    def __init__(self, logic_type=None, physical_type=None,):
        self.logic_type = logic_type
        self.physical_type = physical_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.logic_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.physical_type = PhysicalType()
                    self.physical_type.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DataType')
        if self.logic_type is not None:
            oprot.writeFieldBegin('logic_type', TType.I32, 1)
            oprot.writeI32(self.logic_type)
            oprot.writeFieldEnd()
        if self.physical_type is not None:
            oprot.writeFieldBegin('physical_type', TType.STRUCT, 2)
            self.physical_type.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ParsedExprType(object):
    """
    Attributes:
     - constant_expr
     - column_expr
     - function_expr
     - between_expr
     - knn_expr
     - match_expr
     - fusion_expr
     - search_expr

    """


    def __init__(self, constant_expr=None, column_expr=None, function_expr=None, between_expr=None, knn_expr=None, match_expr=None, fusion_expr=None, search_expr=None,):
        self.constant_expr = constant_expr
        self.column_expr = column_expr
        self.function_expr = function_expr
        self.between_expr = between_expr
        self.knn_expr = knn_expr
        self.match_expr = match_expr
        self.fusion_expr = fusion_expr
        self.search_expr = search_expr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.constant_expr = ConstantExpr()
                    self.constant_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.column_expr = ColumnExpr()
                    self.column_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.function_expr = FunctionExpr()
                    self.function_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.between_expr = BetweenExpr()
                    self.between_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.knn_expr = KnnExpr()
                    self.knn_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.match_expr = MatchExpr()
                    self.match_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.fusion_expr = FusionExpr()
                    self.fusion_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.search_expr = SearchExpr()
                    self.search_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ParsedExprType')
        if self.constant_expr is not None:
            oprot.writeFieldBegin('constant_expr', TType.STRUCT, 1)
            self.constant_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.column_expr is not None:
            oprot.writeFieldBegin('column_expr', TType.STRUCT, 2)
            self.column_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.function_expr is not None:
            oprot.writeFieldBegin('function_expr', TType.STRUCT, 3)
            self.function_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.between_expr is not None:
            oprot.writeFieldBegin('between_expr', TType.STRUCT, 4)
            self.between_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.knn_expr is not None:
            oprot.writeFieldBegin('knn_expr', TType.STRUCT, 5)
            self.knn_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.match_expr is not None:
            oprot.writeFieldBegin('match_expr', TType.STRUCT, 6)
            self.match_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.fusion_expr is not None:
            oprot.writeFieldBegin('fusion_expr', TType.STRUCT, 7)
            self.fusion_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.search_expr is not None:
            oprot.writeFieldBegin('search_expr', TType.STRUCT, 8)
            self.search_expr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ParsedExpr(object):
    """
    Attributes:
     - type
     - alias_name

    """


    def __init__(self, type=None, alias_name=None,):
        self.type = type
        self.alias_name = alias_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.type = ParsedExprType()
                    self.type.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.alias_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ParsedExpr')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRUCT, 1)
            self.type.write(oprot)
            oprot.writeFieldEnd()
        if self.alias_name is not None:
            oprot.writeFieldBegin('alias_name', TType.STRING, 2)
            oprot.writeString(self.alias_name.encode('utf-8') if sys.version_info[0] == 2 else self.alias_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ColumnExpr(object):
    """
    Attributes:
     - column_name
     - star

    """


    def __init__(self, column_name=[
    ], star=None,):
        if column_name is self.thrift_spec[1][4]:
            column_name = [
            ]
        self.column_name = column_name
        self.star = star

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.column_name = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.column_name.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.star = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ColumnExpr')
        if self.column_name is not None:
            oprot.writeFieldBegin('column_name', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.column_name))
            for iter13 in self.column_name:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.star is not None:
            oprot.writeFieldBegin('star', TType.BOOL, 2)
            oprot.writeBool(self.star)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EmbeddingData(object):
    """
    Attributes:
     - bool_array_value
     - i8_array_value
     - i16_array_value
     - i32_array_value
     - i64_array_value
     - f32_array_value
     - f64_array_value

    """


    def __init__(self, bool_array_value=None, i8_array_value=None, i16_array_value=None, i32_array_value=None, i64_array_value=None, f32_array_value=None, f64_array_value=None,):
        self.bool_array_value = bool_array_value
        self.i8_array_value = i8_array_value
        self.i16_array_value = i16_array_value
        self.i32_array_value = i32_array_value
        self.i64_array_value = i64_array_value
        self.f32_array_value = f32_array_value
        self.f64_array_value = f64_array_value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.bool_array_value = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readBool()
                        self.bool_array_value.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.i8_array_value = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = iprot.readBinary()
                        self.i8_array_value.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.i16_array_value = []
                    (_etype29, _size26) = iprot.readListBegin()
                    for _i30 in range(_size26):
                        _elem31 = iprot.readI16()
                        self.i16_array_value.append(_elem31)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.i32_array_value = []
                    (_etype35, _size32) = iprot.readListBegin()
                    for _i36 in range(_size32):
                        _elem37 = iprot.readI32()
                        self.i32_array_value.append(_elem37)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.i64_array_value = []
                    (_etype41, _size38) = iprot.readListBegin()
                    for _i42 in range(_size38):
                        _elem43 = iprot.readI64()
                        self.i64_array_value.append(_elem43)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.f32_array_value = []
                    (_etype47, _size44) = iprot.readListBegin()
                    for _i48 in range(_size44):
                        _elem49 = iprot.readDouble()
                        self.f32_array_value.append(_elem49)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.f64_array_value = []
                    (_etype53, _size50) = iprot.readListBegin()
                    for _i54 in range(_size50):
                        _elem55 = iprot.readDouble()
                        self.f64_array_value.append(_elem55)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EmbeddingData')
        if self.bool_array_value is not None:
            oprot.writeFieldBegin('bool_array_value', TType.LIST, 1)
            oprot.writeListBegin(TType.BOOL, len(self.bool_array_value))
            for iter56 in self.bool_array_value:
                oprot.writeBool(iter56)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.i8_array_value is not None:
            oprot.writeFieldBegin('i8_array_value', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.i8_array_value))
            for iter57 in self.i8_array_value:
                oprot.writeBinary(iter57)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.i16_array_value is not None:
            oprot.writeFieldBegin('i16_array_value', TType.LIST, 3)
            oprot.writeListBegin(TType.I16, len(self.i16_array_value))
            for iter58 in self.i16_array_value:
                oprot.writeI16(iter58)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.i32_array_value is not None:
            oprot.writeFieldBegin('i32_array_value', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.i32_array_value))
            for iter59 in self.i32_array_value:
                oprot.writeI32(iter59)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.i64_array_value is not None:
            oprot.writeFieldBegin('i64_array_value', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.i64_array_value))
            for iter60 in self.i64_array_value:
                oprot.writeI64(iter60)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.f32_array_value is not None:
            oprot.writeFieldBegin('f32_array_value', TType.LIST, 6)
            oprot.writeListBegin(TType.DOUBLE, len(self.f32_array_value))
            for iter61 in self.f32_array_value:
                oprot.writeDouble(iter61)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.f64_array_value is not None:
            oprot.writeFieldBegin('f64_array_value', TType.LIST, 7)
            oprot.writeListBegin(TType.DOUBLE, len(self.f64_array_value))
            for iter62 in self.f64_array_value:
                oprot.writeDouble(iter62)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InitParameter(object):
    """
    Attributes:
     - param_name
     - param_value

    """


    def __init__(self, param_name=None, param_value=None,):
        self.param_name = param_name
        self.param_value = param_value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.param_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.param_value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InitParameter')
        if self.param_name is not None:
            oprot.writeFieldBegin('param_name', TType.STRING, 1)
            oprot.writeString(self.param_name.encode('utf-8') if sys.version_info[0] == 2 else self.param_name)
            oprot.writeFieldEnd()
        if self.param_value is not None:
            oprot.writeFieldBegin('param_value', TType.STRING, 2)
            oprot.writeString(self.param_value.encode('utf-8') if sys.version_info[0] == 2 else self.param_value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class KnnExpr(object):
    """
    Attributes:
     - column_expr
     - embedding_data
     - embedding_data_type
     - distance_type
     - topn
     - opt_params

    """


    def __init__(self, column_expr=None, embedding_data=None, embedding_data_type=None, distance_type=None, topn=None, opt_params=[
    ],):
        self.column_expr = column_expr
        self.embedding_data = embedding_data
        self.embedding_data_type = embedding_data_type
        self.distance_type = distance_type
        self.topn = topn
        if opt_params is self.thrift_spec[6][4]:
            opt_params = [
            ]
        self.opt_params = opt_params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.column_expr = ColumnExpr()
                    self.column_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.embedding_data = EmbeddingData()
                    self.embedding_data.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.embedding_data_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.distance_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.topn = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.opt_params = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = InitParameter()
                        _elem68.read(iprot)
                        self.opt_params.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('KnnExpr')
        if self.column_expr is not None:
            oprot.writeFieldBegin('column_expr', TType.STRUCT, 1)
            self.column_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.embedding_data is not None:
            oprot.writeFieldBegin('embedding_data', TType.STRUCT, 2)
            self.embedding_data.write(oprot)
            oprot.writeFieldEnd()
        if self.embedding_data_type is not None:
            oprot.writeFieldBegin('embedding_data_type', TType.I32, 3)
            oprot.writeI32(self.embedding_data_type)
            oprot.writeFieldEnd()
        if self.distance_type is not None:
            oprot.writeFieldBegin('distance_type', TType.I32, 4)
            oprot.writeI32(self.distance_type)
            oprot.writeFieldEnd()
        if self.topn is not None:
            oprot.writeFieldBegin('topn', TType.I64, 5)
            oprot.writeI64(self.topn)
            oprot.writeFieldEnd()
        if self.opt_params is not None:
            oprot.writeFieldBegin('opt_params', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.opt_params))
            for iter69 in self.opt_params:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MatchExpr(object):
    """
    Attributes:
     - fields
     - matching_text
     - options_text

    """


    def __init__(self, fields=None, matching_text=None, options_text=None,):
        self.fields = fields
        self.matching_text = matching_text
        self.options_text = options_text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fields = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.matching_text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.options_text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MatchExpr')
        if self.fields is not None:
            oprot.writeFieldBegin('fields', TType.STRING, 1)
            oprot.writeString(self.fields.encode('utf-8') if sys.version_info[0] == 2 else self.fields)
            oprot.writeFieldEnd()
        if self.matching_text is not None:
            oprot.writeFieldBegin('matching_text', TType.STRING, 2)
            oprot.writeString(self.matching_text.encode('utf-8') if sys.version_info[0] == 2 else self.matching_text)
            oprot.writeFieldEnd()
        if self.options_text is not None:
            oprot.writeFieldBegin('options_text', TType.STRING, 3)
            oprot.writeString(self.options_text.encode('utf-8') if sys.version_info[0] == 2 else self.options_text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FusionExpr(object):
    """
    Attributes:
     - method
     - options_text

    """


    def __init__(self, method=None, options_text=None,):
        self.method = method
        self.options_text = options_text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.options_text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FusionExpr')
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 1)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.options_text is not None:
            oprot.writeFieldBegin('options_text', TType.STRING, 2)
            oprot.writeString(self.options_text.encode('utf-8') if sys.version_info[0] == 2 else self.options_text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SearchExpr(object):
    """
    Attributes:
     - match_exprs
     - knn_exprs
     - fusion_expr

    """


    def __init__(self, match_exprs=None, knn_exprs=None, fusion_expr=None,):
        self.match_exprs = match_exprs
        self.knn_exprs = knn_exprs
        self.fusion_expr = fusion_expr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.match_exprs = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = MatchExpr()
                        _elem75.read(iprot)
                        self.match_exprs.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.knn_exprs = []
                    (_etype79, _size76) = iprot.readListBegin()
                    for _i80 in range(_size76):
                        _elem81 = KnnExpr()
                        _elem81.read(iprot)
                        self.knn_exprs.append(_elem81)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.fusion_expr = FusionExpr()
                    self.fusion_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SearchExpr')
        if self.match_exprs is not None:
            oprot.writeFieldBegin('match_exprs', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.match_exprs))
            for iter82 in self.match_exprs:
                iter82.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.knn_exprs is not None:
            oprot.writeFieldBegin('knn_exprs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.knn_exprs))
            for iter83 in self.knn_exprs:
                iter83.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.fusion_expr is not None:
            oprot.writeFieldBegin('fusion_expr', TType.STRUCT, 3)
            self.fusion_expr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ConstantExpr(object):
    """
    Attributes:
     - literal_type
     - bool_value
     - i64_value
     - f64_value
     - str_value
     - i64_array_value
     - f64_array_value

    """


    def __init__(self, literal_type=None, bool_value=None, i64_value=None, f64_value=None, str_value=None, i64_array_value=None, f64_array_value=None,):
        self.literal_type = literal_type
        self.bool_value = bool_value
        self.i64_value = i64_value
        self.f64_value = f64_value
        self.str_value = str_value
        self.i64_array_value = i64_array_value
        self.f64_array_value = f64_array_value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.literal_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.bool_value = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.i64_value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.f64_value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.str_value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.i64_array_value = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = iprot.readI64()
                        self.i64_array_value.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.f64_array_value = []
                    (_etype93, _size90) = iprot.readListBegin()
                    for _i94 in range(_size90):
                        _elem95 = iprot.readDouble()
                        self.f64_array_value.append(_elem95)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ConstantExpr')
        if self.literal_type is not None:
            oprot.writeFieldBegin('literal_type', TType.I32, 1)
            oprot.writeI32(self.literal_type)
            oprot.writeFieldEnd()
        if self.bool_value is not None:
            oprot.writeFieldBegin('bool_value', TType.BOOL, 2)
            oprot.writeBool(self.bool_value)
            oprot.writeFieldEnd()
        if self.i64_value is not None:
            oprot.writeFieldBegin('i64_value', TType.I64, 3)
            oprot.writeI64(self.i64_value)
            oprot.writeFieldEnd()
        if self.f64_value is not None:
            oprot.writeFieldBegin('f64_value', TType.DOUBLE, 4)
            oprot.writeDouble(self.f64_value)
            oprot.writeFieldEnd()
        if self.str_value is not None:
            oprot.writeFieldBegin('str_value', TType.STRING, 5)
            oprot.writeString(self.str_value.encode('utf-8') if sys.version_info[0] == 2 else self.str_value)
            oprot.writeFieldEnd()
        if self.i64_array_value is not None:
            oprot.writeFieldBegin('i64_array_value', TType.LIST, 6)
            oprot.writeListBegin(TType.I64, len(self.i64_array_value))
            for iter96 in self.i64_array_value:
                oprot.writeI64(iter96)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.f64_array_value is not None:
            oprot.writeFieldBegin('f64_array_value', TType.LIST, 7)
            oprot.writeListBegin(TType.DOUBLE, len(self.f64_array_value))
            for iter97 in self.f64_array_value:
                oprot.writeDouble(iter97)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FunctionExpr(object):
    """
    Attributes:
     - function_name
     - arguments

    """


    def __init__(self, function_name=None, arguments=None,):
        self.function_name = function_name
        self.arguments = arguments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.function_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.arguments = []
                    (_etype101, _size98) = iprot.readListBegin()
                    for _i102 in range(_size98):
                        _elem103 = ParsedExpr()
                        _elem103.read(iprot)
                        self.arguments.append(_elem103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FunctionExpr')
        if self.function_name is not None:
            oprot.writeFieldBegin('function_name', TType.STRING, 1)
            oprot.writeString(self.function_name.encode('utf-8') if sys.version_info[0] == 2 else self.function_name)
            oprot.writeFieldEnd()
        if self.arguments is not None:
            oprot.writeFieldBegin('arguments', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.arguments))
            for iter104 in self.arguments:
                iter104.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BetweenExpr(object):
    """
    Attributes:
     - value
     - upper_bound
     - lower_bound

    """


    def __init__(self, value=None, upper_bound=None, lower_bound=None,):
        self.value = value
        self.upper_bound = upper_bound
        self.lower_bound = lower_bound

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.value = ParsedExpr()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.upper_bound = ParsedExpr()
                    self.upper_bound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.lower_bound = ParsedExpr()
                    self.lower_bound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BetweenExpr')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 1)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        if self.upper_bound is not None:
            oprot.writeFieldBegin('upper_bound', TType.STRUCT, 2)
            self.upper_bound.write(oprot)
            oprot.writeFieldEnd()
        if self.lower_bound is not None:
            oprot.writeFieldBegin('lower_bound', TType.STRUCT, 3)
            self.lower_bound.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UpdateExpr(object):
    """
    Attributes:
     - column_name
     - value

    """


    def __init__(self, column_name=None, value=None,):
        self.column_name = column_name
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.column_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = ParsedExpr()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateExpr')
        if self.column_name is not None:
            oprot.writeFieldBegin('column_name', TType.STRING, 1)
            oprot.writeString(self.column_name.encode('utf-8') if sys.version_info[0] == 2 else self.column_name)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OrderByExpr(object):
    """
    Attributes:
     - expr
     - asc

    """


    def __init__(self, expr=None, asc=None,):
        self.expr = expr
        self.asc = asc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.expr = ParsedExpr()
                    self.expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.asc = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OrderByExpr')
        if self.expr is not None:
            oprot.writeFieldBegin('expr', TType.STRUCT, 1)
            self.expr.write(oprot)
            oprot.writeFieldEnd()
        if self.asc is not None:
            oprot.writeFieldBegin('asc', TType.BOOL, 2)
            oprot.writeBool(self.asc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ColumnDef(object):
    """
    Attributes:
     - id
     - name
     - data_type
     - constraints
     - constant_expr

    """


    def __init__(self, id=None, name=None, data_type=None, constraints=[
    ], constant_expr=None,):
        self.id = id
        self.name = name
        self.data_type = data_type
        if constraints is self.thrift_spec[4][4]:
            constraints = [
            ]
        self.constraints = constraints
        self.constant_expr = constant_expr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.data_type = DataType()
                    self.data_type.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.constraints = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = iprot.readI32()
                        self.constraints.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.constant_expr = ConstantExpr()
                    self.constant_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ColumnDef')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.data_type is not None:
            oprot.writeFieldBegin('data_type', TType.STRUCT, 3)
            self.data_type.write(oprot)
            oprot.writeFieldEnd()
        if self.constraints is not None:
            oprot.writeFieldBegin('constraints', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.constraints))
            for iter111 in self.constraints:
                oprot.writeI32(iter111)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.constant_expr is not None:
            oprot.writeFieldBegin('constant_expr', TType.STRUCT, 5)
            self.constant_expr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Field(object):
    """
    Attributes:
     - parse_exprs

    """


    def __init__(self, parse_exprs=[
    ],):
        if parse_exprs is self.thrift_spec[1][4]:
            parse_exprs = [
            ]
        self.parse_exprs = parse_exprs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.parse_exprs = []
                    (_etype115, _size112) = iprot.readListBegin()
                    for _i116 in range(_size112):
                        _elem117 = ParsedExpr()
                        _elem117.read(iprot)
                        self.parse_exprs.append(_elem117)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Field')
        if self.parse_exprs is not None:
            oprot.writeFieldBegin('parse_exprs', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.parse_exprs))
            for iter118 in self.parse_exprs:
                iter118.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ColumnField(object):
    """
    Attributes:
     - column_type
     - column_vectors
     - column_name

    """


    def __init__(self, column_type=None, column_vectors=[
    ], column_name=None,):
        self.column_type = column_type
        if column_vectors is self.thrift_spec[2][4]:
            column_vectors = [
            ]
        self.column_vectors = column_vectors
        self.column_name = column_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.column_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.column_vectors = []
                    (_etype122, _size119) = iprot.readListBegin()
                    for _i123 in range(_size119):
                        _elem124 = iprot.readBinary()
                        self.column_vectors.append(_elem124)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.column_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ColumnField')
        if self.column_type is not None:
            oprot.writeFieldBegin('column_type', TType.I32, 1)
            oprot.writeI32(self.column_type)
            oprot.writeFieldEnd()
        if self.column_vectors is not None:
            oprot.writeFieldBegin('column_vectors', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.column_vectors))
            for iter125 in self.column_vectors:
                oprot.writeBinary(iter125)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.column_name is not None:
            oprot.writeFieldBegin('column_name', TType.STRING, 3)
            oprot.writeString(self.column_name.encode('utf-8') if sys.version_info[0] == 2 else self.column_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ImportOption(object):
    """
    Attributes:
     - delimiter
     - copy_from
     - has_header
     - copy_file_type

    """


    def __init__(self, delimiter=None, copy_from=None, has_header=None, copy_file_type=None,):
        self.delimiter = delimiter
        self.copy_from = copy_from
        self.has_header = has_header
        self.copy_file_type = copy_file_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.delimiter = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.copy_from = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.has_header = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.copy_file_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ImportOption')
        if self.delimiter is not None:
            oprot.writeFieldBegin('delimiter', TType.STRING, 1)
            oprot.writeString(self.delimiter.encode('utf-8') if sys.version_info[0] == 2 else self.delimiter)
            oprot.writeFieldEnd()
        if self.copy_from is not None:
            oprot.writeFieldBegin('copy_from', TType.BOOL, 2)
            oprot.writeBool(self.copy_from)
            oprot.writeFieldEnd()
        if self.has_header is not None:
            oprot.writeFieldBegin('has_header', TType.BOOL, 3)
            oprot.writeBool(self.has_header)
            oprot.writeFieldEnd()
        if self.copy_file_type is not None:
            oprot.writeFieldBegin('copy_file_type', TType.I32, 4)
            oprot.writeI32(self.copy_file_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CommonRequest(object):
    """
    Attributes:
     - session_id

    """


    def __init__(self, session_id=None,):
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CommonRequest')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 1)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CommonResponse(object):
    """
    Attributes:
     - error_code
     - error_msg
     - session_id

    """


    def __init__(self, error_code=None, error_msg=None, session_id=None,):
        self.error_code = error_code
        self.error_msg = error_msg
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.error_code = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CommonResponse')
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I64, 1)
            oprot.writeI64(self.error_code)
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 2)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 3)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ListDatabaseRequest(object):
    """
    Attributes:
     - session_id

    """


    def __init__(self, session_id=None,):
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ListDatabaseRequest')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 1)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ListDatabaseResponse(object):
    """
    Attributes:
     - error_code
     - error_msg
     - db_names

    """


    def __init__(self, error_code=None, error_msg=None, db_names=[
    ],):
        self.error_code = error_code
        self.error_msg = error_msg
        if db_names is self.thrift_spec[3][4]:
            db_names = [
            ]
        self.db_names = db_names

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.error_code = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.db_names = []
                    (_etype129, _size126) = iprot.readListBegin()
                    for _i130 in range(_size126):
                        _elem131 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.db_names.append(_elem131)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ListDatabaseResponse')
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I64, 1)
            oprot.writeI64(self.error_code)
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 2)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        if self.db_names is not None:
            oprot.writeFieldBegin('db_names', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.db_names))
            for iter132 in self.db_names:
                oprot.writeString(iter132.encode('utf-8') if sys.version_info[0] == 2 else iter132)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ListTableRequest(object):
    """
    Attributes:
     - db_name
     - session_id

    """


    def __init__(self, db_name=None, session_id=None,):
        self.db_name = db_name
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ListTableRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 2)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ListTableResponse(object):
    """
    Attributes:
     - error_code
     - error_msg
     - table_names

    """


    def __init__(self, error_code=None, error_msg=None, table_names=[
    ],):
        self.error_code = error_code
        self.error_msg = error_msg
        if table_names is self.thrift_spec[3][4]:
            table_names = [
            ]
        self.table_names = table_names

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.error_code = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.table_names = []
                    (_etype136, _size133) = iprot.readListBegin()
                    for _i137 in range(_size133):
                        _elem138 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.table_names.append(_elem138)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ListTableResponse')
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I64, 1)
            oprot.writeI64(self.error_code)
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 2)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        if self.table_names is not None:
            oprot.writeFieldBegin('table_names', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.table_names))
            for iter139 in self.table_names:
                oprot.writeString(iter139.encode('utf-8') if sys.version_info[0] == 2 else iter139)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ListIndexRequest(object):
    """
    Attributes:
     - db_name
     - table_name
     - session_id

    """


    def __init__(self, db_name=None, table_name=None, session_id=None,):
        self.db_name = db_name
        self.table_name = table_name
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ListIndexRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 2)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 3)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ListIndexResponse(object):
    """
    Attributes:
     - error_code
     - error_msg
     - index_names

    """


    def __init__(self, error_code=None, error_msg=None, index_names=[
    ],):
        self.error_code = error_code
        self.error_msg = error_msg
        if index_names is self.thrift_spec[3][4]:
            index_names = [
            ]
        self.index_names = index_names

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.error_code = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.index_names = []
                    (_etype143, _size140) = iprot.readListBegin()
                    for _i144 in range(_size140):
                        _elem145 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.index_names.append(_elem145)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ListIndexResponse')
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I64, 1)
            oprot.writeI64(self.error_code)
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 2)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        if self.index_names is not None:
            oprot.writeFieldBegin('index_names', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.index_names))
            for iter146 in self.index_names:
                oprot.writeString(iter146.encode('utf-8') if sys.version_info[0] == 2 else iter146)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowDatabaseRequest(object):
    """
    Attributes:
     - db_name
     - session_id

    """


    def __init__(self, db_name=None, session_id=None,):
        self.db_name = db_name
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowDatabaseRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 2)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowDatabaseResponse(object):
    """
    Attributes:
     - error_code
     - error_msg
     - database_name
     - store_dir
     - table_count

    """


    def __init__(self, error_code=None, error_msg=None, database_name=None, store_dir=None, table_count=None,):
        self.error_code = error_code
        self.error_msg = error_msg
        self.database_name = database_name
        self.store_dir = store_dir
        self.table_count = table_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.error_code = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.database_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.store_dir = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.table_count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowDatabaseResponse')
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I64, 1)
            oprot.writeI64(self.error_code)
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 2)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        if self.database_name is not None:
            oprot.writeFieldBegin('database_name', TType.STRING, 3)
            oprot.writeString(self.database_name.encode('utf-8') if sys.version_info[0] == 2 else self.database_name)
            oprot.writeFieldEnd()
        if self.store_dir is not None:
            oprot.writeFieldBegin('store_dir', TType.STRING, 4)
            oprot.writeString(self.store_dir.encode('utf-8') if sys.version_info[0] == 2 else self.store_dir)
            oprot.writeFieldEnd()
        if self.table_count is not None:
            oprot.writeFieldBegin('table_count', TType.I64, 5)
            oprot.writeI64(self.table_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowTableRequest(object):
    """
    Attributes:
     - db_name
     - table_name
     - session_id

    """


    def __init__(self, db_name=None, table_name=None, session_id=None,):
        self.db_name = db_name
        self.table_name = table_name
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowTableRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 2)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 3)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowTableResponse(object):
    """
    Attributes:
     - error_code
     - error_msg
     - database_name
     - table_name
     - store_dir
     - column_count
     - segment_count
     - row_count

    """


    def __init__(self, error_code=None, error_msg=None, database_name=None, table_name=None, store_dir=None, column_count=None, segment_count=None, row_count=None,):
        self.error_code = error_code
        self.error_msg = error_msg
        self.database_name = database_name
        self.table_name = table_name
        self.store_dir = store_dir
        self.column_count = column_count
        self.segment_count = segment_count
        self.row_count = row_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.error_code = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.database_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.store_dir = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.column_count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.segment_count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.row_count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowTableResponse')
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I64, 1)
            oprot.writeI64(self.error_code)
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 2)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        if self.database_name is not None:
            oprot.writeFieldBegin('database_name', TType.STRING, 3)
            oprot.writeString(self.database_name.encode('utf-8') if sys.version_info[0] == 2 else self.database_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 4)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.store_dir is not None:
            oprot.writeFieldBegin('store_dir', TType.STRING, 5)
            oprot.writeString(self.store_dir.encode('utf-8') if sys.version_info[0] == 2 else self.store_dir)
            oprot.writeFieldEnd()
        if self.column_count is not None:
            oprot.writeFieldBegin('column_count', TType.I64, 6)
            oprot.writeI64(self.column_count)
            oprot.writeFieldEnd()
        if self.segment_count is not None:
            oprot.writeFieldBegin('segment_count', TType.I64, 7)
            oprot.writeI64(self.segment_count)
            oprot.writeFieldEnd()
        if self.row_count is not None:
            oprot.writeFieldBegin('row_count', TType.I64, 8)
            oprot.writeI64(self.row_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowColumnsRequest(object):
    """
    Attributes:
     - db_name
     - table_name
     - session_id

    """


    def __init__(self, db_name=None, table_name=None, session_id=None,):
        self.db_name = db_name
        self.table_name = table_name
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowColumnsRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 2)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 3)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetTableRequest(object):
    """
    Attributes:
     - db_name
     - table_name
     - session_id

    """


    def __init__(self, db_name=None, table_name=None, session_id=None,):
        self.db_name = db_name
        self.table_name = table_name
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTableRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 2)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 3)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IndexInfo(object):
    """
    Attributes:
     - column_name
     - index_type
     - index_param_list

    """


    def __init__(self, column_name=None, index_type=None, index_param_list=[
    ],):
        self.column_name = column_name
        self.index_type = index_type
        if index_param_list is self.thrift_spec[3][4]:
            index_param_list = [
            ]
        self.index_param_list = index_param_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.column_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.index_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.index_param_list = []
                    (_etype150, _size147) = iprot.readListBegin()
                    for _i151 in range(_size147):
                        _elem152 = InitParameter()
                        _elem152.read(iprot)
                        self.index_param_list.append(_elem152)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IndexInfo')
        if self.column_name is not None:
            oprot.writeFieldBegin('column_name', TType.STRING, 1)
            oprot.writeString(self.column_name.encode('utf-8') if sys.version_info[0] == 2 else self.column_name)
            oprot.writeFieldEnd()
        if self.index_type is not None:
            oprot.writeFieldBegin('index_type', TType.I32, 2)
            oprot.writeI32(self.index_type)
            oprot.writeFieldEnd()
        if self.index_param_list is not None:
            oprot.writeFieldBegin('index_param_list', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.index_param_list))
            for iter153 in self.index_param_list:
                iter153.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CreateIndexRequest(object):
    """
    Attributes:
     - db_name
     - table_name
     - index_name
     - index_info_list
     - session_id
     - create_option

    """


    def __init__(self, db_name=None, table_name=None, index_name=None, index_info_list=[
    ], session_id=None, create_option=None,):
        self.db_name = db_name
        self.table_name = table_name
        self.index_name = index_name
        if index_info_list is self.thrift_spec[5][4]:
            index_info_list = [
            ]
        self.index_info_list = index_info_list
        self.session_id = session_id
        self.create_option = create_option

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.index_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.index_info_list = []
                    (_etype157, _size154) = iprot.readListBegin()
                    for _i158 in range(_size154):
                        _elem159 = IndexInfo()
                        _elem159.read(iprot)
                        self.index_info_list.append(_elem159)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.create_option = CreateOption()
                    self.create_option.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreateIndexRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 2)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.index_name is not None:
            oprot.writeFieldBegin('index_name', TType.STRING, 3)
            oprot.writeString(self.index_name.encode('utf-8') if sys.version_info[0] == 2 else self.index_name)
            oprot.writeFieldEnd()
        if self.index_info_list is not None:
            oprot.writeFieldBegin('index_info_list', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.index_info_list))
            for iter160 in self.index_info_list:
                iter160.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 6)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.create_option is not None:
            oprot.writeFieldBegin('create_option', TType.STRUCT, 7)
            self.create_option.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DropIndexRequest(object):
    """
    Attributes:
     - db_name
     - table_name
     - index_name
     - session_id
     - drop_option

    """


    def __init__(self, db_name=None, table_name=None, index_name=None, session_id=None, drop_option=None,):
        self.db_name = db_name
        self.table_name = table_name
        self.index_name = index_name
        self.session_id = session_id
        self.drop_option = drop_option

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.index_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.drop_option = DropOption()
                    self.drop_option.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DropIndexRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 2)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.index_name is not None:
            oprot.writeFieldBegin('index_name', TType.STRING, 3)
            oprot.writeString(self.index_name.encode('utf-8') if sys.version_info[0] == 2 else self.index_name)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 4)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.drop_option is not None:
            oprot.writeFieldBegin('drop_option', TType.STRUCT, 5)
            self.drop_option.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowIndexRequest(object):
    """
    Attributes:
     - db_name
     - table_name
     - index_name
     - session_id

    """


    def __init__(self, db_name=None, table_name=None, index_name=None, session_id=None,):
        self.db_name = db_name
        self.table_name = table_name
        self.index_name = index_name
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.index_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowIndexRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 2)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.index_name is not None:
            oprot.writeFieldBegin('index_name', TType.STRING, 3)
            oprot.writeString(self.index_name.encode('utf-8') if sys.version_info[0] == 2 else self.index_name)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 4)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowIndexResponse(object):
    """
    Attributes:
     - error_code
     - error_msg
     - db_name
     - table_name
     - index_name
     - index_type
     - index_column_names
     - index_column_ids
     - other_parameters
     - store_dir
     - store_size
     - segment_index_count

    """


    def __init__(self, error_code=None, error_msg=None, db_name=None, table_name=None, index_name=None, index_type=None, index_column_names=None, index_column_ids=None, other_parameters=None, store_dir=None, store_size=None, segment_index_count=None,):
        self.error_code = error_code
        self.error_msg = error_msg
        self.db_name = db_name
        self.table_name = table_name
        self.index_name = index_name
        self.index_type = index_type
        self.index_column_names = index_column_names
        self.index_column_ids = index_column_ids
        self.other_parameters = other_parameters
        self.store_dir = store_dir
        self.store_size = store_size
        self.segment_index_count = segment_index_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.error_code = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.index_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.index_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.index_column_names = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.index_column_ids = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.other_parameters = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.store_dir = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.store_size = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.segment_index_count = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowIndexResponse')
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I64, 1)
            oprot.writeI64(self.error_code)
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 2)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 3)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 4)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.index_name is not None:
            oprot.writeFieldBegin('index_name', TType.STRING, 5)
            oprot.writeString(self.index_name.encode('utf-8') if sys.version_info[0] == 2 else self.index_name)
            oprot.writeFieldEnd()
        if self.index_type is not None:
            oprot.writeFieldBegin('index_type', TType.STRING, 6)
            oprot.writeString(self.index_type.encode('utf-8') if sys.version_info[0] == 2 else self.index_type)
            oprot.writeFieldEnd()
        if self.index_column_names is not None:
            oprot.writeFieldBegin('index_column_names', TType.STRING, 7)
            oprot.writeString(self.index_column_names.encode('utf-8') if sys.version_info[0] == 2 else self.index_column_names)
            oprot.writeFieldEnd()
        if self.index_column_ids is not None:
            oprot.writeFieldBegin('index_column_ids', TType.STRING, 8)
            oprot.writeString(self.index_column_ids.encode('utf-8') if sys.version_info[0] == 2 else self.index_column_ids)
            oprot.writeFieldEnd()
        if self.other_parameters is not None:
            oprot.writeFieldBegin('other_parameters', TType.STRING, 9)
            oprot.writeString(self.other_parameters.encode('utf-8') if sys.version_info[0] == 2 else self.other_parameters)
            oprot.writeFieldEnd()
        if self.store_dir is not None:
            oprot.writeFieldBegin('store_dir', TType.STRING, 10)
            oprot.writeString(self.store_dir.encode('utf-8') if sys.version_info[0] == 2 else self.store_dir)
            oprot.writeFieldEnd()
        if self.store_size is not None:
            oprot.writeFieldBegin('store_size', TType.STRING, 11)
            oprot.writeString(self.store_size.encode('utf-8') if sys.version_info[0] == 2 else self.store_size)
            oprot.writeFieldEnd()
        if self.segment_index_count is not None:
            oprot.writeFieldBegin('segment_index_count', TType.STRING, 12)
            oprot.writeString(self.segment_index_count.encode('utf-8') if sys.version_info[0] == 2 else self.segment_index_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetDatabaseRequest(object):
    """
    Attributes:
     - db_name
     - session_id

    """


    def __init__(self, db_name=None, session_id=None,):
        self.db_name = db_name
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetDatabaseRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 2)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CreateDatabaseRequest(object):
    """
    Attributes:
     - db_name
     - session_id
     - create_option

    """


    def __init__(self, db_name=None, session_id=None, create_option=None,):
        self.db_name = db_name
        self.session_id = session_id
        self.create_option = create_option

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.create_option = CreateOption()
                    self.create_option.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreateDatabaseRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 2)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.create_option is not None:
            oprot.writeFieldBegin('create_option', TType.STRUCT, 3)
            self.create_option.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DropDatabaseRequest(object):
    """
    Attributes:
     - db_name
     - session_id
     - drop_option

    """


    def __init__(self, db_name=None, session_id=None, drop_option=None,):
        self.db_name = db_name
        self.session_id = session_id
        self.drop_option = drop_option

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.drop_option = DropOption()
                    self.drop_option.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DropDatabaseRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 2)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.drop_option is not None:
            oprot.writeFieldBegin('drop_option', TType.STRUCT, 3)
            self.drop_option.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CreateTableRequest(object):
    """
    Attributes:
     - db_name
     - table_name
     - column_defs
     - session_id
     - create_option

    """


    def __init__(self, db_name=None, table_name=None, column_defs=[
    ], session_id=None, create_option=None,):
        self.db_name = db_name
        self.table_name = table_name
        if column_defs is self.thrift_spec[3][4]:
            column_defs = [
            ]
        self.column_defs = column_defs
        self.session_id = session_id
        self.create_option = create_option

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.column_defs = []
                    (_etype164, _size161) = iprot.readListBegin()
                    for _i165 in range(_size161):
                        _elem166 = ColumnDef()
                        _elem166.read(iprot)
                        self.column_defs.append(_elem166)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.create_option = CreateOption()
                    self.create_option.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreateTableRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 2)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.column_defs is not None:
            oprot.writeFieldBegin('column_defs', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.column_defs))
            for iter167 in self.column_defs:
                iter167.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 6)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.create_option is not None:
            oprot.writeFieldBegin('create_option', TType.STRUCT, 7)
            self.create_option.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DropTableRequest(object):
    """
    Attributes:
     - db_name
     - table_name
     - session_id
     - drop_option

    """


    def __init__(self, db_name=None, table_name=None, session_id=None, drop_option=None,):
        self.db_name = db_name
        self.table_name = table_name
        self.session_id = session_id
        self.drop_option = drop_option

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.drop_option = DropOption()
                    self.drop_option.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DropTableRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 2)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 3)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.drop_option is not None:
            oprot.writeFieldBegin('drop_option', TType.STRUCT, 4)
            self.drop_option.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InsertRequest(object):
    """
    Attributes:
     - db_name
     - table_name
     - column_names
     - fields
     - session_id

    """


    def __init__(self, db_name=None, table_name=None, column_names=[
    ], fields=[
    ], session_id=None,):
        self.db_name = db_name
        self.table_name = table_name
        if column_names is self.thrift_spec[3][4]:
            column_names = [
            ]
        self.column_names = column_names
        if fields is self.thrift_spec[4][4]:
            fields = [
            ]
        self.fields = fields
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.column_names = []
                    (_etype171, _size168) = iprot.readListBegin()
                    for _i172 in range(_size168):
                        _elem173 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.column_names.append(_elem173)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.fields = []
                    (_etype177, _size174) = iprot.readListBegin()
                    for _i178 in range(_size174):
                        _elem179 = Field()
                        _elem179.read(iprot)
                        self.fields.append(_elem179)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InsertRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 2)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.column_names is not None:
            oprot.writeFieldBegin('column_names', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.column_names))
            for iter180 in self.column_names:
                oprot.writeString(iter180.encode('utf-8') if sys.version_info[0] == 2 else iter180)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.fields is not None:
            oprot.writeFieldBegin('fields', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.fields))
            for iter181 in self.fields:
                iter181.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 5)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ImportRequest(object):
    """
    Attributes:
     - db_name
     - table_name
     - file_name
     - file_content
     - import_option
     - session_id

    """


    def __init__(self, db_name=None, table_name=None, file_name=None, file_content=None, import_option=None, session_id=None,):
        self.db_name = db_name
        self.table_name = table_name
        self.file_name = file_name
        self.file_content = file_content
        self.import_option = import_option
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.file_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.file_content = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.import_option = ImportOption()
                    self.import_option.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ImportRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 2)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.file_name is not None:
            oprot.writeFieldBegin('file_name', TType.STRING, 3)
            oprot.writeString(self.file_name.encode('utf-8') if sys.version_info[0] == 2 else self.file_name)
            oprot.writeFieldEnd()
        if self.file_content is not None:
            oprot.writeFieldBegin('file_content', TType.STRING, 4)
            oprot.writeBinary(self.file_content)
            oprot.writeFieldEnd()
        if self.import_option is not None:
            oprot.writeFieldBegin('import_option', TType.STRUCT, 5)
            self.import_option.write(oprot)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 6)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExplainRequest(object):
    """
    Attributes:
     - session_id
     - db_name
     - table_name
     - select_list
     - search_expr
     - where_expr
     - group_by_list
     - having_expr
     - limit_expr
     - offset_expr
     - order_by_list
     - explain_type

    """


    def __init__(self, session_id=None, db_name=None, table_name=None, select_list=[
    ], search_expr=None, where_expr=None, group_by_list=[
    ], having_expr=None, limit_expr=None, offset_expr=None, order_by_list=[
    ], explain_type=None,):
        self.session_id = session_id
        self.db_name = db_name
        self.table_name = table_name
        if select_list is self.thrift_spec[4][4]:
            select_list = [
            ]
        self.select_list = select_list
        self.search_expr = search_expr
        self.where_expr = where_expr
        if group_by_list is self.thrift_spec[7][4]:
            group_by_list = [
            ]
        self.group_by_list = group_by_list
        self.having_expr = having_expr
        self.limit_expr = limit_expr
        self.offset_expr = offset_expr
        if order_by_list is self.thrift_spec[11][4]:
            order_by_list = [
            ]
        self.order_by_list = order_by_list
        self.explain_type = explain_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.select_list = []
                    (_etype185, _size182) = iprot.readListBegin()
                    for _i186 in range(_size182):
                        _elem187 = ParsedExpr()
                        _elem187.read(iprot)
                        self.select_list.append(_elem187)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.search_expr = SearchExpr()
                    self.search_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.where_expr = ParsedExpr()
                    self.where_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.group_by_list = []
                    (_etype191, _size188) = iprot.readListBegin()
                    for _i192 in range(_size188):
                        _elem193 = ParsedExpr()
                        _elem193.read(iprot)
                        self.group_by_list.append(_elem193)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.having_expr = ParsedExpr()
                    self.having_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.limit_expr = ParsedExpr()
                    self.limit_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.offset_expr = ParsedExpr()
                    self.offset_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.order_by_list = []
                    (_etype197, _size194) = iprot.readListBegin()
                    for _i198 in range(_size194):
                        _elem199 = OrderByExpr()
                        _elem199.read(iprot)
                        self.order_by_list.append(_elem199)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.explain_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExplainRequest')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 1)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 2)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 3)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.select_list is not None:
            oprot.writeFieldBegin('select_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.select_list))
            for iter200 in self.select_list:
                iter200.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.search_expr is not None:
            oprot.writeFieldBegin('search_expr', TType.STRUCT, 5)
            self.search_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.where_expr is not None:
            oprot.writeFieldBegin('where_expr', TType.STRUCT, 6)
            self.where_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.group_by_list is not None:
            oprot.writeFieldBegin('group_by_list', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.group_by_list))
            for iter201 in self.group_by_list:
                iter201.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.having_expr is not None:
            oprot.writeFieldBegin('having_expr', TType.STRUCT, 8)
            self.having_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.limit_expr is not None:
            oprot.writeFieldBegin('limit_expr', TType.STRUCT, 9)
            self.limit_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.offset_expr is not None:
            oprot.writeFieldBegin('offset_expr', TType.STRUCT, 10)
            self.offset_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.order_by_list is not None:
            oprot.writeFieldBegin('order_by_list', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.order_by_list))
            for iter202 in self.order_by_list:
                iter202.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.explain_type is not None:
            oprot.writeFieldBegin('explain_type', TType.I32, 12)
            oprot.writeI32(self.explain_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExplainResponse(object):
    """
    Attributes:
     - error_code
     - error_msg
     - column_defs
     - column_fields

    """


    def __init__(self, error_code=None, error_msg=None, column_defs=[
    ], column_fields=[
    ],):
        self.error_code = error_code
        self.error_msg = error_msg
        if column_defs is self.thrift_spec[3][4]:
            column_defs = [
            ]
        self.column_defs = column_defs
        if column_fields is self.thrift_spec[4][4]:
            column_fields = [
            ]
        self.column_fields = column_fields

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.error_code = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.column_defs = []
                    (_etype206, _size203) = iprot.readListBegin()
                    for _i207 in range(_size203):
                        _elem208 = ColumnDef()
                        _elem208.read(iprot)
                        self.column_defs.append(_elem208)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.column_fields = []
                    (_etype212, _size209) = iprot.readListBegin()
                    for _i213 in range(_size209):
                        _elem214 = ColumnField()
                        _elem214.read(iprot)
                        self.column_fields.append(_elem214)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExplainResponse')
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I64, 1)
            oprot.writeI64(self.error_code)
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 2)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        if self.column_defs is not None:
            oprot.writeFieldBegin('column_defs', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.column_defs))
            for iter215 in self.column_defs:
                iter215.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.column_fields is not None:
            oprot.writeFieldBegin('column_fields', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.column_fields))
            for iter216 in self.column_fields:
                iter216.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SelectRequest(object):
    """
    Attributes:
     - session_id
     - db_name
     - table_name
     - select_list
     - search_expr
     - where_expr
     - group_by_list
     - having_expr
     - limit_expr
     - offset_expr
     - order_by_list

    """


    def __init__(self, session_id=None, db_name=None, table_name=None, select_list=[
    ], search_expr=None, where_expr=None, group_by_list=[
    ], having_expr=None, limit_expr=None, offset_expr=None, order_by_list=[
    ],):
        self.session_id = session_id
        self.db_name = db_name
        self.table_name = table_name
        if select_list is self.thrift_spec[4][4]:
            select_list = [
            ]
        self.select_list = select_list
        self.search_expr = search_expr
        self.where_expr = where_expr
        if group_by_list is self.thrift_spec[7][4]:
            group_by_list = [
            ]
        self.group_by_list = group_by_list
        self.having_expr = having_expr
        self.limit_expr = limit_expr
        self.offset_expr = offset_expr
        if order_by_list is self.thrift_spec[11][4]:
            order_by_list = [
            ]
        self.order_by_list = order_by_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.select_list = []
                    (_etype220, _size217) = iprot.readListBegin()
                    for _i221 in range(_size217):
                        _elem222 = ParsedExpr()
                        _elem222.read(iprot)
                        self.select_list.append(_elem222)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.search_expr = SearchExpr()
                    self.search_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.where_expr = ParsedExpr()
                    self.where_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.group_by_list = []
                    (_etype226, _size223) = iprot.readListBegin()
                    for _i227 in range(_size223):
                        _elem228 = ParsedExpr()
                        _elem228.read(iprot)
                        self.group_by_list.append(_elem228)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.having_expr = ParsedExpr()
                    self.having_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.limit_expr = ParsedExpr()
                    self.limit_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.offset_expr = ParsedExpr()
                    self.offset_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.order_by_list = []
                    (_etype232, _size229) = iprot.readListBegin()
                    for _i233 in range(_size229):
                        _elem234 = OrderByExpr()
                        _elem234.read(iprot)
                        self.order_by_list.append(_elem234)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SelectRequest')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 1)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 2)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 3)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.select_list is not None:
            oprot.writeFieldBegin('select_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.select_list))
            for iter235 in self.select_list:
                iter235.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.search_expr is not None:
            oprot.writeFieldBegin('search_expr', TType.STRUCT, 5)
            self.search_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.where_expr is not None:
            oprot.writeFieldBegin('where_expr', TType.STRUCT, 6)
            self.where_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.group_by_list is not None:
            oprot.writeFieldBegin('group_by_list', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.group_by_list))
            for iter236 in self.group_by_list:
                iter236.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.having_expr is not None:
            oprot.writeFieldBegin('having_expr', TType.STRUCT, 8)
            self.having_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.limit_expr is not None:
            oprot.writeFieldBegin('limit_expr', TType.STRUCT, 9)
            self.limit_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.offset_expr is not None:
            oprot.writeFieldBegin('offset_expr', TType.STRUCT, 10)
            self.offset_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.order_by_list is not None:
            oprot.writeFieldBegin('order_by_list', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.order_by_list))
            for iter237 in self.order_by_list:
                iter237.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SelectResponse(object):
    """
    Attributes:
     - error_code
     - error_msg
     - column_defs
     - column_fields

    """


    def __init__(self, error_code=None, error_msg=None, column_defs=[
    ], column_fields=[
    ],):
        self.error_code = error_code
        self.error_msg = error_msg
        if column_defs is self.thrift_spec[3][4]:
            column_defs = [
            ]
        self.column_defs = column_defs
        if column_fields is self.thrift_spec[4][4]:
            column_fields = [
            ]
        self.column_fields = column_fields

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.error_code = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.column_defs = []
                    (_etype241, _size238) = iprot.readListBegin()
                    for _i242 in range(_size238):
                        _elem243 = ColumnDef()
                        _elem243.read(iprot)
                        self.column_defs.append(_elem243)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.column_fields = []
                    (_etype247, _size244) = iprot.readListBegin()
                    for _i248 in range(_size244):
                        _elem249 = ColumnField()
                        _elem249.read(iprot)
                        self.column_fields.append(_elem249)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SelectResponse')
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I64, 1)
            oprot.writeI64(self.error_code)
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 2)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        if self.column_defs is not None:
            oprot.writeFieldBegin('column_defs', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.column_defs))
            for iter250 in self.column_defs:
                iter250.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.column_fields is not None:
            oprot.writeFieldBegin('column_fields', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.column_fields))
            for iter251 in self.column_fields:
                iter251.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DeleteRequest(object):
    """
    Attributes:
     - db_name
     - table_name
     - where_expr
     - session_id

    """


    def __init__(self, db_name=None, table_name=None, where_expr=None, session_id=None,):
        self.db_name = db_name
        self.table_name = table_name
        self.where_expr = where_expr
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.where_expr = ParsedExpr()
                    self.where_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 2)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.where_expr is not None:
            oprot.writeFieldBegin('where_expr', TType.STRUCT, 3)
            self.where_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 4)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UpdateRequest(object):
    """
    Attributes:
     - db_name
     - table_name
     - where_expr
     - update_expr_array
     - session_id

    """


    def __init__(self, db_name=None, table_name=None, where_expr=None, update_expr_array=[
    ], session_id=None,):
        self.db_name = db_name
        self.table_name = table_name
        self.where_expr = where_expr
        if update_expr_array is self.thrift_spec[4][4]:
            update_expr_array = [
            ]
        self.update_expr_array = update_expr_array
        self.session_id = session_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.where_expr = ParsedExpr()
                    self.where_expr.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.update_expr_array = []
                    (_etype255, _size252) = iprot.readListBegin()
                    for _i256 in range(_size252):
                        _elem257 = UpdateExpr()
                        _elem257.read(iprot)
                        self.update_expr_array.append(_elem257)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateRequest')
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 1)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 2)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.where_expr is not None:
            oprot.writeFieldBegin('where_expr', TType.STRUCT, 3)
            self.where_expr.write(oprot)
            oprot.writeFieldEnd()
        if self.update_expr_array is not None:
            oprot.writeFieldBegin('update_expr_array', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.update_expr_array))
            for iter258 in self.update_expr_array:
                iter258.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 5)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowVariableRequest(object):
    """
    Attributes:
     - session_id
     - variable_name

    """


    def __init__(self, session_id=None, variable_name=None,):
        self.session_id = session_id
        self.variable_name = variable_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.variable_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowVariableRequest')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 1)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.variable_name is not None:
            oprot.writeFieldBegin('variable_name', TType.STRING, 2)
            oprot.writeString(self.variable_name.encode('utf-8') if sys.version_info[0] == 2 else self.variable_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowTablesRequest(object):
    """
    Attributes:
     - session_id
     - db_name

    """


    def __init__(self, session_id=None, db_name=None,):
        self.session_id = session_id
        self.db_name = db_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowTablesRequest')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 1)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 2)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowSegmentsRequest(object):
    """
    Attributes:
     - session_id
     - db_name
     - table_name

    """


    def __init__(self, session_id=None, db_name=None, table_name=None,):
        self.session_id = session_id
        self.db_name = db_name
        self.table_name = table_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowSegmentsRequest')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 1)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 2)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 3)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowSegmentRequest(object):
    """
    Attributes:
     - session_id
     - db_name
     - table_name
     - segment_id

    """


    def __init__(self, session_id=None, db_name=None, table_name=None, segment_id=None,):
        self.session_id = session_id
        self.db_name = db_name
        self.table_name = table_name
        self.segment_id = segment_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.segment_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowSegmentRequest')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 1)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 2)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 3)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.segment_id is not None:
            oprot.writeFieldBegin('segment_id', TType.I64, 4)
            oprot.writeI64(self.segment_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowSegmentResponse(object):
    """
    Attributes:
     - error_code
     - error_msg
     - segment_id
     - status
     - path
     - size
     - block_count
     - row_capacity
     - row_count
     - room
     - column_count

    """


    def __init__(self, error_code=None, error_msg=None, segment_id=None, status=None, path=None, size=None, block_count=None, row_capacity=None, row_count=None, room=None, column_count=None,):
        self.error_code = error_code
        self.error_msg = error_msg
        self.segment_id = segment_id
        self.status = status
        self.path = path
        self.size = size
        self.block_count = block_count
        self.row_capacity = row_capacity
        self.row_count = row_count
        self.room = room
        self.column_count = column_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.error_code = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.segment_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.size = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.block_count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.row_capacity = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.row_count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.room = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.column_count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowSegmentResponse')
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I64, 1)
            oprot.writeI64(self.error_code)
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 2)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        if self.segment_id is not None:
            oprot.writeFieldBegin('segment_id', TType.I64, 3)
            oprot.writeI64(self.segment_id)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 4)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 5)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.STRING, 6)
            oprot.writeString(self.size.encode('utf-8') if sys.version_info[0] == 2 else self.size)
            oprot.writeFieldEnd()
        if self.block_count is not None:
            oprot.writeFieldBegin('block_count', TType.I64, 7)
            oprot.writeI64(self.block_count)
            oprot.writeFieldEnd()
        if self.row_capacity is not None:
            oprot.writeFieldBegin('row_capacity', TType.I64, 8)
            oprot.writeI64(self.row_capacity)
            oprot.writeFieldEnd()
        if self.row_count is not None:
            oprot.writeFieldBegin('row_count', TType.I64, 9)
            oprot.writeI64(self.row_count)
            oprot.writeFieldEnd()
        if self.room is not None:
            oprot.writeFieldBegin('room', TType.I64, 10)
            oprot.writeI64(self.room)
            oprot.writeFieldEnd()
        if self.column_count is not None:
            oprot.writeFieldBegin('column_count', TType.I64, 11)
            oprot.writeI64(self.column_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowBlocksRequest(object):
    """
    Attributes:
     - session_id
     - db_name
     - table_name
     - segment_id

    """


    def __init__(self, session_id=None, db_name=None, table_name=None, segment_id=None,):
        self.session_id = session_id
        self.db_name = db_name
        self.table_name = table_name
        self.segment_id = segment_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.segment_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowBlocksRequest')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 1)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 2)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 3)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.segment_id is not None:
            oprot.writeFieldBegin('segment_id', TType.I64, 4)
            oprot.writeI64(self.segment_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowBlockRequest(object):
    """
    Attributes:
     - session_id
     - db_name
     - table_name
     - segment_id
     - block_id

    """


    def __init__(self, session_id=None, db_name=None, table_name=None, segment_id=None, block_id=None,):
        self.session_id = session_id
        self.db_name = db_name
        self.table_name = table_name
        self.segment_id = segment_id
        self.block_id = block_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.segment_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.block_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowBlockRequest')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 1)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 2)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 3)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.segment_id is not None:
            oprot.writeFieldBegin('segment_id', TType.I64, 4)
            oprot.writeI64(self.segment_id)
            oprot.writeFieldEnd()
        if self.block_id is not None:
            oprot.writeFieldBegin('block_id', TType.I64, 5)
            oprot.writeI64(self.block_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowBlockResponse(object):
    """
    Attributes:
     - error_code
     - error_msg
     - block_id
     - path
     - size
     - row_capacity
     - row_count
     - column_count

    """


    def __init__(self, error_code=None, error_msg=None, block_id=None, path=None, size=None, row_capacity=None, row_count=None, column_count=None,):
        self.error_code = error_code
        self.error_msg = error_msg
        self.block_id = block_id
        self.path = path
        self.size = size
        self.row_capacity = row_capacity
        self.row_count = row_count
        self.column_count = column_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.error_code = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.block_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.size = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.row_capacity = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.row_count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.column_count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowBlockResponse')
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I64, 1)
            oprot.writeI64(self.error_code)
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 2)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        if self.block_id is not None:
            oprot.writeFieldBegin('block_id', TType.I64, 3)
            oprot.writeI64(self.block_id)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 4)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.STRING, 5)
            oprot.writeString(self.size.encode('utf-8') if sys.version_info[0] == 2 else self.size)
            oprot.writeFieldEnd()
        if self.row_capacity is not None:
            oprot.writeFieldBegin('row_capacity', TType.I64, 6)
            oprot.writeI64(self.row_capacity)
            oprot.writeFieldEnd()
        if self.row_count is not None:
            oprot.writeFieldBegin('row_count', TType.I64, 7)
            oprot.writeI64(self.row_count)
            oprot.writeFieldEnd()
        if self.column_count is not None:
            oprot.writeFieldBegin('column_count', TType.I64, 8)
            oprot.writeI64(self.column_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowBlockColumnRequest(object):
    """
    Attributes:
     - session_id
     - db_name
     - table_name
     - segment_id
     - block_id
     - column_id

    """


    def __init__(self, session_id=None, db_name=None, table_name=None, segment_id=None, block_id=None, column_id=None,):
        self.session_id = session_id
        self.db_name = db_name
        self.table_name = table_name
        self.segment_id = segment_id
        self.block_id = block_id
        self.column_id = column_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.session_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.db_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.table_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.segment_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.block_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.column_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowBlockColumnRequest')
        if self.session_id is not None:
            oprot.writeFieldBegin('session_id', TType.I64, 1)
            oprot.writeI64(self.session_id)
            oprot.writeFieldEnd()
        if self.db_name is not None:
            oprot.writeFieldBegin('db_name', TType.STRING, 2)
            oprot.writeString(self.db_name.encode('utf-8') if sys.version_info[0] == 2 else self.db_name)
            oprot.writeFieldEnd()
        if self.table_name is not None:
            oprot.writeFieldBegin('table_name', TType.STRING, 3)
            oprot.writeString(self.table_name.encode('utf-8') if sys.version_info[0] == 2 else self.table_name)
            oprot.writeFieldEnd()
        if self.segment_id is not None:
            oprot.writeFieldBegin('segment_id', TType.I64, 4)
            oprot.writeI64(self.segment_id)
            oprot.writeFieldEnd()
        if self.block_id is not None:
            oprot.writeFieldBegin('block_id', TType.I64, 5)
            oprot.writeI64(self.block_id)
            oprot.writeFieldEnd()
        if self.column_id is not None:
            oprot.writeFieldBegin('column_id', TType.I64, 6)
            oprot.writeI64(self.column_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShowBlockColumnResponse(object):
    """
    Attributes:
     - error_code
     - error_msg
     - column_name
     - column_id
     - data_type
     - path
     - extra_file_count
     - extra_file_names

    """


    def __init__(self, error_code=None, error_msg=None, column_name=None, column_id=None, data_type=None, path=None, extra_file_count=None, extra_file_names=None,):
        self.error_code = error_code
        self.error_msg = error_msg
        self.column_name = column_name
        self.column_id = column_id
        self.data_type = data_type
        self.path = path
        self.extra_file_count = extra_file_count
        self.extra_file_names = extra_file_names

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.error_code = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.error_msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.column_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.column_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.data_type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.extra_file_count = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.extra_file_names = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShowBlockColumnResponse')
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I64, 1)
            oprot.writeI64(self.error_code)
            oprot.writeFieldEnd()
        if self.error_msg is not None:
            oprot.writeFieldBegin('error_msg', TType.STRING, 2)
            oprot.writeString(self.error_msg.encode('utf-8') if sys.version_info[0] == 2 else self.error_msg)
            oprot.writeFieldEnd()
        if self.column_name is not None:
            oprot.writeFieldBegin('column_name', TType.STRING, 3)
            oprot.writeString(self.column_name.encode('utf-8') if sys.version_info[0] == 2 else self.column_name)
            oprot.writeFieldEnd()
        if self.column_id is not None:
            oprot.writeFieldBegin('column_id', TType.I64, 4)
            oprot.writeI64(self.column_id)
            oprot.writeFieldEnd()
        if self.data_type is not None:
            oprot.writeFieldBegin('data_type', TType.STRING, 5)
            oprot.writeString(self.data_type.encode('utf-8') if sys.version_info[0] == 2 else self.data_type)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 6)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.extra_file_count is not None:
            oprot.writeFieldBegin('extra_file_count', TType.I64, 7)
            oprot.writeI64(self.extra_file_count)
            oprot.writeFieldEnd()
        if self.extra_file_names is not None:
            oprot.writeFieldBegin('extra_file_names', TType.STRING, 8)
            oprot.writeString(self.extra_file_names.encode('utf-8') if sys.version_info[0] == 2 else self.extra_file_names)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Property)
Property.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'key', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'value', 'UTF8', None, ),  # 2
)
all_structs.append(CreateOption)
CreateOption.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'conflict_type', None, None, ),  # 1
    (2, TType.LIST, 'properties', (TType.STRUCT, [Property, None], False), [
    ], ),  # 2
)
all_structs.append(DropOption)
DropOption.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'conflict_type', None, None, ),  # 1
)
all_structs.append(NumberType)
NumberType.thrift_spec = (
)
all_structs.append(VarcharType)
VarcharType.thrift_spec = (
)
all_structs.append(EmbeddingType)
EmbeddingType.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dimension', None, None, ),  # 1
    (2, TType.I32, 'element_type', None, None, ),  # 2
)
all_structs.append(PhysicalType)
PhysicalType.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'number_type', [NumberType, None], None, ),  # 1
    (2, TType.STRUCT, 'varchar_type', [VarcharType, None], None, ),  # 2
    (3, TType.STRUCT, 'embedding_type', [EmbeddingType, None], None, ),  # 3
)
all_structs.append(DataType)
DataType.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'logic_type', None, None, ),  # 1
    (2, TType.STRUCT, 'physical_type', [PhysicalType, None], None, ),  # 2
)
all_structs.append(ParsedExprType)
ParsedExprType.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'constant_expr', [ConstantExpr, None], None, ),  # 1
    (2, TType.STRUCT, 'column_expr', [ColumnExpr, None], None, ),  # 2
    (3, TType.STRUCT, 'function_expr', [FunctionExpr, None], None, ),  # 3
    (4, TType.STRUCT, 'between_expr', [BetweenExpr, None], None, ),  # 4
    (5, TType.STRUCT, 'knn_expr', [KnnExpr, None], None, ),  # 5
    (6, TType.STRUCT, 'match_expr', [MatchExpr, None], None, ),  # 6
    (7, TType.STRUCT, 'fusion_expr', [FusionExpr, None], None, ),  # 7
    (8, TType.STRUCT, 'search_expr', [SearchExpr, None], None, ),  # 8
)
all_structs.append(ParsedExpr)
ParsedExpr.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'type', [ParsedExprType, None], None, ),  # 1
    (2, TType.STRING, 'alias_name', 'UTF8', None, ),  # 2
)
all_structs.append(ColumnExpr)
ColumnExpr.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'column_name', (TType.STRING, 'UTF8', False), [
    ], ),  # 1
    (2, TType.BOOL, 'star', None, None, ),  # 2
)
all_structs.append(EmbeddingData)
EmbeddingData.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'bool_array_value', (TType.BOOL, None, False), None, ),  # 1
    (2, TType.LIST, 'i8_array_value', (TType.STRING, 'BINARY', False), None, ),  # 2
    (3, TType.LIST, 'i16_array_value', (TType.I16, None, False), None, ),  # 3
    (4, TType.LIST, 'i32_array_value', (TType.I32, None, False), None, ),  # 4
    (5, TType.LIST, 'i64_array_value', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'f32_array_value', (TType.DOUBLE, None, False), None, ),  # 6
    (7, TType.LIST, 'f64_array_value', (TType.DOUBLE, None, False), None, ),  # 7
)
all_structs.append(InitParameter)
InitParameter.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'param_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'param_value', 'UTF8', None, ),  # 2
)
all_structs.append(KnnExpr)
KnnExpr.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'column_expr', [ColumnExpr, None], None, ),  # 1
    (2, TType.STRUCT, 'embedding_data', [EmbeddingData, None], None, ),  # 2
    (3, TType.I32, 'embedding_data_type', None, None, ),  # 3
    (4, TType.I32, 'distance_type', None, None, ),  # 4
    (5, TType.I64, 'topn', None, None, ),  # 5
    (6, TType.LIST, 'opt_params', (TType.STRUCT, [InitParameter, None], False), [
    ], ),  # 6
)
all_structs.append(MatchExpr)
MatchExpr.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fields', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'matching_text', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'options_text', 'UTF8', None, ),  # 3
)
all_structs.append(FusionExpr)
FusionExpr.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'method', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'options_text', 'UTF8', None, ),  # 2
)
all_structs.append(SearchExpr)
SearchExpr.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'match_exprs', (TType.STRUCT, [MatchExpr, None], False), None, ),  # 1
    (2, TType.LIST, 'knn_exprs', (TType.STRUCT, [KnnExpr, None], False), None, ),  # 2
    (3, TType.STRUCT, 'fusion_expr', [FusionExpr, None], None, ),  # 3
)
all_structs.append(ConstantExpr)
ConstantExpr.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'literal_type', None, None, ),  # 1
    (2, TType.BOOL, 'bool_value', None, None, ),  # 2
    (3, TType.I64, 'i64_value', None, None, ),  # 3
    (4, TType.DOUBLE, 'f64_value', None, None, ),  # 4
    (5, TType.STRING, 'str_value', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'i64_array_value', (TType.I64, None, False), None, ),  # 6
    (7, TType.LIST, 'f64_array_value', (TType.DOUBLE, None, False), None, ),  # 7
)
all_structs.append(FunctionExpr)
FunctionExpr.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'function_name', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'arguments', (TType.STRUCT, [ParsedExpr, None], False), None, ),  # 2
)
all_structs.append(BetweenExpr)
BetweenExpr.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'value', [ParsedExpr, None], None, ),  # 1
    (2, TType.STRUCT, 'upper_bound', [ParsedExpr, None], None, ),  # 2
    (3, TType.STRUCT, 'lower_bound', [ParsedExpr, None], None, ),  # 3
)
all_structs.append(UpdateExpr)
UpdateExpr.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'column_name', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'value', [ParsedExpr, None], None, ),  # 2
)
all_structs.append(OrderByExpr)
OrderByExpr.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'expr', [ParsedExpr, None], None, ),  # 1
    (2, TType.BOOL, 'asc', None, None, ),  # 2
)
all_structs.append(ColumnDef)
ColumnDef.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'data_type', [DataType, None], None, ),  # 3
    (4, TType.LIST, 'constraints', (TType.I32, None, False), [
    ], ),  # 4
    (5, TType.STRUCT, 'constant_expr', [ConstantExpr, None], None, ),  # 5
)
all_structs.append(Field)
Field.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'parse_exprs', (TType.STRUCT, [ParsedExpr, None], False), [
    ], ),  # 1
)
all_structs.append(ColumnField)
ColumnField.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'column_type', None, None, ),  # 1
    (2, TType.LIST, 'column_vectors', (TType.STRING, 'BINARY', False), [
    ], ),  # 2
    (3, TType.STRING, 'column_name', 'UTF8', None, ),  # 3
)
all_structs.append(ImportOption)
ImportOption.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'delimiter', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'copy_from', None, None, ),  # 2
    (3, TType.BOOL, 'has_header', None, None, ),  # 3
    (4, TType.I32, 'copy_file_type', None, None, ),  # 4
)
all_structs.append(CommonRequest)
CommonRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'session_id', None, None, ),  # 1
)
all_structs.append(CommonResponse)
CommonResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'error_code', None, None, ),  # 1
    (2, TType.STRING, 'error_msg', 'UTF8', None, ),  # 2
    (3, TType.I64, 'session_id', None, None, ),  # 3
)
all_structs.append(ListDatabaseRequest)
ListDatabaseRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'session_id', None, None, ),  # 1
)
all_structs.append(ListDatabaseResponse)
ListDatabaseResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'error_code', None, None, ),  # 1
    (2, TType.STRING, 'error_msg', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'db_names', (TType.STRING, 'UTF8', False), [
    ], ),  # 3
)
all_structs.append(ListTableRequest)
ListTableRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I64, 'session_id', None, None, ),  # 2
)
all_structs.append(ListTableResponse)
ListTableResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'error_code', None, None, ),  # 1
    (2, TType.STRING, 'error_msg', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'table_names', (TType.STRING, 'UTF8', False), [
    ], ),  # 3
)
all_structs.append(ListIndexRequest)
ListIndexRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.I64, 'session_id', None, None, ),  # 3
)
all_structs.append(ListIndexResponse)
ListIndexResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'error_code', None, None, ),  # 1
    (2, TType.STRING, 'error_msg', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'index_names', (TType.STRING, 'UTF8', False), [
    ], ),  # 3
)
all_structs.append(ShowDatabaseRequest)
ShowDatabaseRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I64, 'session_id', None, None, ),  # 2
)
all_structs.append(ShowDatabaseResponse)
ShowDatabaseResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'error_code', None, None, ),  # 1
    (2, TType.STRING, 'error_msg', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'database_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'store_dir', 'UTF8', None, ),  # 4
    (5, TType.I64, 'table_count', None, None, ),  # 5
)
all_structs.append(ShowTableRequest)
ShowTableRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.I64, 'session_id', None, None, ),  # 3
)
all_structs.append(ShowTableResponse)
ShowTableResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'error_code', None, None, ),  # 1
    (2, TType.STRING, 'error_msg', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'database_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'table_name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'store_dir', 'UTF8', None, ),  # 5
    (6, TType.I64, 'column_count', None, None, ),  # 6
    (7, TType.I64, 'segment_count', None, None, ),  # 7
    (8, TType.I64, 'row_count', None, None, ),  # 8
)
all_structs.append(ShowColumnsRequest)
ShowColumnsRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.I64, 'session_id', None, None, ),  # 3
)
all_structs.append(GetTableRequest)
GetTableRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.I64, 'session_id', None, None, ),  # 3
)
all_structs.append(IndexInfo)
IndexInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'column_name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'index_type', None, None, ),  # 2
    (3, TType.LIST, 'index_param_list', (TType.STRUCT, [InitParameter, None], False), [
    ], ),  # 3
)
all_structs.append(CreateIndexRequest)
CreateIndexRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'index_name', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.LIST, 'index_info_list', (TType.STRUCT, [IndexInfo, None], False), [
    ], ),  # 5
    (6, TType.I64, 'session_id', None, None, ),  # 6
    (7, TType.STRUCT, 'create_option', [CreateOption, None], None, ),  # 7
)
all_structs.append(DropIndexRequest)
DropIndexRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'index_name', 'UTF8', None, ),  # 3
    (4, TType.I64, 'session_id', None, None, ),  # 4
    (5, TType.STRUCT, 'drop_option', [DropOption, None], None, ),  # 5
)
all_structs.append(ShowIndexRequest)
ShowIndexRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'index_name', 'UTF8', None, ),  # 3
    (4, TType.I64, 'session_id', None, None, ),  # 4
)
all_structs.append(ShowIndexResponse)
ShowIndexResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'error_code', None, None, ),  # 1
    (2, TType.STRING, 'error_msg', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'db_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'table_name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'index_name', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'index_type', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'index_column_names', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'index_column_ids', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'other_parameters', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'store_dir', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'store_size', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'segment_index_count', 'UTF8', None, ),  # 12
)
all_structs.append(GetDatabaseRequest)
GetDatabaseRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I64, 'session_id', None, None, ),  # 2
)
all_structs.append(CreateDatabaseRequest)
CreateDatabaseRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I64, 'session_id', None, None, ),  # 2
    (3, TType.STRUCT, 'create_option', [CreateOption, None], None, ),  # 3
)
all_structs.append(DropDatabaseRequest)
DropDatabaseRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.I64, 'session_id', None, None, ),  # 2
    (3, TType.STRUCT, 'drop_option', [DropOption, None], None, ),  # 3
)
all_structs.append(CreateTableRequest)
CreateTableRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'column_defs', (TType.STRUCT, [ColumnDef, None], False), [
    ], ),  # 3
    None,  # 4
    None,  # 5
    (6, TType.I64, 'session_id', None, None, ),  # 6
    (7, TType.STRUCT, 'create_option', [CreateOption, None], None, ),  # 7
)
all_structs.append(DropTableRequest)
DropTableRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.I64, 'session_id', None, None, ),  # 3
    (4, TType.STRUCT, 'drop_option', [DropOption, None], None, ),  # 4
)
all_structs.append(InsertRequest)
InsertRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'column_names', (TType.STRING, 'UTF8', False), [
    ], ),  # 3
    (4, TType.LIST, 'fields', (TType.STRUCT, [Field, None], False), [
    ], ),  # 4
    (5, TType.I64, 'session_id', None, None, ),  # 5
)
all_structs.append(ImportRequest)
ImportRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'file_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'file_content', 'BINARY', None, ),  # 4
    (5, TType.STRUCT, 'import_option', [ImportOption, None], None, ),  # 5
    (6, TType.I64, 'session_id', None, None, ),  # 6
)
all_structs.append(ExplainRequest)
ExplainRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'session_id', None, None, ),  # 1
    (2, TType.STRING, 'db_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'table_name', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'select_list', (TType.STRUCT, [ParsedExpr, None], False), [
    ], ),  # 4
    (5, TType.STRUCT, 'search_expr', [SearchExpr, None], None, ),  # 5
    (6, TType.STRUCT, 'where_expr', [ParsedExpr, None], None, ),  # 6
    (7, TType.LIST, 'group_by_list', (TType.STRUCT, [ParsedExpr, None], False), [
    ], ),  # 7
    (8, TType.STRUCT, 'having_expr', [ParsedExpr, None], None, ),  # 8
    (9, TType.STRUCT, 'limit_expr', [ParsedExpr, None], None, ),  # 9
    (10, TType.STRUCT, 'offset_expr', [ParsedExpr, None], None, ),  # 10
    (11, TType.LIST, 'order_by_list', (TType.STRUCT, [OrderByExpr, None], False), [
    ], ),  # 11
    (12, TType.I32, 'explain_type', None, None, ),  # 12
)
all_structs.append(ExplainResponse)
ExplainResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'error_code', None, None, ),  # 1
    (2, TType.STRING, 'error_msg', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'column_defs', (TType.STRUCT, [ColumnDef, None], False), [
    ], ),  # 3
    (4, TType.LIST, 'column_fields', (TType.STRUCT, [ColumnField, None], False), [
    ], ),  # 4
)
all_structs.append(SelectRequest)
SelectRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'session_id', None, None, ),  # 1
    (2, TType.STRING, 'db_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'table_name', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'select_list', (TType.STRUCT, [ParsedExpr, None], False), [
    ], ),  # 4
    (5, TType.STRUCT, 'search_expr', [SearchExpr, None], None, ),  # 5
    (6, TType.STRUCT, 'where_expr', [ParsedExpr, None], None, ),  # 6
    (7, TType.LIST, 'group_by_list', (TType.STRUCT, [ParsedExpr, None], False), [
    ], ),  # 7
    (8, TType.STRUCT, 'having_expr', [ParsedExpr, None], None, ),  # 8
    (9, TType.STRUCT, 'limit_expr', [ParsedExpr, None], None, ),  # 9
    (10, TType.STRUCT, 'offset_expr', [ParsedExpr, None], None, ),  # 10
    (11, TType.LIST, 'order_by_list', (TType.STRUCT, [OrderByExpr, None], False), [
    ], ),  # 11
)
all_structs.append(SelectResponse)
SelectResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'error_code', None, None, ),  # 1
    (2, TType.STRING, 'error_msg', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'column_defs', (TType.STRUCT, [ColumnDef, None], False), [
    ], ),  # 3
    (4, TType.LIST, 'column_fields', (TType.STRUCT, [ColumnField, None], False), [
    ], ),  # 4
)
all_structs.append(DeleteRequest)
DeleteRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'where_expr', [ParsedExpr, None], None, ),  # 3
    (4, TType.I64, 'session_id', None, None, ),  # 4
)
all_structs.append(UpdateRequest)
UpdateRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'db_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'table_name', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'where_expr', [ParsedExpr, None], None, ),  # 3
    (4, TType.LIST, 'update_expr_array', (TType.STRUCT, [UpdateExpr, None], False), [
    ], ),  # 4
    (5, TType.I64, 'session_id', None, None, ),  # 5
)
all_structs.append(ShowVariableRequest)
ShowVariableRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'session_id', None, None, ),  # 1
    (2, TType.STRING, 'variable_name', 'UTF8', None, ),  # 2
)
all_structs.append(ShowTablesRequest)
ShowTablesRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'session_id', None, None, ),  # 1
    (2, TType.STRING, 'db_name', 'UTF8', None, ),  # 2
)
all_structs.append(ShowSegmentsRequest)
ShowSegmentsRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'session_id', None, None, ),  # 1
    (2, TType.STRING, 'db_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'table_name', 'UTF8', None, ),  # 3
)
all_structs.append(ShowSegmentRequest)
ShowSegmentRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'session_id', None, None, ),  # 1
    (2, TType.STRING, 'db_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'table_name', 'UTF8', None, ),  # 3
    (4, TType.I64, 'segment_id', None, None, ),  # 4
)
all_structs.append(ShowSegmentResponse)
ShowSegmentResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'error_code', None, None, ),  # 1
    (2, TType.STRING, 'error_msg', 'UTF8', None, ),  # 2
    (3, TType.I64, 'segment_id', None, None, ),  # 3
    (4, TType.STRING, 'status', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'path', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'size', 'UTF8', None, ),  # 6
    (7, TType.I64, 'block_count', None, None, ),  # 7
    (8, TType.I64, 'row_capacity', None, None, ),  # 8
    (9, TType.I64, 'row_count', None, None, ),  # 9
    (10, TType.I64, 'room', None, None, ),  # 10
    (11, TType.I64, 'column_count', None, None, ),  # 11
)
all_structs.append(ShowBlocksRequest)
ShowBlocksRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'session_id', None, None, ),  # 1
    (2, TType.STRING, 'db_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'table_name', 'UTF8', None, ),  # 3
    (4, TType.I64, 'segment_id', None, None, ),  # 4
)
all_structs.append(ShowBlockRequest)
ShowBlockRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'session_id', None, None, ),  # 1
    (2, TType.STRING, 'db_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'table_name', 'UTF8', None, ),  # 3
    (4, TType.I64, 'segment_id', None, None, ),  # 4
    (5, TType.I64, 'block_id', None, None, ),  # 5
)
all_structs.append(ShowBlockResponse)
ShowBlockResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'error_code', None, None, ),  # 1
    (2, TType.STRING, 'error_msg', 'UTF8', None, ),  # 2
    (3, TType.I64, 'block_id', None, None, ),  # 3
    (4, TType.STRING, 'path', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'size', 'UTF8', None, ),  # 5
    (6, TType.I64, 'row_capacity', None, None, ),  # 6
    (7, TType.I64, 'row_count', None, None, ),  # 7
    (8, TType.I64, 'column_count', None, None, ),  # 8
)
all_structs.append(ShowBlockColumnRequest)
ShowBlockColumnRequest.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'session_id', None, None, ),  # 1
    (2, TType.STRING, 'db_name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'table_name', 'UTF8', None, ),  # 3
    (4, TType.I64, 'segment_id', None, None, ),  # 4
    (5, TType.I64, 'block_id', None, None, ),  # 5
    (6, TType.I64, 'column_id', None, None, ),  # 6
)
all_structs.append(ShowBlockColumnResponse)
ShowBlockColumnResponse.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'error_code', None, None, ),  # 1
    (2, TType.STRING, 'error_msg', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'column_name', 'UTF8', None, ),  # 3
    (4, TType.I64, 'column_id', None, None, ),  # 4
    (5, TType.STRING, 'data_type', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'path', 'UTF8', None, ),  # 6
    (7, TType.I64, 'extra_file_count', None, None, ),  # 7
    (8, TType.STRING, 'extra_file_names', 'UTF8', None, ),  # 8
)
fix_spec(all_structs)
del all_structs
