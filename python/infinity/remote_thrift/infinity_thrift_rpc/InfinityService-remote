#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.19.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from infinity_thrift_rpc import InfinityService
from infinity_thrift_rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  CommonResponse Connect()')
    print('  CommonResponse Disconnect(CommonRequest request)')
    print('  CommonResponse CreateDatabase(CreateDatabaseRequest request)')
    print('  CommonResponse DropDatabase(DropDatabaseRequest request)')
    print('  CommonResponse CreateTable(CreateTableRequest request)')
    print('  CommonResponse DropTable(DropTableRequest request)')
    print('  CommonResponse Insert(InsertRequest request)')
    print('  CommonResponse Import(ImportRequest request)')
    print('  SelectResponse Select(SelectRequest request)')
    print('  CommonResponse Delete(DeleteRequest request)')
    print('  CommonResponse Update(UpdateRequest request)')
    print('  UploadResponse UploadFileChunk(FileChunk request)')
    print('  ListDatabaseResponse ListDatabase(ListDatabaseRequest request)')
    print('  ListTableResponse ListTable(ListTableRequest request)')
    print('  DescribeDatabaseResponse DescribeDatabase(DescribeDatabaseRequest request)')
    print('  DescribeTableResponse DescribeTable(DescribeTableRequest request)')
    print('  CommonResponse GetDatabase(GetDatabaseRequest request)')
    print('  CommonResponse GetTable(GetTableRequest request)')
    print('  CommonResponse CreateIndex(CreateIndexRequest request)')
    print('  CommonResponse DropIndex(DropIndexRequest request)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = InfinityService.Client(protocol)
transport.open()

if cmd == 'Connect':
    if len(args) != 0:
        print('Connect requires 0 args')
        sys.exit(1)
    pp.pprint(client.Connect())

elif cmd == 'Disconnect':
    if len(args) != 1:
        print('Disconnect requires 1 args')
        sys.exit(1)
    pp.pprint(client.Disconnect(eval(args[0]),))

elif cmd == 'CreateDatabase':
    if len(args) != 1:
        print('CreateDatabase requires 1 args')
        sys.exit(1)
    pp.pprint(client.CreateDatabase(eval(args[0]),))

elif cmd == 'DropDatabase':
    if len(args) != 1:
        print('DropDatabase requires 1 args')
        sys.exit(1)
    pp.pprint(client.DropDatabase(eval(args[0]),))

elif cmd == 'CreateTable':
    if len(args) != 1:
        print('CreateTable requires 1 args')
        sys.exit(1)
    pp.pprint(client.CreateTable(eval(args[0]),))

elif cmd == 'DropTable':
    if len(args) != 1:
        print('DropTable requires 1 args')
        sys.exit(1)
    pp.pprint(client.DropTable(eval(args[0]),))

elif cmd == 'Insert':
    if len(args) != 1:
        print('Insert requires 1 args')
        sys.exit(1)
    pp.pprint(client.Insert(eval(args[0]),))

elif cmd == 'Import':
    if len(args) != 1:
        print('Import requires 1 args')
        sys.exit(1)
    pp.pprint(client.Import(eval(args[0]),))

elif cmd == 'Select':
    if len(args) != 1:
        print('Select requires 1 args')
        sys.exit(1)
    pp.pprint(client.Select(eval(args[0]),))

elif cmd == 'Delete':
    if len(args) != 1:
        print('Delete requires 1 args')
        sys.exit(1)
    pp.pprint(client.Delete(eval(args[0]),))

elif cmd == 'Update':
    if len(args) != 1:
        print('Update requires 1 args')
        sys.exit(1)
    pp.pprint(client.Update(eval(args[0]),))

elif cmd == 'UploadFileChunk':
    if len(args) != 1:
        print('UploadFileChunk requires 1 args')
        sys.exit(1)
    pp.pprint(client.UploadFileChunk(eval(args[0]),))

elif cmd == 'ListDatabase':
    if len(args) != 1:
        print('ListDatabase requires 1 args')
        sys.exit(1)
    pp.pprint(client.ListDatabase(eval(args[0]),))

elif cmd == 'ListTable':
    if len(args) != 1:
        print('ListTable requires 1 args')
        sys.exit(1)
    pp.pprint(client.ListTable(eval(args[0]),))

elif cmd == 'DescribeDatabase':
    if len(args) != 1:
        print('DescribeDatabase requires 1 args')
        sys.exit(1)
    pp.pprint(client.DescribeDatabase(eval(args[0]),))

elif cmd == 'DescribeTable':
    if len(args) != 1:
        print('DescribeTable requires 1 args')
        sys.exit(1)
    pp.pprint(client.DescribeTable(eval(args[0]),))

elif cmd == 'GetDatabase':
    if len(args) != 1:
        print('GetDatabase requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetDatabase(eval(args[0]),))

elif cmd == 'GetTable':
    if len(args) != 1:
        print('GetTable requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetTable(eval(args[0]),))

elif cmd == 'CreateIndex':
    if len(args) != 1:
        print('CreateIndex requires 1 args')
        sys.exit(1)
    pp.pprint(client.CreateIndex(eval(args[0]),))

elif cmd == 'DropIndex':
    if len(args) != 1:
        print('DropIndex requires 1 args')
        sys.exit(1)
    pp.pprint(client.DropIndex(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
